@page "/dealer/comment/{tid}"
@using Fluxor
@using Humanizer
@using Lyra.Data.API.Identity
@using Lyra.Data.API.WorkFlow
@using Lyra.Data.Crypto
@using Lyra.Data.Shared
@using System.Text
@using Nebula.Store.WebWalletUseCase
@using UserLibrary.Data
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation

<div class="mag">
    <h2>@localizer["Comment"]</h2>

    <div>
        @localizer["About trade"] @tid.Shorten()
    </div>

    @if (comments != null)
    {
        foreach(var comment in comments)
        {
            <MudCard Style="margin: 15px;">
                <MudCardHeader>
                    <CardHeaderAvatar>
                        <MudAvatar Color="Color.Secondary">@users[comment.ByAccountId][0]</MudAvatar>
                    </CardHeaderAvatar>
                    <CardHeaderContent>
                        <MudText Typo="Typo.body1">@users[comment.ByAccountId]</MudText>
                        <MudText Typo="Typo.body2">@localizer["Role:"] @roles[comment.ByAccountId], @localizer["registered since"] @times[comment.ByAccountId].Humanize()</MudText>
                    </CardHeaderContent>
                    <CardHeaderActions>
                        @*<MudIconButton Icon="@Icons.Material.Filled.Settings" Color="Color.Default" />*@
                    </CardHeaderActions>
                </MudCardHeader>
                <MudCardContent>
                    <hr style="height: 1px;" />
                    <div style="display: flex;">             
                        <div style="flex: 0 0 50%;">
                            <MudRating SelectedValue=@comment.Rating ReadOnly Size="Size.Medium" />
                        </div>
                        <div style="flex: 1;">
                            <MudText Style="align-self: end; float: right;">@comment.Created.Humanize()</MudText>
                        </div>
                    </div>
                    <div>
                        <h3>@comment.Title</h3>
                    </div>
                    <MudText Typo="Typo.body2">@comment.Content</MudText>
                </MudCardContent>
                <MudCardActions>
                    <MudIconButton Icon="@Icons.Material.Filled.Favorite" Color="Color.Default" />
                    <MudIconButton Icon="@Icons.Material.Filled.Share" Color="Color.Default" OnClick="@(e => CopyTextToClipboard(Navigation.Uri))" />
                </MudCardActions>
            </MudCard>
        }
    }

    @if (walletState.Value.wallet != null && brief != null && brief.Members.Contains(walletState.Value.wallet.AccountId) && 
        comments != null && !comments.Any(a => a.ByAccountId == walletState.Value.wallet.AccountId))
    {
        <RadzenTemplateForm TItem="CommentConfig" Data=@cfg Submit=@OnSubmit InvalidSubmit=@OnInvalidSubmit>

            <div class="spc">
                <label class="ratile">@localizer["Rate your recent experience"]</label>
                <div class="d-flex flex-column">
                    <MudRating @bind-SelectedValue="cfg.Rating" Size="Size.Large" HoveredValueChanged="HandleHoveredValueChanged" />
                    @if (cfg.Rating == 0)
                    {
                        <p style="color: red;">@localizer["Rating is required."]</p>
                    }
                <MudText Typo="Typo.subtitle2" Class="deep-purple-text mt-2">@LabelText</MudText>


            </div>
        </div>
        <div class="spc">
            <p>@localizer["Tell us about your experience"]</p>
            @*        <a href="#" target="_blank" class="">Read our Guidelines for Reviewers</a>
                <p>How to write a useful review</p>*@
            <div class="">
                <RadzenTextArea Style="width: 420px; height: 128px" Name="comment" Placeholder="This is where you write your review. Explain what happened, and leave out offensive words. Keep your feedback honest, helpful, and constructive." @bind-Value="@cfg.Content" /> <br />
                <RadzenRequiredValidator Component="comment" Text=@localizer["Comment is required"] Popup=false Style="position: absolute" />
            </div>

        </div>
        <div class="spc">
            <label class="" for="review-title">@localizer["Give your review a title"]</label>
            <div class="">
                <RadzenTextBox Class="" Style="width: 420px; " Name="title" Placeholder="Write the title of your review here." @bind-Value="@cfg.Title" /> <br />
                <RadzenRequiredValidator Component="title" Text=@localizer["Title is required"] Popup=false Style="position: absolute" />
            </div>
        </div>
        <div class="spc">
            <div>
                <RadzenCheckBox @bind-Value=@cfg.Confirm Name="confirm" TValue="bool" />
                <label for="confirm">@localizer["I confirm this review is about my own genuine experience. I have not been offered any incentive or payment to leave a review for this trade."]</label> <br />

            </div>
            <RadzenRequiredValidator Component="confirm" Text=@localizer["Confirmation is required"] Popup=false Style="position: absolute" />
        </div>
        <div class="spc">
            <RadzenButton ButtonType="Radzen.ButtonType.Submit" Text=@localizer["Submit"]>
            </RadzenButton>
        </div>

    </RadzenTemplateForm>
    }
</div>

@code {
    private int? activeVal;
    CommentConfig cfg = new CommentConfig { };

    [Inject] DealerConnMgr connMgr { get; set; }
    [Inject] ISnackbar Snackbar { get; set; }
    [Inject] ILyraAPI lyraApi { get; set; }
    [Inject]
    private IState<WebWalletState> walletState { get; set; }
    [Inject] IStringLocalizer<Comment>? localizer { get; set; }
    [Parameter]
    public string tid { get; set; }

    List<CommentConfig> comments;

    private void HandleHoveredValueChanged(int? val) => activeVal = val;

    private string LabelText => (activeVal ?? cfg.Rating) switch
    {
        1 => localizer["Very bad"],
        2 => localizer["Bad"],
        3 => localizer["Sufficient"],
        4 => localizer["Good"],
        5 => localizer["Awesome!"],
        _ => localizer["Rate your trade!"]
    };

    TradeBrief brief;
    Dictionary<string, string> users;
    Dictionary<string, DateTime> times;
    Dictionary<string, string> roles;

    IOtcTrade trade;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var lsb = (await lyraApi.GetLastServiceBlockAsync()).As<ServiceBlock>();
            if(lsb != null)
            {
                var wallet = walletState.Value.wallet;
                string signature = "";
                string actid = "";
                if(wallet != null)
                {
                    actid = walletState.Value.wallet.AccountId;
                    signature = Signatures.GetSignature(wallet.PrivateKey, lsb.Hash, wallet.AccountId);
                }

                var tradeblk = await lyraApi.GetLastBlockAsync(tid);
                trade = tradeblk.As<IOtcTrade>();
                var dealer = connMgr.GetDealer(trade.Trade.dealerId);

                brief = (await dealer.GetTradeBriefAsync(tid, actid, signature)).Deserialize<TradeBrief>();

                users = new Dictionary<string, string>();
                users.Add(brief.Members.First(), brief.Names.First());
                users.Add(brief.Members.Skip(1).First(), brief.Names.Skip(1).First());

                times = new Dictionary<string, DateTime>();
                times.Add(brief.Members.First(), brief.RegTimes.First());
                times.Add(brief.Members.Skip(1).First(), brief.RegTimes.Skip(1).First());

                roles = new Dictionary<string, string>();
                roles.Add(brief.Members.First(), localizer["Seller"]);
                roles.Add(brief.Members.Skip(1).First(), localizer["Buyer"]);

                comments = await dealer.GetCommentsForTradeAsync(tid);
                StateHasChanged();
            }
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    async Task OnSubmit(CommentConfig model)
    {
        cfg.Created = DateTime.UtcNow;
        cfg.TradeId = tid;
        cfg.ByAccountId = walletState.Value.wallet.AccountId;

        cfg.EncContent = Convert.ToBase64String(Encoding.UTF8.GetBytes(cfg.Content));
        cfg.EncTitle = Convert.ToBase64String(Encoding.UTF8.GetBytes(cfg.Title));

        cfg.Hash = null;    // reset it.
        cfg.Signature = null;
        cfg.Sign(walletState.Value.wallet.PrivateKey, walletState.Value.wallet.AccountId);

        //send comment to all active dealer.
        await connMgr.All(async dlr =>
        {
            var result = await dlr.CommentTradeAsync(cfg);
            if (result.Successful())
            {
                Snackbar.Add(localizer["Comment Posted."], Severity.Success);
                comments = await dlr.GetCommentsForTradeAsync(tid);
                StateHasChanged();
            }
            else
            {
                Snackbar.Add(localizer["Failed to comment: {0}", result.ResultCode.Humanize()], Severity.Warning);
            }
        });
    }

    void OnInvalidSubmit(FormInvalidSubmitEventArgs args)
    {
    }

    private async Task CopyTextToClipboard(string Text)
    {
        await JSRuntime.InvokeVoidAsync("clipboardCopy.copyText", Text);
    }

}
