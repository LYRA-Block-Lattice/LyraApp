@page "/otc"

@using BusinessLayer.Lib;
@using Fluxor
@using Fluxor.Blazor.Web.Components
@using Lyra.Data.Crypto
@using Lyra.Data.Shared
@using Nebula.Store.WebWalletUseCase
@using Microsoft.Extensions.Configuration
@using Lyra.Data.API.WorkFlow
@using System.Text
@using UserLibrary.Data
@inherits PageWithContextMenu
@using Radzen
@using Radzen.Blazor

<div class="mag cet">
    @if (orders == null)
    {
        <MudProgressCircular Color="Color.Primary" Style="height:70px;width:70px;" Indeterminate="true" />
    }
    else
    {
        <div style="width:100%; text-align:center;">
            <div>
                <RadzenSelectBar @bind-Value=@dir TValue="TradeDirection" Change="@dirchgd">
                    <Items>
                        <RadzenSelectBarItem Text=@localizer["Sell"] Value="TradeDirection.Buy" />
                        <RadzenSelectBarItem Text=@localizer["Buy"] Value="TradeDirection.Sell" />
                    </Items>
                </RadzenSelectBar>
            </div>
            <div>
                <MudTabs @bind-ActivePanelIndex="activeIndex" @ref="tabs" Rounded="true" Centered="true">
                    @foreach (var crypto in tradableCryptos)
                    {
                        <MudTabPanel Text=@(crypto.Replace("tether/", "$"))>
                            <div class="cet mag">
                                @foreach (var odr in orders[dir][crypto])
                                {
                                    @*Snackbar.Add($"display order {odr.AccountID.Shorten()}");*@
                                    var dao = daos.First(a => (a as TransactionBlock).AccountID == odr.Order.daoId);
                                    var stat = userStats.FirstOrDefault(a => a.AccountId == odr.OwnerAccountId);
                                    <UserLibrary.Components.OTC.OrderDisplay Otc=@odr Dao=@dao Stats="@stat" OrderSelected=@ShowCreateTradeUI />
                                }
                            </div>
                        </MudTabPanel>
                    }
                </MudTabs>
            </div>
        </div>

    }
</div>


@code {
    [Inject]
    private IState<WebWalletState> walletState { get; set; }

    [Inject]
    private IDispatcher Dispatcher { get; set; }

    [Inject]
    IConfiguration Configuration { get; set; }

    [Inject] ISnackbar Snackbar { get; set; }
    [Inject] NavigationManager Navigation { get; set; }
    [Inject] ILyraAPI lyraApi { get; set; }
    [Inject] DealerConnMgr connMgr { get; set; }
    [Inject] IStringLocalizer<MarketMain>? localizer { get; set; }

    TradeDirection dir = TradeDirection.Sell;
    MudTabs tabs;

    List<string> tradableCryptos;

    Dictionary<TradeDirection, Dictionary<string, List<IOtcOrder>>> orders;

    List<IDao> alldaos = new List<IDao>();
    List<IDao> daos = new List<IDao>();
    List<UserStats> userStats = new List<UserStats>();

    int activeIndex = 0;

    string name, desc;
    int sellerPar, buyerPar;

    Dictionary<string, decimal> MarketPrices;

    protected override void OnInitialized()
    {
        _title = localizer["Lyra P2P OTC Trade"];
        base.OnInitialized();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {            
            SubscribeToAction<ContractChangeEvent>(async cce =>
            {
                await RefreshOrders();
                await InvokeAsync(() => StateHasChanged());
            });

            await RefreshOrders();
            StateHasChanged();
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    protected override Dictionary<string, string> CreateContextMenu()
    {
        if (walletState.Value.wallet == null)
        {
            return new Dictionary<string, string> {
                            { localizer["Open wallet to trade"], "/wallet" },
                        };
        }
        else
        {
            return  new Dictionary<string, string> {
                            { localizer["Create New Order"], "/otc/new" },
                            { localizer["My Orders"], "/otc/myorders" },
                            { localizer["My Trades"], "/otc/mytrades" },
                        };
        }
    }

    void dirchgd()
    {
        StateHasChanged();
    }

    private async Task ShowCreateTradeUI(IOtcOrder order)
    {
        if (walletState.Value.wallet == null)
        {
            Navigation.NavigateTo("/wallet");
            return;
        }
        //check if user has been registed on dealer server
        var client = connMgr.GetDealer(order.Order.dealerId);
        var user = await client.GetUserByAccountIdAsync(walletState.Value.wallet.AccountId);
        if (!user.Successful())
        {
            // register user
            Navigation.NavigateTo($"/dealer/register/{order.Order.dealerId}");
        }
        else
        {
            Navigation.NavigateTo($"/dealer/trade/{(order as TransactionBlock).AccountID}");
        }
    }

    private async Task RefreshOrders()
    {
        try
        {
            var dealerClient = connMgr.GetDealer(null);
            if (dealerClient == null)
                return;

            var payload = await dealerClient.GetAsync<UPOTCOrders>("GetOTC");

            // get tradable orders
            if (payload != null)
            {
                var allblks = payload.container.GetBlocks("orders");
                var odrs = allblks.Cast<IOtcOrder>();

                daos = payload.container.GetBlocks("daos").Cast<IDao>().ToList();
                userStats = payload.users;

                //if(odrs == null || !odrs.Any())
                var tradableOrders = odrs
                    .Where(a => a.Order.amount > 0 && a.Order.crypto.StartsWith("tether/"))
                    .OrderBy(a => a.Order.price)
                    .ToList();

                if (Configuration["network"] == "devnet")   // too many on devnet
                    tradableOrders = tradableOrders.Take(30).ToList();

                tradableCryptos = tradableOrders.Select(a => a.Order.crypto)
                    .Distinct()
                    .ToList();

                var sb = new StringBuilder();

                // buy sell tab
                // token tab
                // orders
                orders = new Dictionary<TradeDirection, Dictionary<string, List<IOtcOrder>>>();
                foreach(var dir in new [] { TradeDirection.Sell, TradeDirection.Buy })
                {
                    var drdlist = new Dictionary<string, List<IOtcOrder>>();
                    foreach(var tcrypto in tradableCryptos)
                    {
                        var olist = tradableOrders.Where(a => a.Order.dir == dir && a.Order.crypto == tcrypto).ToList();
                        drdlist.Add(tcrypto, olist);

                        //foreach(var o in olist)
                        //{
                        //    sb.AppendLine($"{dir} {tcrypto} {o.AccountID}");

                        //    if(!userStats.ContainsKey(o.OwnerAccountId))
                        //    {
                        //        sb.AppendLine($"GetUserStats {o.OwnerAccountId}");
                        //        var us = await GetUserStats(o);
                        //        userStats.Add(o.OwnerAccountId, us);
                        //    }                                
                        //}

                    }
                    orders.Add(dir, drdlist);
                }

                var dbg = sb.ToString();                
            }
        }
        catch (Exception e)
        {
            Snackbar.Add(localizer["Failed to refresh orders: {0}", e], Severity.Error);
        }
    }

    private async Task<UserStats?> GetUserStats(IOtcOrder order)
    {
        var dealerClient = connMgr.GetDealer(order.Order.dealerId);
        if (dealerClient == null)
            return null;

        // get users
        try
        {
            var user = await dealerClient.GetUserByAccountIdAsync(order.OwnerAccountId);
            if (user.Successful())
            {
                return user.Deserialize<UserStats>();
            }
        }
        catch (Exception ex)
        {
            
        }

        return null;
    }
}
