@page "/otc"

@using Fluxor
@using Fluxor.Blazor.Web.Components
@using Lyra.Data.Crypto
@using Nebula.Store.WebWalletUseCase
@using Microsoft.Extensions.Configuration
@using Lyra.Data.API.WorkFlow
@using UserLibrary.Data
@inherits FluxorComponent

<div class="mag cet">
                @if (tradableOrders == null)
                {
                    <MudProgressCircular Color="Color.Primary" Style="height:70px;width:70px;" Indeterminate="true" />
                }
                else
                {
                    <div style="width:100%; text-align:center;">
                        <div>
                            <RadzenSelectBar @bind-Value=@dir TValue="TradeDirection" Change="@dirchgd">
                            <Items>
                                <RadzenSelectBarItem Text="Buy" Value="TradeDirection.Buy" />
                                <RadzenSelectBarItem Text="Sell" Value="TradeDirection.Sell" />
                            </Items>
                        </RadzenSelectBar>

                        </div>
                        <div>
                    <MudTabs Rounded="true" Centered="true">

                        @foreach(var crypto in tradableCryptos)
                        {                            
                            <MudTabPanel Text=@(crypto.Replace("tether/", "$"))>
                                <div class="cet mag">
                                 @foreach (var odr in tradableOrders
                                    .Where(a => a.Order.crypto == crypto && a.Order.dir != dir)
                                    .OrderByDescending(a => a.Order.price)
                                 )
                                    {
                                        var dao = daos.First(a => (a as TransactionBlock).AccountID == odr.Order.daoId);
                                        var stat = tradeStats.First(a => a.AccountId == odr.OwnerAccountId);
                                        <UserLibrary.Components.OTC.OrderDisplay Otc=@odr Dao=@dao OrderSelected=@ShowCreateTradeUI />
                                    }
                                </div>
                            </MudTabPanel>
                            
                        }
                    </MudTabs>
                    </div>
                    </div>

                }
</div>


@code {
    [Inject]
    private IState<WebWalletState> walletState { get; set; }

    [Inject]
    private IDispatcher Dispatcher { get; set; }

    [Inject]
    IConfiguration Configuration { get; set; }

    [Inject] ISnackbar Snackbar { get; set; }
    [Inject] NavigationManager Navigation { get; set; }
    [Inject] ILyraAPI lyraApi { get; set; }
    [Inject] DealerConnMgr connMgr { get; set; }

    TradeDirection dir;

    List<string> tradableCryptos;
    List<IOtcOrder> tradableOrders;
    List<TradeStats> tradeStats;
    List<IDao> alldaos = new List<IDao>();
    List<IDao> daos = new List<IDao>();

    int activeIndex = 0;

    string name, desc;
    int sellerPar, buyerPar;    

    Dictionary<string, decimal> MarketPrices;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            SubscribeToAction<ContractChangeEvent>(async cce =>
            {
                await RefreshOrders();
                await InvokeAsync(() => StateHasChanged());
            });

            if (walletState.Value.wallet == null)
            {
                Dispatcher.Dispatch(new WebWalletChangeTitleAction
                    {
                        title = "Lyra P2P OTC Trade",
                        menus = new Dictionary<string, string> { 
                            { "Open wallet to trade", "/wallet" },
                        }
                    });
            }
            else
            {
                Dispatcher.Dispatch(new WebWalletChangeTitleAction
                    {
                        title = "Lyra P2P OTC Trade",
                        menus = new Dictionary<string, string> { 
                            { "Create New Order", "/otc/new" },
                            { "My Orders", "/otc/myorders" },
                            { "My Trades", "/otc/mytrades" },
                        }
                    });
            }

            await RefreshOrders();
            StateHasChanged();
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    void dirchgd()
    {
        StateHasChanged();
    }

    private async Task ShowCreateTradeUI(IOtcOrder order)
    {
        if (walletState.Value.wallet == null)
        {
            Navigation.NavigateTo("/wallet");
            return;
        }
        //check if user has been registed on dealer server
        var client = connMgr.GetDealer(order.Order.dealerId);
        var user = await client.GetUserByAccountIdAsync(walletState.Value.wallet.AccountId);
        if (!user.Successful())
        {
            // register user
            Navigation.NavigateTo($"/dealer/register/{order.Order.dealerId}");
        }
        else
        {
            Navigation.NavigateTo($"/dealer/trade/{(order as TransactionBlock).AccountID}");
        }
    }

    private async Task RefreshOrders()
    {
        try
        {
            // get tradable orders
            var tosret = await lyraApi.FindTradableOtcAsync();
            if (tosret.Successful())
            {
                var allblks = tosret.GetBlocks("orders");
                var odrs = allblks.Cast<IOtcOrder>();
                //if(odrs == null || !odrs.Any())
                tradableOrders = odrs
                    .Where(a => a.Order.amount > 0)
                    .OrderBy(a => a.Order.price)
                    .ToList();
                tradableCryptos = tradableOrders.Select(a => a.Order.crypto)
                    .Distinct()
                    .ToList();

                daos = tosret.GetBlocks("daos").Cast<IDao>().ToList();
            }

            var req = new TradeStatsReq
                {
                    AccountIDs = tradableOrders.Select(a => a.OwnerAccountId).ToList()
                };
            var statsret = await lyraApi.GetOtcTradeStatsForUsersAsync(req);
            if(statsret.Successful())
            {
                tradeStats = statsret.Deserialize<List<TradeStats>>();
            }
        }
        catch(Exception e)
        {
            Snackbar.Add($"Failed to refresh orders: {e}", Severity.Error);
        }
    }
}
