@page "/otc"
@page "/otc/{action}"

@using Fluxor
@using Fluxor.Blazor.Web.Components
@using Lyra.Data.Crypto
@using Nebula.Store.WebWalletUseCase
@using Microsoft.Extensions.Configuration
@using Lyra.Data.API.WorkFlow
@using UserLibrary.Data
@inherits FluxorComponent


    <MudTabs Elevation="2" Rounded="true" Centered="true" Color="Color.Secondary"
        @bind-ActivePanelIndex="activeIndex">
        <MudTabPanel Text="Market">
                @if (tradableOrders == null)
                {
                    <MudProgressCircular Color="Color.Primary" Style="height:70px;width:70px;" Indeterminate="true" />
                }
                else
                {
                    <MudTabs Rounded="true">
                        @foreach(var crypto in tradableCryptos)
                        {                            
                            <MudTabPanel Text=@(crypto.Replace("tether/", "$"))>
                                <div class="cet mag">
                                 @foreach (var odr in tradableOrders
                                    .Where(a => a.Order.crypto == crypto)
                                    .OrderByDescending(a => a.Order.price)
                                 )
                                    {
                                        var dao = daos.First(a => (a as TransactionBlock).AccountID == odr.Order.daoId);
                                            <UserLibrary.Components.OTC.OrderDisplay Otc=@odr Dao=@dao OrderSelected=@ShowCreateTradeUI />
                                    }
                                </div>
                            </MudTabPanel>
                            
                        }
                    </MudTabs>
                }
        </MudTabPanel>
        <MudTabPanel Text="Sell">
            <div class="cet mag">
                <UserLibrary.Components.OTC.CreateNewOrder />
            </div>
        </MudTabPanel>
        <MudTabPanel Text="My">
            <MudTabs Centered>
                <MudTabPanel Text="Orders">
                        @if (walletState.Value.wallet == null)
                        {
                            <a href="/wallet">Open wallet to view orders.</a>
                        }
                        else
                        {
                            <UserLibrary.Components.OTC.OrdersList />
                        }
                </MudTabPanel>
                <MudTabPanel Text="Trades">
                        @if (walletState.Value.wallet == null)
                        {
                            <a href="/wallet">Open wallet to view trades.</a>
                        }
                        else
                        {
                            <UserLibrary.Components.OTC.TransactionsList />
                        }
                </MudTabPanel>
            </MudTabs>
        </MudTabPanel>
    </MudTabs>


@code {
    [Parameter]
    public string action { get; set; }

    [Inject]
    private IState<WebWalletState> walletState { get; set; }

    [Inject]
    private IDispatcher Dispatcher { get; set; }

    [Inject]
    IConfiguration Configuration { get; set; }

    [Inject] ISnackbar Snackbar { get; set; }
    [Inject] NavigationManager Navigation { get; set; }
    [Inject] ILyraAPI lyraApi { get; set; }

    List<string> tradableCryptos;
    List<IOtcOrder> tradableOrders;
    List<IDao> alldaos = new List<IDao>();
    List<IDao> daos = new List<IDao>();

    int activeIndex = 0;

    string name, desc;
    int sellerPar, buyerPar;    

    Dictionary<string, decimal> MarketPrices;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (action == "new")
        {
            activeIndex = 1;
            StateHasChanged();
        }

        if (firstRender)
        {
            SubscribeToAction<ContractChangeEvent>(async cce =>
            {
                await RefreshOrders();
                await InvokeAsync(() => StateHasChanged());
            });

            if (walletState.Value.wallet == null)
            {
                Dispatcher.Dispatch(new WebWalletChangeTitleAction
                    {
                        title = "Lyra P2P Trade Market",
                        menunew = false,
                    });
            }
            else
            {
                Dispatcher.Dispatch(new WebWalletChangeTitleAction
                    {
                        title = "Lyra P2P Trade Market",
                        menunew = action != "new"
                    });
            }

            await RefreshOrders();
            StateHasChanged();
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task ShowCreateTradeUI(IOtcOrder order)
    {
        if (walletState.Value.wallet == null)
        {
            Navigation.NavigateTo("/wallet");
            return;
        }
        //check if user has been registed on dealer server
        var client = new DealerClient(Configuration["network"]);
        var user = await client.GetUserByAccountIdAsync(walletState.Value.wallet.AccountId);
        if (!user.Successful())
        {
            // register user
            Navigation.NavigateTo("/dealer/register");
        }
        else
        {
            Navigation.NavigateTo($"/dealer/trade/{(order as TransactionBlock).AccountID}");
        }
    }

    private async Task RefreshOrders()
    {
        try
        {
            // get tradable orders
            var tosret = await lyraApi.FindTradableOtcAsync();
            if (tosret.Successful())
            {
                var allblks = tosret.GetBlocks("orders");
                tradableOrders = allblks.Cast<IOtcOrder>()
                    .Where(a => a.Order.amount > 0)
                    .OrderBy(a => a.Order.price)
                    .ToList();
                tradableCryptos = tradableOrders.Select(a => a.Order.crypto)
                    .Distinct()
                    .ToList();

                daos = tosret.GetBlocks("daos").Cast<IDao>().ToList();
            }
        }
        catch(Exception e)
        {
            Snackbar.Add($"Failed to refresh orders: {e}", Severity.Error);
        }
    }
}
