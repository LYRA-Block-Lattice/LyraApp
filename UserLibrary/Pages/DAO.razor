@page "/dao"
@page "/dao/{action}"

@using Fluxor
@using Fluxor.Blazor.Web.Components
@using Lyra.Data.Crypto
@using Nebula.Store.WebWalletUseCase
@using Microsoft.Extensions.Configuration
@using Lyra.Data.API.WorkFlow
@using UserLibrary.Data
@inherits FluxorComponent

<div class="mag cet">
    <MudTabs Elevation="2" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-6">
        <MudTabPanel Text="OTC Market">

            <MudGrid>
                            @foreach (var odr in tradableOrders)
                            {
                                var dao = daos.First(a => (a as TransactionBlock).AccountID == odr.Order.daoId);
                                <MudItem xs="12">
                                    <UserLibrary.Components.OTC.OrderDisplay Otc=@odr Dao=@dao OrderSelected=@ShowCreateTradeUI />
                                </MudItem>
                            }


            </MudGrid>
        </MudTabPanel>
        <MudTabPanel Text="DAO">

            <MudGrid>
                <MudItem xs="12">
                    <MudTextField @bind-Value="@keywords" Label="Search DAO" Variant="Variant.Text"></MudTextField>
                </MudItem>
                @if (action == "new")
                {
                    <MudItem xs="12">
                        <h1>Create Orgnization</h1>
                    </MudItem>
                    <MudItem xs="12">
                        <RadzenTextBox @bind-Value=@name Placeholder="Name" Class="w-100" />
                    </MudItem>
                    <MudItem xs="12">
                        <RadzenTextArea @bind-Value=@desc Placeholder="Orgnization description..." Class="w-100" />
                    </MudItem>
                    <MudItem xs="12">
                        <RadzenButton IsBusy=@busy Click=@(args => OnClick("adddao")) Text="Add New" Icon="add_circle_outline" ButtonStyle="ButtonStyle.Primary" />
                    </MudItem>
                    <MudItem xs="12">
                        <RadzenButton Click=@(args => Back("")) Text="Back" ButtonStyle="ButtonStyle.Light" />
                    </MudItem>
                }
                else
                {

                    @if (showco)
                        {
                            <MudItem xs="12">
                                <h1>Sell</h1>
@*                                <RadzenSelectBar @bind-Value=@dir TValue="bool">
                                    <Items>
                                        <RadzenSelectBarItem Text="Buy" Value="true" />
                                        <RadzenSelectBarItem Text="Sell" Value="false" />
                                    </Items>
                                </RadzenSelectBar>*@
                            </MudItem>
                            <MudItem xs="12">
                                Orgnization<br />
                                <RadzenDropDown AllowClear="false" TValue="String" Class="w-100"
                                    @bind-Value=@seldaoname
                                    Data=@(mydaos.Select(a => (a as IBrokerAccount).Name)) />
                            </MudItem>
                            <MudItem xs="12">
                                Token To Sell<br />
                                <RadzenDropDown AllowClear="false" TValue="Ticker" Class="w-100"
                                    @bind-Value=@selcrypto
                                    Data=@tickers />
                            </MudItem>
                            <MudItem xs="12">
                                Fiat currency<br />
                                <RadzenDropDown AllowClear="false" TValue="string" Class="w-100"
                                    @bind-Value=@selfiat
                                    Data=@fiats />
                            </MudItem>
                            <MudItem xs="12">
                                Order Type<br />
                                <RadzenDropDown AllowClear="false" TValue="string" Class="w-100"
                                    @bind-Value=@selodrtyp
                                    Data=@odrtyps />
                            </MudItem>
                            <MudItem xs="12">
                                Sell price<br />
                                <RadzenNumeric TValue="decimal" Class="w-100" @bind-Value=@selprice Change="@CalCollat" /><br />
                                Market Price: @selcryptoprice USD
                            </MudItem>
                            <MudItem xs="12">
                                Quantity<br />
                                <RadzenNumeric TValue="decimal" Class="w-100" @bind-Value=@selqty Change="@CalCollat" />
                            </MudItem>
                            <MudItem xs="12">
                                Min Payment<br />
                                <RadzenNumeric TValue="decimal" Class="w-100" @bind-Value=@paymin Change="@CalCollat" />
                            </MudItem>
                            <MudItem xs="12">
                                Max Payment<br />
                                <RadzenNumeric TValue="decimal" Class="w-100" @bind-Value=@paymax Change="@CalCollat" />
                            </MudItem>
                            <MudItem xs="12">
                                Collateral<br />
                                <RadzenNumeric TValue="decimal" Class="w-100" @bind-Value=@cltlyr Change="@CalCollat" /> <br />
                                Worth: @coltworth USD<br />
                                Ratio: @coltrito
                            </MudItem>
                            <MudItem xs="12">
                                Accepted Payment Methods<br />
                                <RadzenCheckBoxList @bind-Value=@paymths TValue="string" Orientation="Radzen.Orientation.Vertical"
                                        Data="@paymentMethods" />
                            </MudItem>
                            <MudItem xs="12">
                                <MudDivider />
                                Total: @total USD
                            </MudItem>
                            <MudItem xs="12">
                                <RadzenButton IsBusy=@busy Click=@(async args => await CreateOrder("adddao")) Text="Add New Order" Icon="add_circle_outline" ButtonStyle="ButtonStyle.Primary" />
                            </MudItem>
                            <MudItem xs="12">
                                <RadzenButton Click=@(args => Back2("")) Text="Back" ButtonStyle="ButtonStyle.Light" />
                        </MudItem>

                    }
                    else
                    {
                        if(alldaos != null)
                        foreach (var dao in alldaos)
                        {
                            <MudItem xs="12">
                                <MudExpansionPanel Text="@dao.Name" MaxHeight="1000">
                                    <p>
                                        @dao.Description
                                    </p>
                                    <MudDivider DividerType="DividerType.Middle" Class="my-6" />
                                    <MudButton Variant="Variant.Filled" Color="Color.Secondary">Details</MudButton>
                                    @if(walletState.Value.IsOpening)
                                        {
                                        <MudButton Variant="Variant.Filled" Color="Color.Primary">Join</MudButton>
                                    <RadzenButton Click=@(args => ShowCreateOrderUI((dao as IBrokerAccount).Name)) Text="Create Order" ButtonStyle="ButtonStyle.Primary" />
                                        
                                        }

                                </MudExpansionPanel>
                             </MudItem>
                         }
                    }
                }
            </MudGrid>
        </MudTabPanel>
        <MudTabPanel Text="My Trades">
            <MudGrid>
                <MudItem xs="12">
                    <h1>My Orgnizations</h1>
                </MudItem>
                <MudItem xs="12">
                    <MudExpansionPanels MultiExpansion="true" Class=".blue .darken-1 .shades-text .text-white">
                        @if (mydaos != null)
                        {
                            foreach (var dao in mydaos)
                            {
                                <MudExpansionPanel Text="@dao.Name" MaxHeight="1000">
                                    <p>
                                        @dao.Description
                                    </p>
                                    <MudDivider DividerType="DividerType.Middle" Class="my-6" />
                                    <MudButton Variant="Variant.Filled" Color="Color.Secondary">Details</MudButton>
                                    <MudButton Variant="Variant.Filled" Color="Color.Primary">Join</MudButton>
                                    <RadzenButton Click=@(args => ShowCreateOrderUI((dao as IBrokerAccount).Name)) Text="Create Order" ButtonStyle="ButtonStyle.Primary" />

                                </MudExpansionPanel>
                            }
                        }


                    </MudExpansionPanels>
                </MudItem>

                <MudItem xs="12">
                    <UserLibrary.Components.OTC.TransactionsList />
                </MudItem>

                    @if (mydaos != null)
                    {



                    @*            <MudItem xs="12">
                        <MudExpansionPanels Class=".blue .darken-1 .shades-text .text-white">
                        <MudExpansionPanel Text="The Lyra Council" MaxHeight="1000">
                        <p>
                        Formed by all (Total 19) Lyra node owners, The Lyra Council
                        is the final arbitration institution for almost all fairs of
                        the whole Lyra network. Decisions are made by voting of members.
                        </p>
                        <MudDivider DividerType="DividerType.Middle" Class="my-6" />
                        <MudButton Variant="Variant.Filled" Color="Color.Secondary">Details</MudButton>
                        <MudButton Variant="Variant.Filled" Color="Color.Primary">Join</MudButton>
                        </MudExpansionPanel>
                        <MudExpansionPanel Text="OTC Exchange" MaxHeight="500">
                        <p>
                        Trade Token/Fiat without a broker.
                        </p>
                        <MudDivider DividerType="DividerType.Middle" Class="my-6" />
                        <MudButton Variant="Variant.Filled" Color="Color.Secondary">Details</MudButton>
                        <MudButton Variant="Variant.Filled" Color="Color.Primary">Sell</MudButton>
                        <MudButton Variant="Variant.Filled" Color="Color.Primary">Buy</MudButton>
                        </MudExpansionPanel>
                        <MudExpansionPanel Text="Simple Buy & Sell" MaxHeight="1000">
                        <p>
                        A simple buy/sell business model.
                        </p>
                        <MudDivider DividerType="DividerType.Middle" Class="my-6" />
                        <MudButton Variant="Variant.Filled" Color="Color.Secondary">Details</MudButton>
                        <MudButton Variant="Variant.Filled" Color="Color.Primary">Sell</MudButton>
                        <MudButton Variant="Variant.Filled" Color="Color.Primary">Buy</MudButton>
                        </MudExpansionPanel>
                        </MudExpansionPanels>
                        </MudItem>*@
                }
            </MudGrid>
        </MudTabPanel>
    </MudTabs>

</div>


@code {
    [Parameter]
    public string action { get; set; }

    [Inject]
    private IState<WebWalletState> walletState { get; set; }

    [Inject]
    private IDispatcher Dispatcher { get; set; }

    [Inject]
    IConfiguration Configuration { get; set; }

    [Inject] ISnackbar Snackbar { get; set; }
    [Inject] NavigationManager Navigation { get; set; }

    List<IOtcOrder> tradableOrders = new List<IOtcOrder>();
    List<IDao> alldaos = new List<IDao>();
    List<IDao> daos = new List<IDao>();

    string keywords;

    string name, desc;
    bool busy;

    List<IDao> mydaos;
    bool showco, dir;
    string total;
    List<Ticker> tickers;
    List<string> fiats = new List<string>
    {
        "USD", "EUR", "JPY", "CNY", "CHF"
    };
    List<string> odrtyps = new List<string>
    {
        "Fixed price", "Floating price"
    };
    List<string> paymentMethods = new List<string>
    {
        "Paypal", "Bank Transfer", "Alipay", "Wechat Pay"
    };

    IEnumerable<string> paymths = new string[0];

    Ticker selcrypto;
    string seldaoname, selfiat = "USD", selodrtyp = "Fixed price";
    decimal selprice, selqty, cltlyr, paymin, paymax;
    decimal selcryptoprice;

    decimal trxprice, lyrprice, btcprice, lyrintprice;
    decimal coltworth;
    string coltrito;

    protected override Task OnInitializedAsync()
    {
        SubscribeToAction<RespQuote>(
            (e) =>
            {
            // price updated
            btcprice = e.Prices["bitcoin"];
                trxprice = e.Prices["tron"];
                lyrprice = e.Prices["lyra"];
                lyrintprice = e.Prices["LYR"];

                if (selcrypto != null)
                {
                    if (selcrypto.Name.EndsWith("ETH")) selcryptoprice = e.Prices["ethereum"];
                    if (selcrypto.Name.EndsWith("BTC")) selcryptoprice = e.Prices["bitcoin"];
                    if (selcrypto.Name.EndsWith("USDT")) selcryptoprice = e.Prices["tether"];
                }
            }
        );

        SubscribeToAction<NotifyContainer>(async evtc =>
            {
                var evt = evtc.Get();

                if (evt is ContractChangeEvent cce)
                {
                    await GetMyDaos();
                    await OpenSwapUI();
                    await InvokeAsync(() => StateHasChanged());
                }
            });

        return base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (walletState.Value.wallet == null)
            {
                Dispatcher.Dispatch(new WebWalletChangeTitleAction
                    {
                        title = "Lyra DAO Central",
                        menunew = false,
                    });
            }
            else
            {
                Dispatcher.Dispatch(new WebWalletChangeTitleAction
                    {
                        title = "Lyra DAO Central",
                        menunew = action != "new"
                    });
            }

            await GetMyDaos();
            await OpenSwapUI();
            StateHasChanged();
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    private void CalCollat(decimal d)
    {
        total = $"{(selprice * selqty):N2}";
        coltworth = cltlyr * lyrprice;
        if (coltworth > 0 && selprice * selqty > 0)
            coltrito = $"{coltworth / (selprice * selqty):N2}";
        else
            coltrito = "";
    }

    private async Task ShowCreateTradeUI(IOtcOrder order)
    {
        if (walletState.Value.wallet == null)
        {
            Navigation.NavigateTo("/wallet");
            return;
        }
        //check if user has been registed on dealer server
        var client = new DealerClient(Configuration["network"]);
        var user = await client.GetUserByAccountIdAsync(walletState.Value.wallet.AccountId);
        if (!user.Successful())
        {
            // register user
            Navigation.NavigateTo("/dealer/register");
        }
        else
        {
            Navigation.NavigateTo($"/dealer/trade/{(order as TransactionBlock).AccountID}");
        }
    }

    async Task ShowCreateOrderUI(string name)
    {
        //check if user has been registed on dealer server
        var client = new DealerClient(Configuration["network"]);
        var user = await client.GetUserByAccountIdAsync(walletState.Value.wallet.AccountId);
        if (user == null)
        {
            // register user
            Navigation.NavigateTo("/dealer/register");
        }
        else
        {
            showco = !showco;
            seldaoname = name;
        }
    }

    async Task CreateOrder(string daoname)
    {
        busy = true;
        Snackbar.Add("Creating Order...", Severity.Info);

        try
        {
            var daoret3 = await walletState.Value.wallet.RPC.GetDaoByNameAsync(seldaoname);
            var daot = daoret3.GetBlock() as TransactionBlock;

            var order = new OTCOrder
                {
                    daoId = daot.AccountID,
                    dir = TradeDirection.Sell,
                    crypto = selcrypto.dbname,
                    fiat = selfiat,
                    priceType = PriceType.Fixed,
                    price = selprice,
                    amount = selqty,
                    collateral = cltlyr,
                    limitMin = paymin,
                    limitMax = paymax,
                    payBy = paymths.ToArray(),
                };
            var ret = await walletState.Value.wallet.CreateOTCOrderAsync(order);
            if (ret.Successful())
            {
                Snackbar.Add("Order created.", Severity.Success);
            }
            else
            {
                Snackbar.Add($"Order failed to create: {ret.ResultCode}", Severity.Error);
            }
        }
        catch (Exception e)
        {
            Snackbar.Add($"Order failed to create: {e}", Severity.Error);
        }

        busy = false;
    }

    async Task GetMyDaos()
    {
        var lc = LyraRestClient.Create(Configuration["network"], Environment.OSVersion.ToString(), "Nebula", "1.4");
        var alldaoret = await lc.GetAllDaosAsync(0, 10);
        if(alldaoret.Successful())
        {
            alldaos = alldaoret.GetBlocks().Cast<IDao>().ToList();
        }

        if (walletState.Value.wallet == null)
            return;
        var brkblksret = await walletState.Value.wallet.RPC.GetAllBrokerAccountsForOwnerAsync(walletState.Value.wallet.AccountId);
        mydaos = brkblksret.GetBlocks().Where(a => a is DaoGenesisBlock).Cast<IDao>().ToList();
    }

    async Task OnClick(string buttonName)
    {
        busy = true;

        Snackbar.Add("Creating orgnization...", Severity.Info);

        try
        {
            var lc = LyraRestClient.Create(Configuration["network"], Environment.OSVersion.ToString(), "Nebula", "1.4");
            var dcret = await walletState.Value.wallet.CreateDAOAsync(name, desc);
            if (dcret.Successful())
            {
                Snackbar.Add($"Orgnization {name} created successfully.", Severity.Success);
                await GetMyDaos();
            }
            else
            {
                Snackbar.Add($"Failed to create orgnization: {dcret.ResultCode}", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Failed to create orgnization: {ex.Message}", Severity.Error);
        }

        busy = false;

    }

    async Task Back(string buttonName)
    {
        Navigation.NavigateTo("/dao");
    }

    async Task Back2(string buttonName)
    {
        showco = !showco;
        Navigation.NavigateTo("/dao");
    }

    private async Task OpenSwapUI()
    {
        var lc = LyraRestClient.Create(Configuration["network"], Environment.OSVersion.ToString(), "Nebula", "1.4");

        // get tradable orders
        var tosret = await lc.FindTradableOtcAsync();
        if (tosret.Successful())
        {
            tradableOrders = tosret.GetBlocks("orders").Cast<IOtcOrder>()
                .Where(a => a.Order.amount > 0)
                .OrderBy(a => a.Order.price)
                .ToList();
            daos = tosret.GetBlocks("daos").Cast<IDao>().ToList();
        }

        // get sellable tokens
        // for api sign only
        var pk = "n4uh7o2kAerPZQSNBRirzA3pSUBEuEhs6r7oRwpV6Dgbs3FvY";
        var pub = "LBRzScs8NwMcr7U8i9a8sSWETseWf3TLge4CVJy6as24hSB4hwtZ5jKTbHJdoVZBJiNC2LpjN9MQB719Py9YxXo2xpLxnS";

        var lsbret = await lc.GetLastServiceBlockAsync();

        var sign = Signatures.GetSignature(pk, (lsbret.GetBlock() as ServiceBlock).Hash, pub);
        var tokens = await lc.GetTokenNamesAsync(pub, sign, "(null)");

        tickers = tokens.Entities
            .Where(a => !a.StartsWith("unittest/"))
            .Select(a => new Ticker
                {
                    dbname = a,
                    Name = a.Replace("tether/", "$")
                })
            .OrderBy(a => a.Name)
            .ToList();
        //tickers.Insert(0, new Ticker { dbname = "LYR", Name = "LYR" });
    }
}
