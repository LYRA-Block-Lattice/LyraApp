@page "/dao"
@page "/dao/{action}"

@using Fluxor
@using Lyra.Data.Crypto
@using Nebula.Store.WebWalletUseCase
@using Microsoft.Extensions.Configuration
@using Lyra.Data.API.WorkFlow
@using UserLibrary.Data

<div class="mag cet">
    <MudGrid>
            <MudItem xs="12">
                <MudTextField @bind-Value="@keywords" Label="Search DAO" Variant="Variant.Text"></MudTextField>
            </MudItem>
        @if (action == "new")
        {
            <MudItem xs="12">
                <h1>Create Orgnization</h1>
            </MudItem>
            <MudItem xs="12">
                <RadzenTextBox @bind-Value=@name Placeholder="Name" Class="w-100" />
            </MudItem>
            <MudItem xs="12">
                <RadzenTextArea @bind-Value=@desc Placeholder="Orgnization description..." Class="w-100" />
            </MudItem>
            <MudItem xs="12">
                <RadzenButton IsBusy=@busy Click=@(args => OnClick("adddao")) Text="Add New" Icon="add_circle_outline" ButtonStyle="ButtonStyle.Primary" />
            </MudItem>
            <MudItem xs="12">
                <RadzenButton Click=@(args => Back("")) Text="Back" ButtonStyle="ButtonStyle.Light" />
            </MudItem>
        }
        else
        {
            @if (mydaos != null)
            {
                @if (!showco)
                {
                    <MudItem xs="12">
                        <h1>My Orgnizations</h1>
                    </MudItem>
                    <MudExpansionPanels MultiExpansion="true" Class=".blue .darken-1 .shades-text .text-white">
                        @foreach (var dao in mydaos)
                        {
                            <MudExpansionPanel Text="@dao.Name" MaxHeight="1000">
                                <p>
                                    @dao.Description
                                </p>
                                <MudDivider DividerType="DividerType.Middle" Class="my-6" />
                                <MudButton Variant="Variant.Filled" Color="Color.Secondary">Details</MudButton>
                                <MudButton Variant="Variant.Filled" Color="Color.Primary">Join</MudButton>
                                <RadzenButton Click=@(args => ShowCreateOrderUI((dao as IBrokerAccount).Name)) Text="Create Order" ButtonStyle="ButtonStyle.Primary" />

                            </MudExpansionPanel>
                        }

                    </MudExpansionPanels>



                }
                @if (showco)
                {
                    <MudItem xs="12">
                        <RadzenSelectBar @bind-Value=@dir TValue="bool">
                            <Items>
                                <RadzenSelectBarItem Text="Buy" Value="true" />
                                <RadzenSelectBarItem Text="Sell" Value="false" />
                            </Items>
                        </RadzenSelectBar>
                    </MudItem>
                    <MudItem xs="12">
                        Orgnization<br />
                        <RadzenDropDown AllowClear="false" TValue="String" Class="w-100"
                            @bind-Value=@seldaoname
                            Data=@(mydaos.Select(a => (a as IBrokerAccount).Name)) />
                    </MudItem>
                    <MudItem xs="12">
                        Token To Sell<br />
                        <RadzenDropDown AllowClear="false" TValue="Ticker" Class="w-100"
                            @bind-Value=@selcrypto
                            Data=@tickers />
                    </MudItem>
                    <MudItem xs="12">
                        Fiat currency<br />
                        <RadzenDropDown AllowClear="false" TValue="string" Class="w-100"
                            @bind-Value=@selfiat
                            Data=@fiats />
                    </MudItem>
                    <MudItem xs="12">
                        Order Type<br />
                        <RadzenDropDown AllowClear="false" TValue="string" Class="w-100"
                            @bind-Value=@selodrtyp
                            Data=@odrtyps />
                    </MudItem>
                    <MudItem xs="12">
                        Sell price<br />
                        <RadzenNumeric TValue="decimal" Class="w-100" @bind-Value=@selprice Change=@(args => total=$"{selqty*selprice:N2}") />
                    </MudItem>
                    <MudItem xs="12">
                        Quantity<br />
                        <RadzenNumeric TValue="decimal" Class="w-100" @bind-Value=@selqty Change=@(args => total=$"{selqty*selprice:N2}") />
                    </MudItem>
                    <MudItem xs="12">
                        Collateral<br />
                        <RadzenNumeric TValue="decimal" Class="w-100" @bind-Value=@cltlyr />
                    </MudItem>
                    <MudItem xs="12">
                        Total: @total
                    </MudItem>
                    <MudItem xs="12">
                        <RadzenButton IsBusy=@busy Click=@(async args => await CreateOrder("adddao")) Text="Add New Order" Icon="add_circle_outline" ButtonStyle="ButtonStyle.Primary" />
                    </MudItem>
                    <MudItem xs="12">
                        <RadzenButton Click=@(args => Back2("")) Text="Back" ButtonStyle="ButtonStyle.Light" />
                    </MudItem>

                }
            }


@*            <MudItem xs="12">
                <MudExpansionPanels Class=".blue .darken-1 .shades-text .text-white">
                    <MudExpansionPanel Text="The Lyra Council" MaxHeight="1000">
                        <p>
                            Formed by all (Total 19) Lyra node owners, The Lyra Council
                            is the final arbitration institution for almost all fairs of
                            the whole Lyra network. Decisions are made by voting of members.
                        </p>
                        <MudDivider DividerType="DividerType.Middle" Class="my-6" />
                        <MudButton Variant="Variant.Filled" Color="Color.Secondary">Details</MudButton>
                        <MudButton Variant="Variant.Filled" Color="Color.Primary">Join</MudButton>
                    </MudExpansionPanel>
                    <MudExpansionPanel Text="OTC Exchange" MaxHeight="500">
                        <p>
                            Trade Token/Fiat without a broker.
                        </p>
                        <MudDivider DividerType="DividerType.Middle" Class="my-6" />
                        <MudButton Variant="Variant.Filled" Color="Color.Secondary">Details</MudButton>
                        <MudButton Variant="Variant.Filled" Color="Color.Primary">Sell</MudButton>
                        <MudButton Variant="Variant.Filled" Color="Color.Primary">Buy</MudButton>
                    </MudExpansionPanel>
                    <MudExpansionPanel Text="Simple Buy & Sell" MaxHeight="1000">
                        <p>
                            A simple buy/sell business model.
                        </p>
                        <MudDivider DividerType="DividerType.Middle" Class="my-6" />
                        <MudButton Variant="Variant.Filled" Color="Color.Secondary">Details</MudButton>
                        <MudButton Variant="Variant.Filled" Color="Color.Primary">Sell</MudButton>
                        <MudButton Variant="Variant.Filled" Color="Color.Primary">Buy</MudButton>
                    </MudExpansionPanel>
                </MudExpansionPanels>
            </MudItem>*@
        }


    </MudGrid>

</div>


@code {
    [Parameter]
    public string action { get; set; }

    [Inject]
    private IState<WebWalletState> walletState { get; set; }

    [Inject]
    private IDispatcher Dispatcher { get; set; }

    [Inject]
    IConfiguration Configuration { get; set; }

    [Inject] ISnackbar Snackbar { get; set; }
    [Inject] NavigationManager Navigation { get; set; }

    string keywords;

    string name, desc;
    bool busy;

    List<IDao> mydaos;
    bool showco, dir;
    string total;
    List<Ticker> tickers;
    List<string> fiats = new List<string>
    {
        "USD", "EUR", "JPY", "CNY", "CHF"
    };
    List<string> odrtyps = new List<string>
    {
        "Fixed price", "Floating price"
    };

    Ticker selcrypto;
    string seldaoname, selfiat, selodrtyp;
    decimal selprice, selqty, cltlyr;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await GetMyDaos();
            await OpenSwapUI();
            StateHasChanged();
        }

        if (walletState.Value.wallet != null)
        {
            Dispatcher.Dispatch(new WebWalletChangeTitleAction
                {
                    title = "Lyra DAO Central",
                    menunew = action != "new"
                });
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    void ShowCreateOrderUI(string name)
    {
        showco = !showco;
        seldaoname = name;
    }

    async Task CreateOrder(string daoname)
    {
        busy = true;
        Snackbar.Add("Creating Order...", Severity.Info);

        try
        {
            var daoret3 = await walletState.Value.wallet.RPC.GetDaoByNameAsync(seldaoname);
            var daot = daoret3.GetBlock() as TransactionBlock;

            var order = new OTCCryptoOrder
                {
                    daoid = daot.AccountID,
                    dir = TradeDirection.Sell,
                    crypto = selcrypto.dbname,
                    fiat = selfiat,
                    priceType = PriceType.Fixed,
                    price = selprice,
                    amount = selqty,
                    collateral = cltlyr,
                };
            var ret = await walletState.Value.wallet.CreateOTCOrderAsync(order);
            if (ret.Successful())
            {
                Snackbar.Add("Order created.", Severity.Success);
            }
            else
            {
                Snackbar.Add($"Order failed to create: {ret.ResultCode}", Severity.Error);
            }
        }
        catch (Exception e)
        {
            Snackbar.Add($"Order failed to create: {e}", Severity.Error);
        }

        busy = false;
    }

    async Task GetMyDaos()
    {
        if (walletState.Value.wallet == null)
            return;
        var brkblksret = await walletState.Value.wallet.RPC.GetAllBrokerAccountsForOwnerAsync(walletState.Value.wallet.AccountId);
        mydaos = brkblksret.GetBlocks().Where(a => a is DaoGenesisBlock).Cast<IDao>().ToList();
    }

    async Task OnClick(string buttonName)
    {
        busy = true;

        Snackbar.Add("Creating orgnization...", Severity.Info);

        try
        {
            var lc = LyraRestClient.Create(Configuration["network"], Environment.OSVersion.ToString(), "Nebula", "1.4");
            var dcret = await walletState.Value.wallet.CreateDAOAsync(name, desc);
            if (dcret.Successful())
            {
                Snackbar.Add($"Orgnization {name} created successfully.", Severity.Success);
                await GetMyDaos();
            }
            else
            {
                Snackbar.Add($"Failed to create orgnization: {dcret.ResultCode}", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Failed to create orgnization: {ex.Message}", Severity.Error);
        }

        busy = false;

    }

    async Task Back(string buttonName)
    {
        Navigation.NavigateTo("/dao");
    }

    async Task Back2(string buttonName)
    {
        showco = !showco;
        Navigation.NavigateTo("/dao");
    }

    private async Task OpenSwapUI()
    {
        var lc = LyraRestClient.Create(Configuration["network"], Environment.OSVersion.ToString(), "Nebula", "1.4");

        // for api sign only
        var pk = "n4uh7o2kAerPZQSNBRirzA3pSUBEuEhs6r7oRwpV6Dgbs3FvY";
        var pub = "LBRzScs8NwMcr7U8i9a8sSWETseWf3TLge4CVJy6as24hSB4hwtZ5jKTbHJdoVZBJiNC2LpjN9MQB719Py9YxXo2xpLxnS";

        var lsbret = await lc.GetLastServiceBlockAsync();

        var sign = Signatures.GetSignature(pk, (lsbret.GetBlock() as ServiceBlock).Hash, pub);
        var tokens = await lc.GetTokenNamesAsync(pub, sign, "(null)");

        tickers = tokens.Entities
            .Where(a => !a.StartsWith("unittest/"))
            .Select(a => new Ticker
                {
                    dbname = a,
                    Name = a.Replace("tether/", "$")
                })
            .OrderBy(a => a.Name)
            .ToList();
        tickers.Insert(0, new Ticker { dbname = "LYR", Name = "LYR" });
    }
}
