@page "/nft"
@using Fluxor
@using Lyra.Data.Crypto
@using Microsoft.Extensions.Configuration
@using Nebula.Store.WebWalletUseCase
@using Newtonsoft.Json.Linq
@using OpenSeaClient
@inject NavigationManager Navigation
@inject IDialogService DialogService

@if (string.IsNullOrWhiteSpace(apiKey))
{
	<div class="mag">
		<pre>
			Mint NFT howto:

			goto <a href="https://nft.storage/">https://nft.storage/</a> to create an account;
			in NFT Storage site create api key <a href="https://nft.storage/manage/">https://nft.storage/manage/</a>;
			goto Lyra App -> Settings, input your NFT Storage API key and save.
			goto Lyra App -> NFT -> Mint to mint your NFT.
			goto Lyra App -> Wallet to show your NFT.
				</pre>
	</div>
}
else if (walletState.Value.wallet == null)
{
	<div class="mag">
		<a href="/wallet"><MudButton Variant="MudBlazor.Variant.Filled" Color="Color.Primary">Open Wallet</MudButton></a>
	</div>
}
	else
	{
		<MudTabs Elevation="4" Rounded="true" Centered="true" Color="Color.Secondary">
@*			<MudTabPanel Text=@localizer["My NFT"]>
				<div class="mag">
					<h3>list my nft here</h3>
				</div>
			</MudTabPanel>*@

			<MudTabPanel Text=@localizer["Mint a NFT"]>
				<div class="mag">
					<div>
						<InputFile id="fileInput112" OnChange="UploadFiles" hidden multiple accept=".jpg, .jpeg, .png" />

						<MudButton HtmlTag="label"
							   Variant="MudBlazor.Variant.Filled"
							   StartIcon="@Icons.Filled.Image"
							   for="fileInput112">
							Upload image
						</MudButton>
					</div>

					<table class="table">
						<thead>
							<tr>
								<th>@localizer["Date"]</th>
							@*<th>@localizer["CID"]</th>*@
							<th>@localizer["Size"]</th>
							<th>@localizer["Preview"]</th>
							<th></th>
							</tr>
						</thead>
						<tbody>
							@foreach(var file in nsfiles ?? Enumerable.Empty<NFTStorageNFTObject>())
							{
							var url = $"https://{file.cid}.ipfs.nftstorage.link/";
								<tr>
									<td>@file.created</td>
									@*<td>@file.cid</td>*@
								<td>@file.size</td>
								<td>
									<img class="simg" src="@url" />
								</td>
								<td>
									<MudButton Variant="MudBlazor.Variant.Filled" Color="Color.Primary" OnClick="@(async () => await OpenMintNew(file.cid, url))">
										@localizer["Mint as NFT"]
									</MudButton>
								</td>
								</tr>
							}
						</tbody>
					</table>
				</div>
			</MudTabPanel>
		</MudTabs>
	}


@code {
	[Inject] IState<WebWalletState> walletState { get; set; }
	[Inject] ILocalStorageService localStorage { get; set; }
	[Inject] IStringLocalizer<Settings> localizer { get; set; }

	[Inject] IConfiguration Configuration { get; set; }
	[Inject] IDispatcher Dispatcher { get; set; }
	[Inject] ISnackbar Snackbar { get; set; }
	[Inject] ILyraAPI lyraApi { get; set; }

	List<Asset> assetsList = new List<Asset>();
	string keyName = "nftstorageapikey";
	string? apiKey;

	NFTStorageNFTObject[]? nsfiles;

	NFTStorageClient nftclient;

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			try
			{
				apiKey = await localStorage.GetItemAsync<string>(keyName);

				if(!string.IsNullOrWhiteSpace(apiKey))
				{
					nftclient = new NFTStorageClient();
					nftclient.SetApiToken(apiKey);

					await LoadIpfs();
				}
			}
			catch(Exception ex)
			{
				Snackbar.Add($"Unable to LoadIpfs: {ex.Message}", Severity.Error);
			}
			StateHasChanged();
		}

		await base.OnAfterRenderAsync(firstRender);
	}

	private async Task UploadFiles(InputFileChangeEventArgs e)
	{
		var entries = e.GetMultipleFiles();
		foreach (var f in entries)
		{
			// upload file
			using var s = f.OpenReadStream(maxAllowedSize: 50000000);
			using var ms = new MemoryStream();

			await s.CopyToAsync(ms);

			var bytes = ms.ToArray();
			ms.Close();			
			s.Close();

			var upret = await nftclient.UploadDataFromBufferHttpClient(bytes);
			if(upret.ok)
			{
				Snackbar.Add($"File {f.Name} uploaded OK.", Severity.Success);
			}
			else
			{
				Snackbar.Add($"File {f.Name} failed to upload: {upret.error}", Severity.Success);
			}
		}

		await LoadIpfs();
		StateHasChanged();
		await Task.Delay(1);
	}

	public async Task OpenMintNew(string ipfscid, string imgurl)
	{
		var args = new NFTMintNewDialogArgs
		{
			name = "My cool NFT",
			desc = "Describe my NFT here"
		};
		var parameters = new DialogParameters { 
			["imgurl"] = imgurl,
			["args"] = args
		};

		var dialog = DialogService.Show<Components.NFT.MintNewNFTDialog>($"Mint a new NFT", parameters);
		var result = await dialog.Result;

		if (!result.Cancelled)
		{
			//Snackbar.Add($"Your will mint NFT name: {args.name} and desc: {args.desc}", Severity.Success);
			await Mint(args.name, args.desc, ipfscid);
		}
    }

	// meta: one nft one meta
	// NFT genesis: one genesis multiple nft/meta
	// let's begin with the simplest.
	async Task Mint(string name, string desc, string ipfscid)
	{
		var lsb = await lyraApi.GetLastServiceBlockAsync();
		var acac = new AcademyClient(Configuration["network"]);
		var wallet = walletState.Value.wallet;
		var input = $"{wallet.AccountId}:{lsb.GetBlock().Hash}:{ipfscid}";
		var signatures = Signatures.GetSignature(wallet.PrivateKey, input, wallet.AccountId);
		var ret = await acac.CreateMetaAsync(wallet.AccountId, signatures,
			name, desc, ipfscid);
		dynamic qs = JObject.Parse(ret);
		if(qs.ok == "true")
		{
			Snackbar.Add($"Metadata created.", Severity.Success);

			var url = qs.value.ToString();

			// then we can submit a NFT genesis block.
			var crret = await wallet.CreateNFTAsync(name, desc, 1, url);
			if(crret.Successful())
			{
				Snackbar.Add(localizer["NFT was minted successfully."], Severity.Success, config =>
				{
					config.Action = localizer["Open Wallet"];
					config.ActionColor = Color.Primary;
					config.Onclick = snackbar =>
					{
						Help();
						return Task.CompletedTask;
					};
				});
			}
			else
			{
				Snackbar.Add(localizer["Failed to mint NFT: {0}", crret.ResultMessage], Severity.Error);
			}
		}
		else
		{
			Snackbar.Add($"Unable to upload metadata: {qs.error}", Severity.Error);
		}
	}

	private void Help()
	{
		Navigation.NavigateTo($"/wallet");
	}

	async Task LoadIpfs()
	{
		var files = await nftclient.ListFiles();
		if (files.ok)
			nsfiles = files.value;
		else
			nsfiles = null;
	}

	async Task Load()
	{
        var client = new OpenSeaHttpClient(apiKey: "");

		var queryParams = new GetAssetsQueryParams
		{
			CollectionSlug = "bear-friends",
		};
		var count = 0;
		var limit = 50;
		var it = 0;		

		do
		{
			queryParams.Offset = limit * it;
			queryParams.Limit = limit;

			var assets = await client.GetAssetsAsync(queryParams);

			if (assets != null)
			{
				if (assets.Count > 0)
				{
					assetsList.AddRange(assets);
				}
			}
			else
			{
				break;
			}

			await Task.Delay(1000);
		}
		while (count == 50);

		//assetsList.Dump();


    }
}
