@page "/otc"
@page "/otc/{action}"

@using Fluxor
@using Fluxor.Blazor.Web.Components
@using Lyra.Data.Crypto
@using Nebula.Store.WebWalletUseCase
@using Microsoft.Extensions.Configuration
@using Lyra.Data.API.WorkFlow
@using UserLibrary.Data
@inherits FluxorComponent

<div class="mag cet">
    <MudTabs Elevation="2" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-6"
        @bind-ActivePanelIndex="activeIndex">
        <MudTabPanel Text="OTC Market">

            <MudGrid>
                @if (tradableOrders == null)
                {
                    <MudItem xs="12" Style="align-content: center;">
                        <MudProgressCircular Color="Color.Primary" Style="height:70px;width:70px;" Indeterminate="true" />
                    </MudItem>
                }
                else
                {
                    @foreach (var odr in tradableOrders)
                    {
                        var dao = daos.First(a => (a as TransactionBlock).AccountID == odr.Order.daoId);
                        <MudItem xs="12">
                            <UserLibrary.Components.OTC.OrderDisplay Otc=@odr Dao=@dao OrderSelected=@ShowCreateTradeUI />
                        </MudItem>
                    }
                }
            </MudGrid>
        </MudTabPanel>
        <MudTabPanel Text="Create Order">

            <MudGrid>
                @if (showco)
                {
                    <MudItem xs="12">
                        <h1>Sell</h1>
                        @*                                <RadzenSelectBar @bind-Value=@dir TValue="bool">
                            <Items>
                            <RadzenSelectBarItem Text="Buy" Value="true" />
                            <RadzenSelectBarItem Text="Sell" Value="false" />
                            </Items>
                            </RadzenSelectBar>*@
                    </MudItem>
                    <MudItem xs="12">
                        In Orgnization:<br />
                        <RadzenDropDown AllowClear="false" TValue="String" Class="w-100"
                                    @bind-Value=@seldaoname
                                    Data=@(mydaos.Select(a => (a as IBrokerAccount).Name)) />
                    </MudItem>
                    <MudItem xs="12">
                        Token To Sell<br />
                        <RadzenDropDown AllowClear="false" TValue="Ticker" Class="w-100"
                                    @bind-Value=@selcrypto Change="@fiatchanged"
                                    Data=@tickers />
                    </MudItem>
                    <MudItem xs="12">
                        Fiat currency<br />
                        <RadzenDropDown AllowClear="false" TValue="string" Class="w-100"
                                    @bind-Value=@selfiat Change="@fiatchanged"
                                    Data=@fiats />
                    </MudItem>
                    <MudItem xs="12">
                        Order Type<br />
                        <RadzenDropDown AllowClear="false" TValue="string" Class="w-100" Disabled
                                    @bind-Value=@selodrtyp
                                    Data=@odrtyps />
                    </MudItem>
                    <MudItem xs="12">
                        Sell price<br />
                        <RadzenNumeric TValue="decimal" Class="w-100" @bind-Value=@selprice Change="@CalCollat" /><br />
                        Market Price: @selcryptoprice @selfiat
                    </MudItem>
                    <MudItem xs="12">
                        Quantity<br />
                        <RadzenNumeric TValue="decimal" Class="w-100" @bind-Value=@selqty Change="@CalCollat" />
                    </MudItem>
                    <MudItem xs="12">
                        Min Payment<br />
                        <RadzenNumeric TValue="decimal" Class="w-80" @bind-Value=@paymin Change="@CalCollat" /> @selfiat
                    </MudItem>
                    <MudItem xs="12">
                        Max Payment<br />
                        <RadzenNumeric TValue="decimal" Class="w-80" @bind-Value=@paymax Change="@CalCollat" /> @selfiat
                    </MudItem>
                    <MudItem xs="12">
                        Collateral<br />
                        <RadzenNumeric TValue="decimal" Class="w-100" @bind-Value=@cltlyr Change="@CalCollat" /> <br />
                        Worth: @coltworth @selfiat<br />
                        Ratio: @coltrito <br />
                        Current Balance: @walletState.Value.wallet.BaseBalance LYR
                    </MudItem>
                    <MudItem xs="12">
                        Accepted Payment Methods<br />
                        <RadzenCheckBoxList @bind-Value=@paymths TValue="string" Orientation="Radzen.Orientation.Vertical"
                                        Data="@paymentMethods" />
                    </MudItem>
                    <MudItem xs="12">
                        <MudDivider />
                        Total: @total @selfiat
                    </MudItem>
                    <MudItem xs="12">
                        <RadzenButton IsBusy=@busy Click=@(async args => await CreateOrder("adddao")) Text="Add New Order" Icon="add_circle_outline" ButtonStyle="ButtonStyle.Primary" />
                    </MudItem>
                    <MudItem xs="12">
                        <RadzenButton Click=@(args => Back2("")) Text="Back" ButtonStyle="ButtonStyle.Light" />
                    </MudItem>
                }
                else
                {
                    <MudItem xs="12">
                        @if (walletState.Value.wallet == null)
                        {
                            <a href="/wallet">Open wallet to create order</a>
                        }
                        else
                        {
                            <a href="/dealer/register">Register on Lyra deal server</a>
                        }
                    </MudItem>
                }
            </MudGrid>
        </MudTabPanel>
        <MudTabPanel Text="My Trades">
            <MudGrid>
                <MudItem xs="12">
                        @if (walletState.Value.wallet == null)
                        {
                            <a href="/wallet">Open wallet to view trades.</a>
                        }
                        else
                        {
                            <UserLibrary.Components.OTC.TransactionsList />
                        }
                    
                </MudItem>
            </MudGrid>
        </MudTabPanel>
    </MudTabs>

</div>


@code {
    [Parameter]
    public string action { get; set; }

    [Inject]
    private IState<WebWalletState> walletState { get; set; }

    [Inject]
    private IDispatcher Dispatcher { get; set; }

    [Inject]
    IConfiguration Configuration { get; set; }

    [Inject] ISnackbar Snackbar { get; set; }
    [Inject] NavigationManager Navigation { get; set; }
    [Inject] ILyraAPI lyraApi { get; set; }

    List<IOtcOrder> tradableOrders;
    List<IDao> alldaos = new List<IDao>();
    List<IDao> daos = new List<IDao>();

    int activeIndex = 0;

    string name, desc;
    int sellerPar, buyerPar;
    bool busy;

    List<IDao> mydaos;
    bool showco, dir;
    string total;
    List<Ticker> tickers;
    List<string> fiats = new List<string>       // refer to WFOtcOrderCreate.FIATS
    {
        "USD", "EUR", "GBP", "CHF", "AUD", "CAD", "JPY", "KRW", "CNY", "TWD", "VND", "UAH", "RUB"
    };
    List<string> odrtyps = new List<string>
    {
        "Fixed price", "Floating price"
    };
    List<string> paymentMethods = new List<string>
    {
        "Paypal", "Bank Transfer", "Alipay", "Wechat Pay", "ATM Cash Deposit"
    };

    IEnumerable<string> paymths = new string[0];

    Ticker selcrypto;
    string seldaoname, selfiat = "USD", selodrtyp = "Fixed price";
    decimal selprice, selqty, cltlyr, paymin, paymax;
    decimal selcryptoprice;

    decimal trxprice, lyrprice, btcprice, lyrintprice;
    decimal coltworth;
    string coltrito;

    Dictionary<string, decimal> MarketPrices;

    protected override Task OnInitializedAsync()
    {
        SubscribeToAction<RespQuote>(
            (e) =>
            {
            // price updated
            btcprice = e.Prices["BTC"];
                trxprice = e.Prices["TRX"];
                lyrprice = e.Prices["LYR"];
                lyrintprice = e.Prices["LYR_INT"];

                MarketPrices = e.Prices;

                PriceChanged();
            }
        );

        SubscribeToAction<NotifyContainer>(async evtc =>
            {
                var evt = evtc.Get();

                if (evt is ContractChangeEvent cce)
                {
                    await GetMyDaos();
                    await RefreshOrders();
                    await InvokeAsync(() => StateHasChanged());
                }
            });

        return base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (action == "new")
        {
            activeIndex = 1;
            StateHasChanged();
        }

        if (firstRender)
        {
            if (walletState.Value.wallet == null)
            {
                Dispatcher.Dispatch(new WebWalletChangeTitleAction
                    {
                        title = "Lyra P2P Trade Market",
                        menunew = false,
                    });
            }
            else
            {
                Dispatcher.Dispatch(new WebWalletChangeTitleAction
                    {
                        title = "Lyra P2P Trade Market",
                        menunew = action != "new"
                    });
            }

            await GetMyDaos();
            await RefreshOrders();
            await ShowCreateOrderUI();
            StateHasChanged();
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    private void fiatchanged()
    {
        PriceChanged();
        CalCollat(0);
    }

    private void PriceChanged()
    {
        decimal usdprice = 0;
        if (selcrypto != null)
        {            
            if (selcrypto.Name.EndsWith("ETH")) usdprice = MarketPrices["ETH"];
            if (selcrypto.Name.EndsWith("BTC")) usdprice = MarketPrices["BTC"];
            if (selcrypto.Name.EndsWith("USDT")) usdprice = MarketPrices["USDT"];
        }

        selcryptoprice = Math.Round(usdprice / MarketPrices[selfiat.ToLower()], 2);
    }

    private void CalCollat(Decimal d)
    {
        total = $"{(selcryptoprice * selqty):N2}";
        var coltworthusd = cltlyr * lyrprice;

        coltworth = Math.Round(coltworthusd / MarketPrices[selfiat.ToLower()], 2);

        if (coltworth > 0 && selprice * selqty > 0)
            coltrito = $"{coltworth / (selprice * selqty):N2}";
        else
            coltrito = "";
    }

    private async Task ShowCreateTradeUI(IOtcOrder order)
    {
        if (walletState.Value.wallet == null)
        {
            Navigation.NavigateTo("/wallet");
            return;
        }
        //check if user has been registed on dealer server
        var client = new DealerClient(Configuration["network"]);
        var user = await client.GetUserByAccountIdAsync(walletState.Value.wallet.AccountId);
        if (!user.Successful())
        {
            // register user
            Navigation.NavigateTo("/dealer/register");
        }
        else
        {
            Navigation.NavigateTo($"/dealer/trade/{(order as TransactionBlock).AccountID}");
        }
    }

    async Task ShowCreateOrderUI()
    {
        if (walletState.Value.wallet != null)
        {
            //check if user has been registed on dealer server
            var client = new DealerClient(Configuration["network"]);
            var user = await client.GetUserByAccountIdAsync(walletState.Value.wallet.AccountId);
            if (!user.Successful())
            {
                // register user
                Navigation.NavigateTo("/dealer/register");
            }
            else
            {
                // fetch init prices
                MarketPrices = await client.GetPricesAsync();
                showco = !showco;
            }
        }
    }

    async Task CreateOrder(string daoname)
    {
        busy = true;
        Snackbar.Add("Creating Order...", Severity.Info);

        try
        {
            var daoret3 = await walletState.Value.wallet.RPC.GetDaoByNameAsync(seldaoname);
            var daot = daoret3.GetBlock() as TransactionBlock;

            var dealer = new DealerClient(Configuration["network"]);
            var prices = await dealer.GetPricesAsync();
            var tokenSymbol = selcrypto.dbname.Split('/')[1];
            var neededLyr = Math.Round(prices[tokenSymbol] * selqty * ((daot as IDao).SellerPar / 100) / prices["LYR"] * 1.03m);
            if (cltlyr < neededLyr)
            {
                Snackbar.Add($"Not enough collateral. Need > {neededLyr} LYR", Severity.Warning);
                busy = false;
                return;
            }

            var order = new OTCOrder
                {
                    daoId = daot.AccountID,
                    dir = TradeDirection.Sell,
                    crypto = selcrypto.dbname,
                    fiat = selfiat,
                    priceType = PriceType.Fixed,
                    price = selprice,
                    amount = selqty,
                    collateral = cltlyr,
                    limitMin = paymin,
                    limitMax = paymax,
                    payBy = paymths.ToArray(),
                };
            var ret = await walletState.Value.wallet.CreateOTCOrderAsync(order);
            if (ret.Successful())
            {
                Snackbar.Add("Order created.", Severity.Success);
            }
            else
            {
                Snackbar.Add($"Order failed to create: {ret.ResultCode}", Severity.Error);
            }
        }
        catch (Exception e)
        {
            Snackbar.Add($"Order failed to create: {e}", Severity.Error);
        }

        busy = false;
    }

    async Task GetMyDaos()
    {
        var alldaoret = await lyraApi.GetAllDaosAsync(0, 10);
        if (alldaoret.Successful())
        {
            mydaos = alldaoret.GetBlocks().Cast<IDao>().ToList();
        }
        else
        {
            mydaos = new List<IDao>();
        }
        //    if (walletState.Value.wallet == null)
        //        return;
        //    var brkblksret = await walletState.Value.wallet.RPC.GetAllBrokerAccountsForOwnerAsync(walletState.Value.wallet.AccountId);
        //    mydaos = brkblksret.GetBlocks().Where(a => a is DaoGenesisBlock).Cast<IDao>().ToList();
    }

    async Task Back(string buttonName)
    {
        Navigation.NavigateTo("/dao");
    }

    async Task Back2(string buttonName)
    {
        showco = !showco;
        Navigation.NavigateTo("/dao");
    }

    private async Task RefreshOrders()
    {
        try
        {
            // get tradable orders
            var tosret = await lyraApi.FindTradableOtcAsync();
            if (tosret.Successful())
            {
                tradableOrders = tosret.GetBlocks("orders").Cast<IOtcOrder>()
                    .Where(a => a.Order.amount > 0)
                    .OrderBy(a => a.Order.price)
                    .ToList();
                daos = tosret.GetBlocks("daos").Cast<IDao>().ToList();
            }

            // get sellable tokens
            var tokens = await lyraApi.GetTokenNamesAsync(null, null, "(null)");

            tickers = tokens.Entities
                .Where(a => !a.StartsWith("unittest/"))
                .Select(a => new Ticker
                {
                    dbname = a,
                    Name = a.Replace("tether/", "$")
                })
                .OrderBy(a => a.Name)
                .ToList();
            //tickers.Insert(0, new Ticker { dbname = "LYR", Name = "LYR" });
        }
        catch(Exception e)
        {
            Snackbar.Add($"Failed to refresh orders: {e}", Severity.Error);
        }
    }
}
