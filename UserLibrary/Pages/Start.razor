@page "/start"
@using Fluxor
@using Lyra.Data.Crypto
@using Microsoft.Extensions.Configuration
@using Nebula.Store.WebWalletUseCase
@inject IConfiguration Configuration

<iframe width="100%" height="100%" src="@url" frameborder="0" allowfullscreen></iframe>

@code {
    [Inject]
    private IState<WebWalletState>? walletState { get; set; }
    [Inject] ILyraAPI Client { get; set; }
    [Inject] ILocalStorageService localStorage { get; set; }
    [Inject] NebulaConsts _consts { get; set; }

    string url;

    protected async override Task OnInitializedAsync()
    {
        url = await getStartUrl();

        await base.OnInitializedAsync();
    }

    async Task<string> getStartUrl()
    {
        var url = "https://start.lyra.live";
        if (Configuration["network"] == "testnet")
            url = "https://starttestnet.lyra.live";
        else if(Configuration["network"] == "devnet")
            url = "https://localhost:7288";

#if DEBUG
        url = "https://localhost:7288";
#endif

        if (walletState.Value.IsOpening)
        {
            var wcjson = await localStorage.GetItemAsync<string>(_consts.NebulaStorName);
            var wc = new WalletContainer(wcjson);
            var meta = wc.Get(walletState.Value.wallet.AccountName);

            var lsb = await Client.GetLastServiceBlockAsync();
            var signature = Signatures.GetSignature(walletState.Value.wallet.PrivateKey,
                lsb.GetBlock().Hash, walletState.Value.wallet.AccountId);

            return $"{url}/?network={Configuration["network"]}&address={walletState.Value.wallet.AccountId}&signature={signature}&backup={meta.Backup}";
        }
        return $"{url}/?network={Configuration["network"]}&address=";
    }
}
