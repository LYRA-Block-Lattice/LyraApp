@page "/dealer"
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager NavigationManager
@implements IAsyncDisposable

<PageTitle>Index</PageTitle>

<div class="form-group">
    <label>
        User:
        <input @bind="userInput" />
    </label>
</div>
<div class="form-group">
    <label>
        Message:
        <input @bind="messageInput" size="50" />
    </label>
</div>
<button @onclick="Send" disabled="@(!IsConnected)">Send</button>
<button @onclick="Hist" >History</button>
<hr>

<ul id="messagesList">
    @foreach (var message in messages)
    {
        <li>@message</li>
    }
</ul>

@code {
    private HubConnection? hubConnection;
    private List<string> messages = new List<string>();
    private string? userInput;
    private string? messageInput;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl("https://localhost:7070/chathub")
            .Build();

        hubConnection.On<string, string>("OnPublish", (user, message) =>
        {
            var encodedMsg = $"{user}: {message}";
            messages.Add(encodedMsg);
            StateHasChanged();
        });

        hubConnection.On<List<string>>("History", (hist) =>
        {
            foreach(var h in hist)
                messages.Add("history: " + h);
            StateHasChanged();
        });

        await hubConnection.StartAsync();

        await hubConnection.SendAsync("GetHistory", userInput);
    }

    private async Task Send()
	{
	    if (hubConnection is not null)
		{
            await hubConnection.SendAsync("Publish", userInput, messageInput);
		}
	}

    private async Task Hist()
	{
	    if (hubConnection is not null)
		{
            await hubConnection.SendAsync("GetHistory", userInput);
		}
	}

    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}
