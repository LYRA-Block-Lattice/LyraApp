@page "/dao/detail/{daoid}"

@using Fluxor
@using Fluxor.Blazor.Web.Components
@using Lyra.Data.Crypto
@using Nebula.Store.WebWalletUseCase
@using Microsoft.Extensions.Configuration
@using Lyra.Data.API.WorkFlow
@using UserLibrary.Data
@inherits FluxorComponent

@if(loading)
{
    <div style="z-index: 5;" class="spinner"></div>
}
else
{
    <div class="mag cet">

            <h1>@dao.Name</h1>
                    <div>
                        @dao.Description
                    </div>
                    <div>
                        Profit Share Ratio: @(dao.ShareRito * 100) %
                    </div>
                    <div>
                        Seats: @dao.Treasure.Count / @dao.Seats
                    </div>
                    <div>
                        Seller collateral Ratio: @dao.SellerPar %
                    </div>
                    <div>
                        Buyer collateral Ratio: @dao.BuyerPar %
                    </div>

                <div>
                @if(dao.Treasure.ContainsKey(walletState.Value.wallet.AccountId))
                {
                    <RadzenButton Text="Leave this DAO" ButtonStyle="ButtonStyle.Primary" />
                }
                else
                {
                    <RadzenButton Text="Invest this DAO" ButtonStyle="ButtonStyle.Primary" />
                }
            
                </div>
                @if(walletState.Value.wallet != null && dao.OwnerAccountId == walletState.Value.wallet.AccountId)
                {
                    <a href="/dao/createvote/@((dao as TransactionBlock).AccountID)"><RadzenButton Text="Create Vote" ButtonStyle="ButtonStyle.Primary" />
                        </a>
                    <RadzenButton Text="Edit DAO" ButtonStyle="ButtonStyle.Secondary" />
                }
                <br />
                <div>
                <p>show all votes if any</p>
                <p>show all votes if any</p>
                </div>


    </div>
}




@code {
    [Parameter]
    public string daoid { get; set; }

    [Inject]
    private IState<WebWalletState> walletState { get; set; }

    [Inject]
    private IDispatcher Dispatcher { get; set; }

    [Inject]
    IConfiguration Configuration { get; set; }

    [Inject] ISnackbar Snackbar { get; set; }
    [Inject] NavigationManager Navigation { get; set; }
    [Inject] ILyraAPI lyraApi { get; set; }

    string name, desc;
    int sellerPar, buyerPar;
    bool busy;

    IDao dao;
    bool loading = true;
    string total;
    List<Ticker> tickers;
    List<string> fiats = new List<string>
    {
        "USD", "EUR", "JPY", "CNY", "CHF"
    };
    List<string> odrtyps = new List<string>
    {
        "Fixed price", "Floating price"
    };
    List<string> paymentMethods = new List<string>
    {
        "Paypal", "Bank Transfer", "Alipay", "Wechat Pay"
    };

    IEnumerable<string> paymths = new string[0];

    Ticker selcrypto;
    string seldaoname, selfiat = "USD", selodrtyp = "Fixed price";
    decimal selprice, selqty, cltlyr, paymin, paymax;
    decimal selcryptoprice;

    decimal trxprice, lyrprice, btcprice, lyrintprice;
    decimal coltworth;
    string coltrito;

    protected async override Task OnInitializedAsync()
    {
        await GetDao();

        SubscribeToAction<RespQuote>(
            (e) =>
            {
            // price updated
            btcprice = e.Prices["BTC"];
                trxprice = e.Prices["TRX"];
                lyrprice = e.Prices["LYR"];
                lyrintprice = e.Prices["LYR_INT"];

                if (selcrypto != null)
                {
                    if (selcrypto.Name.EndsWith("ETH")) selcryptoprice = e.Prices["ETH"];
                    if (selcrypto.Name.EndsWith("BTC")) selcryptoprice = e.Prices["BTC"];
                    if (selcrypto.Name.EndsWith("USDT")) selcryptoprice = e.Prices["USDT"];
                }
            }
        );

        await base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            Dispatcher.Dispatch(new WebWalletChangeTitleAction
                    {
                        title = "DAO Detail",
                        menunew = false,
                    });
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    private void CalCollat(decimal d)
    {
        total = $"{(selprice * selqty):N2}";
        coltworth = cltlyr * lyrprice;
        if (coltworth > 0 && selprice * selqty > 0)
            coltrito = $"{coltworth / (selprice * selqty):N2}";
        else
            coltrito = "";
    }

    private async Task ShowCreateTradeUI(IOtcOrder order)
    {
        if (walletState.Value.wallet == null)
        {
            Navigation.NavigateTo("/wallet");
            return;
        }
        //check if user has been registed on dealer server
        var client = new DealerClient(Configuration["network"]);
        var user = await client.GetUserByAccountIdAsync(walletState.Value.wallet.AccountId);
        if (!user.Successful())
        {
            // register user
            Navigation.NavigateTo("/dealer/register");
        }
        else
        {
            Navigation.NavigateTo($"/dealer/trade/{(order as TransactionBlock).AccountID}");
        }
    }

    async Task ShowCreateVote(string name)
    {
        //check if user has been registed on dealer server
        var client = new DealerClient(Configuration["network"]);
        var user = await client.GetUserByAccountIdAsync(walletState.Value.wallet.AccountId);
        if (!user.Successful())
        {
            // register user
            Navigation.NavigateTo("/dealer/register");
        }
        else
        {
            seldaoname = name;
        }
    }

    async Task GetDao()
    {
        var alldaoret = await lyraApi.GetLastBlockAsync(daoid);
        if (alldaoret.Successful())
        {
            dao = alldaoret.GetBlock() as IDao;
            loading = false;
        }
   }

    async Task Back(string buttonName)
    {
        Navigation.NavigateTo("/dao");
    }
}
