@page "/dao/createvote/{daoid}"
@using Fluxor
@using Fluxor.Blazor.Web.Components
@using Lyra.Data.API.ODR
@using Lyra.Data.API.WorkFlow
@using Nebula.Store.WebWalletUseCase
@using Newtonsoft.Json
@using UserLibrary.Components.DAO
@inherits BasicPage

<div class="mag">
    <div>DAO ID</div>
    <div>
        @daoid
    </div>
    <div>Vote Type</div>
    <div>
        <RadzenDropDown TValue="string" Class="w-100"
                        Data=@types ValueChanged=@changed />
    </div>
    <div>Valid Time Span</div>
    <div>
        <RadzenNumeric TValue="int" @bind-Value=@days class="w-10" /> Days <RadzenNumeric TValue="int" @bind-Value=@hours /> Hours <RadzenNumeric TValue="int" @bind-Value=@minutes /> Minutes
    </div>
    <div>Title</div>
    <div>
        <RadzenTextBox @bind-Value=@title Class="w-100" />
    </div>
    <div>Description</div>
    <div>
        <RadzenTextArea @bind-Value=@desc Class="w-100" />
    </div>

    <MudGrid>
        @if (curtype == SubjectType.DAOModify)
        {
            <MudItem xs="12">
                DAO' new description:<br />
                <RadzenTextArea @bind-Value=@daonewdesc Class="w-100" />
            </MudItem>
            <MudItem xs="12">
                Ratio to share to staking (0% - 100%):<br />
                <RadzenNumeric TValue="decimal" @bind-Value="@pftShare" Class="w-100" /> %
            </MudItem>
            <MudItem xs="12">
                Number of staking (0 - 100): <br />
                <RadzenNumeric TValue="int" @bind-Value="@pftSeats" Class="w-100" />
            </MudItem>
            <MudItem xs="12">
                Seller Fee Percentage <br />
                <RadzenNumeric TValue="decimal" @bind-Value=@sellerFee Class="w-100" /> %
            </MudItem>
            <MudItem xs="12">
                Buyer Fee Percentage <br />
                <RadzenNumeric TValue="decimal" @bind-Value=@buyerFee Class="w-100" /> %
            </MudItem>
            <MudItem xs="12">
                Seller Collateral Percentage <br />
                <RadzenNumeric TValue="int" @bind-Value=@sellerPar Class="w-100" /> %
            </MudItem>
            <MudItem xs="12">
                Buyer Collateral Percentage <br />
                <RadzenNumeric TValue="int" @bind-Value=@buyerPar Class="w-100" /> %
            </MudItem>
        }
        else if (curtype == SubjectType.OTCDispute)
        {
            <MudItem xs="12">
                For Disputed Trade ID: <br />
                <RadzenTextBox @bind-Value=@tradeId Class="w-100" />
            </MudItem>
            <MudItem xs="12">
                Resolution:
            </MudItem>
            @foreach(var cfg in cfgs)
            {
                <MudItem xs="12">
                    <ODRTransfer @bind-From=@cfg.from @bind-To=@cfg.to @bind-Amount=@cfg.amount @bind-Desc=@cfg.desc />
                </MudItem>
            }
        }
        else
        {
            <div>No execute plan.</div>
        }
    </MudGrid>
    <div>Options</div>
    <div>
        <RadzenButton Text="Add" Click=@AddOption />
        @for (var i = 0; i < options.Count; i++)
        {
            var x = i;
            <div>
                <span>@(x+1).&nbsp;</span><RadzenTextBox @bind-Value="@(options[x])" /><RadzenButton Text="Remove" Click=@(a => DelOption(x)) />
            </div>
        }
    </div>
    <div>
        <MudDivider />
    </div>
    <div>
        <RadzenButton Text="Create Vote" Click=@CreateVote />
    </div>
</div>

@code {
    [Parameter]
    public string daoid { get; set; }

    public override string DaoId => daoid;
    public override string Title => "Create Vote";

    List<string> options = new List<string> { "Option 1", "Option 2" };
    string[] types = new string[] { "Generic", "OTC Dispute Resolution", "DAO Settings Modification" };

    int seed;
    int days, hours, minutes;
    string title, desc;
    SubjectType curtype = SubjectType.None;

    // settings for dao change
    string daonewdesc;
    decimal pftShare, sellerFee, buyerFee;
    int pftSeats, sellerPar, buyerPar;

    // settings for dispute trade
    string tradeId;
    IOtcTrade curtrade;

    class SendCfg
    {
        public string from { get; set; }
        public string to { get; set; }
        public decimal amount { get; set; }
        public string desc { get; set; }
    }

    SendCfg[] cfgs = new []
    {
        new SendCfg { from = "Seller", to = "Seller" },
        new SendCfg { from = "Buyer", to = "Buyer" },
        new SendCfg { from = "DAOTreasure", to = "DAOTreasure" },
    };

    void AddOption()
    {
        options.Add($"Option {seed++}");
    }
    void DelOption(int ndx)
    {
        options.RemoveAt(ndx);
    }

    protected override Task OnGotDAO()
    {
        daonewdesc = dao.Description;
        pftShare = dao.ShareRito * 100;
        pftSeats = dao.Seats;
        sellerFee = dao.SellerFeeRatio;
        buyerFee = dao.BuyerFeeRatio;
        sellerPar = dao.SellerPar;
        buyerPar = dao.BuyerPar;

        return Task.CompletedTask;
    }

    async Task CreateVote()
    {
        VotingSubject subject = new VotingSubject
            {
                Type = SubjectType.OTCDispute,
                DaoId = daoid,
                Issuer = walletState.Value.wallet.AccountId,
                TimeSpan = (int)(new TimeSpan(days, hours, minutes, 0).TotalMinutes),
                Title = title,
                Description = desc,
                Options = options.ToArray(),
            };

        VoteProposal daoprosl;

        if (curtype == SubjectType.DAOModify)
        {
            var change2 = new DAOChange
                {
                    creator = walletState.Value.wallet.AccountId,
                    settings = new Dictionary<string, string>
                {
                    { "ShareRito", $"{pftShare / 100}" },
                    { "Seats", $"{pftSeats}" },
                    { "SellerFeeRatio", $"{sellerFee}"},
                    { "BuyerFeeRatio", $"{buyerFee}"},
                    { "SellerPar", $"{sellerPar}" },
                    { "BuyerPar", $"{buyerPar}" },
                    { "Description", daonewdesc },
                }
                };

            daoprosl = new VoteProposal
                {
                    pptype = ProposalType.DAOSettingChanges,
                    data = JsonConvert.SerializeObject(change2),
                };
        }
        else if (curtype == SubjectType.OTCDispute)
        {
            TransMove[] moves = new TransMove[cfgs.Length];
            for (var i = 0; i < cfgs.Length; i++)
            {
                var frm = (Parties)Enum.Parse(typeof(Parties), cfgs[i].from);
                var too = (Parties)Enum.Parse(typeof(Parties), cfgs[i].to);
                if (frm == Parties.None || too == Parties.None)
                {
                    continue;
                }
                moves[i] = new TransMove
                    {
                        from = frm,
                        to = too,
                        amount = cfgs[i].amount,
                        desc = cfgs[i].desc
                    };
            }
            var resolution = new ODRResolution
                {
                    RType = ResolutionType.OTCTrade,
                    Creator = walletState.Value.wallet.AccountId,
                    TradeId = tradeId,
                    Actions = moves,
                };
            daoprosl = new VoteProposal
                {
                    pptype = ProposalType.DisputeResolution,
                    data = JsonConvert.SerializeObject(resolution),
                };
        }
        else
        {
            daoprosl = null;
        }

        var voteCrtRet = await walletState.Value.wallet.CreateVoteSubject(subject, daoprosl);
        if (voteCrtRet.Successful())
        {
            Snackbar.Add($"Vote created.", Severity.Success);
        }
        else
        {
            Snackbar.Add($"Failed to create vote: {voteCrtRet.ResultCode}.", Severity.Error);
        }
    }

    Task changed(string o)
    {
        if (o == types[0])
            curtype = SubjectType.None;
        else if (o == types[1])
            curtype = SubjectType.OTCDispute;
        else if (o == types[2])
            curtype = SubjectType.DAOModify;

        return Task.CompletedTask;
    }
}
