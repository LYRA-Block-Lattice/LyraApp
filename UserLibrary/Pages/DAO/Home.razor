@page "/dao"

@using Fluxor
@using Fluxor.Blazor.Web.Components
@using Lyra.Data.Crypto
@using Nebula.Store.WebWalletUseCase
@using Microsoft.Extensions.Configuration
@using Lyra.Data.API.WorkFlow
@using UserLibrary.Data
@inherits FluxorComponent

<div class="mag cet">

    <MudGrid>
        <MudItem xs="12">
            @if (walletState.Value.wallet == null)
            {
                <a href="/wallet"><MudButton Variant="Variant.Filled" Color="Color.Primary">Open Wallet to Create DAO</MudButton></a>
            }
            else
            {
                <a href="/dao/new">
                <MudButton Variant="Variant.Filled" Color="Color.Primary">New DAO</MudButton>
                </a>
            }
        </MudItem>
        <MudItem xs="12">
            <MudTextField @bind-Value="@keywords" Label="Search DAO" Variant="Variant.Text"></MudTextField>
        </MudItem>
            @if (alldaos != null)
            {
                foreach (var dao in alldaos)
                {
                    <MudItem xs="12">
                        <p>
                            <b>@dao.Name</b>
                        </p>
                            <p>
                                @dao.Description
                            </p>
                            <a href="/dao/detail/@((dao as TransactionBlock).AccountID)">
                            <MudButton Variant="Variant.Filled" Color="Color.Secondary">Details</MudButton></a>
                         
                            <MudDivider DividerType="DividerType.Middle" Class="my-6" />

                    </MudItem>
                }
            }

        @if (mydaos != null)
        {



            @*            <MudItem xs="12">
                <MudExpansionPanels Class=".blue .darken-1 .shades-text .text-white">
                <MudExpansionPanel Text="The Lyra Council" MaxHeight="1000">
                <p>
                Formed by all (Total 19) Lyra node owners, The Lyra Council
                is the final arbitration institution for almost all fairs of
                the whole Lyra network. Decisions are made by voting of members.
                </p>
                <MudDivider DividerType="DividerType.Middle" Class="my-6" />
                <MudButton Variant="Variant.Filled" Color="Color.Secondary">Details</MudButton>
                <MudButton Variant="Variant.Filled" Color="Color.Primary">Join</MudButton>
                </MudExpansionPanel>
                <MudExpansionPanel Text="OTC Exchange" MaxHeight="500">
                <p>
                Trade Token/Fiat without a broker.
                </p>
                <MudDivider DividerType="DividerType.Middle" Class="my-6" />
                <MudButton Variant="Variant.Filled" Color="Color.Secondary">Details</MudButton>
                <MudButton Variant="Variant.Filled" Color="Color.Primary">Sell</MudButton>
                <MudButton Variant="Variant.Filled" Color="Color.Primary">Buy</MudButton>
                </MudExpansionPanel>
                <MudExpansionPanel Text="Simple Buy & Sell" MaxHeight="1000">
                <p>
                A simple buy/sell business model.
                </p>
                <MudDivider DividerType="DividerType.Middle" Class="my-6" />
                <MudButton Variant="Variant.Filled" Color="Color.Secondary">Details</MudButton>
                <MudButton Variant="Variant.Filled" Color="Color.Primary">Sell</MudButton>
                <MudButton Variant="Variant.Filled" Color="Color.Primary">Buy</MudButton>
                </MudExpansionPanel>
                </MudExpansionPanels>
                </MudItem>*@
        }
    </MudGrid>

</div>


@code {
    [Inject]
    private IState<WebWalletState> walletState { get; set; }

    [Inject]
    private IDispatcher Dispatcher { get; set; }

    [Inject]
    IConfiguration Configuration { get; set; }

    [Inject] ISnackbar Snackbar { get; set; }
    [Inject] NavigationManager Navigation { get; set; }
    [Inject] ILyraAPI lyraApi { get; set; }

    List<IOtcOrder> tradableOrders;
    List<IDao> alldaos = new List<IDao>();
    List<IDao> daos = new List<IDao>();

    string keywords;

    string name, desc;
    int sellerPar, buyerPar;
    bool busy;

    List<IDao> mydaos;
    bool showco, dir;
    string total;
    List<Ticker> tickers;
    List<string> fiats = new List<string>
    {
        "USD", "EUR", "JPY", "CNY", "CHF"
    };
    List<string> odrtyps = new List<string>
    {
        "Fixed price", "Floating price"
    };
    List<string> paymentMethods = new List<string>
    {
        "Paypal", "Bank Transfer", "Alipay", "Wechat Pay"
    };

    IEnumerable<string> paymths = new string[0];

    Ticker selcrypto;
    string seldaoname, selfiat = "USD", selodrtyp = "Fixed price";
    decimal selprice, selqty, cltlyr, paymin, paymax;
    decimal selcryptoprice;

    decimal trxprice, lyrprice, btcprice, lyrintprice;
    decimal coltworth;
    string coltrito;

    protected override Task OnInitializedAsync()
    {
        SubscribeToAction<RespQuote>(
            (e) =>
            {
                // price updated
                btcprice = e.Prices["BTC"];
                trxprice = e.Prices["TRX"];
                lyrprice = e.Prices["LYR"];
                lyrintprice = e.Prices["LYR_INT"];

                if (selcrypto != null)
                {
                    if (selcrypto.Name.EndsWith("ETH")) selcryptoprice = e.Prices["ETH"];
                    if (selcrypto.Name.EndsWith("BTC")) selcryptoprice = e.Prices["BTC"];
                    if (selcrypto.Name.EndsWith("USDT")) selcryptoprice = e.Prices["USDT"];
                }
            }
        );

        SubscribeToAction<NotifyContainer>(async evtc =>
            {
                var evt = evtc.Get();

                if (evt is ContractChangeEvent cce)
                {
                    await GetMyDaos();
                    await RefreshOrders();
                    await InvokeAsync(() => StateHasChanged());
                }
            });

        return base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
                Dispatcher.Dispatch(new WebWalletChangeTitleAction
                    {
                        title = "Lyra DAO Central",
                        menunew = true,
                    });
            //else
            //{
            //    Dispatcher.Dispatch(new WebWalletChangeTitleAction
            //        {
            //            title = "Lyra DAO Central",
            //            menunew = action != "new"
            //        });
            //}

            await GetMyDaos();
            await RefreshOrders();
            StateHasChanged();
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    private void CalCollat(decimal d)
    {
        total = $"{(selprice * selqty):N2}";
        coltworth = cltlyr * lyrprice;
        if (coltworth > 0 && selprice * selqty > 0)
            coltrito = $"{coltworth / (selprice * selqty):N2}";
        else
            coltrito = "";
    }

    private async Task ShowCreateTradeUI(IOtcOrder order)
    {
        if (walletState.Value.wallet == null)
        {
            Navigation.NavigateTo("/wallet");
            return;
        }
        //check if user has been registed on dealer server
        var client = new DealerClient(Configuration["network"]);
        var user = await client.GetUserByAccountIdAsync(walletState.Value.wallet.AccountId);
        if (!user.Successful())
        {
            // register user
            Navigation.NavigateTo("/dealer/register");
        }
        else
        {
            Navigation.NavigateTo($"/dealer/trade/{(order as TransactionBlock).AccountID}");
        }
    }

    async Task ShowCreateVote(string name)
    {
        //check if user has been registed on dealer server
        var client = new DealerClient(Configuration["network"]);
        var user = await client.GetUserByAccountIdAsync(walletState.Value.wallet.AccountId);
        if (!user.Successful())
        {
            // register user
            Navigation.NavigateTo("/dealer/register");
        }
        else
        {
            showco = !showco;
            seldaoname = name;
        }
    }

    async Task CreateOrder(string daoname)
    {
        busy = true;
        Snackbar.Add("Creating Order...", Severity.Info);

        try
        {
            var daoret3 = await walletState.Value.wallet.RPC.GetDaoByNameAsync(seldaoname);
            var daot = daoret3.GetBlock() as TransactionBlock;

            var dealer = new DealerClient(Configuration["network"]);
            var prices = await dealer.GetPricesAsync();
            var tokenSymbol = selcrypto.dbname.Split('/')[1];
            var neededLyr = Math.Round(prices[tokenSymbol] * selqty * ((daot as IDao).SellerPar / 100) / prices["LYR"] * 1.03m);
            if (cltlyr < neededLyr)
            {
                Snackbar.Add($"Not enough collateral. Need > {neededLyr} LYR", Severity.Warning);
                busy = false;
                return;
            }

            var order = new OTCOrder
                {
                    daoId = daot.AccountID,
                    dir = TradeDirection.Sell,
                    crypto = selcrypto.dbname,
                    fiat = selfiat,
                    priceType = PriceType.Fixed,
                    price = selprice,
                    amount = selqty,
                    collateral = cltlyr,
                    limitMin = paymin,
                    limitMax = paymax,
                    payBy = paymths.ToArray(),
                };
            var ret = await walletState.Value.wallet.CreateOTCOrderAsync(order);
            if (ret.Successful())
            {
                Snackbar.Add("Order created.", Severity.Success);
            }
            else
            {
                Snackbar.Add($"Order failed to create: {ret.ResultCode}", Severity.Error);
            }
        }
        catch (Exception e)
        {
            Snackbar.Add($"Order failed to create: {e}", Severity.Error);
        }

        busy = false;
    }

    async Task GetMyDaos()
    {
        var alldaoret = await lyraApi.GetAllDaosAsync(0, 10);
        if (alldaoret.Successful())
        {
            alldaos = alldaoret.GetBlocks().Cast<IDao>().ToList();
        }

        if (walletState.Value.wallet == null)
            return;
        var brkblksret = await walletState.Value.wallet.RPC.GetAllBrokerAccountsForOwnerAsync(walletState.Value.wallet.AccountId);
        mydaos = brkblksret.GetBlocks().Where(a => a is DaoGenesisBlock).Cast<IDao>().ToList();
    }

    async Task Back2(string buttonName)
    {
        showco = !showco;
        Navigation.NavigateTo("/dao");
    }

    private async Task RefreshOrders()
    {
        // get tradable orders
        var tosret = await lyraApi.FindTradableOtcAsync();
        if (tosret.Successful())
        {
            tradableOrders = tosret.GetBlocks("orders").Cast<IOtcOrder>()
                .Where(a => a.Order.amount > 0)
                .OrderBy(a => a.Order.price)
                .ToList();
            daos = tosret.GetBlocks("daos").Cast<IDao>().ToList();
        }

        // get sellable tokens
        // for api sign only
        var pk = "n4uh7o2kAerPZQSNBRirzA3pSUBEuEhs6r7oRwpV6Dgbs3FvY";
        var pub = "LBRzScs8NwMcr7U8i9a8sSWETseWf3TLge4CVJy6as24hSB4hwtZ5jKTbHJdoVZBJiNC2LpjN9MQB719Py9YxXo2xpLxnS";

        var lsbret = await lyraApi.GetLastServiceBlockAsync();

        var sign = Signatures.GetSignature(pk, (lsbret.GetBlock() as ServiceBlock).Hash, pub);
        var tokens = await lyraApi.GetTokenNamesAsync(pub, sign, "(null)");

        tickers = tokens.Entities
            .Where(a => !a.StartsWith("unittest/"))
            .Select(a => new Ticker
                {
                    dbname = a,
                    Name = a.Replace("tether/", "$")
                })
            .OrderBy(a => a.Name)
            .ToList();
        //tickers.Insert(0, new Ticker { dbname = "LYR", Name = "LYR" });
    }
}
