@page "/dao"

@using Fluxor
@using Fluxor.Blazor.Web.Components
@using Lyra.Data.Crypto
@using Nebula.Store.WebWalletUseCase
@using Microsoft.Extensions.Configuration
@using Lyra.Data.API.WorkFlow
@using UserLibrary.Data
@inherits FluxorComponent

<div class="mag cet">

    <MudGrid>
        <MudItem xs="12">
            @if (walletState.Value.wallet == null)
            {
                <a href="/wallet"><MudButton Variant="Variant.Filled" Color="Color.Primary">Open Wallet to Create DAO</MudButton></a>
            }
            else
            {
                <a href="/dao/new">
                <MudButton Variant="Variant.Filled" Color="Color.Primary">New DAO</MudButton>
                </a>
            }
        </MudItem>
        <MudItem xs="12">
            <MudTextField @bind-Value="@keywords" Label="Search DAO" Variant="Variant.Text"></MudTextField>
        </MudItem>
            @if (alldaos != null)
            {
                foreach (var dao in alldaos)
                {
                    <MudItem xs="12">
                        <p>
                            <b>@dao.Name</b>
                        </p>
                            <p>
                                @dao.Description
                            </p>
                            <a href="/dao/detail/@((dao as TransactionBlock).AccountID)">
                            <MudButton Variant="Variant.Filled" Color="Color.Secondary">Details</MudButton></a>
                         
                            <MudDivider DividerType="DividerType.Middle" Class="my-6" />

                    </MudItem>
                }
            }

        @if (mydaos != null)
        {



            @*            <MudItem xs="12">
                <MudExpansionPanels Class=".blue .darken-1 .shades-text .text-white">
                <MudExpansionPanel Text="The Lyra Council" MaxHeight="1000">
                <p>
                Formed by all (Total 19) Lyra node owners, The Lyra Council
                is the final arbitration institution for almost all fairs of
                the whole Lyra network. Decisions are made by voting of members.
                </p>
                <MudDivider DividerType="DividerType.Middle" Class="my-6" />
                <MudButton Variant="Variant.Filled" Color="Color.Secondary">Details</MudButton>
                <MudButton Variant="Variant.Filled" Color="Color.Primary">Join</MudButton>
                </MudExpansionPanel>
                <MudExpansionPanel Text="OTC Exchange" MaxHeight="500">
                <p>
                Trade Token/Fiat without a broker.
                </p>
                <MudDivider DividerType="DividerType.Middle" Class="my-6" />
                <MudButton Variant="Variant.Filled" Color="Color.Secondary">Details</MudButton>
                <MudButton Variant="Variant.Filled" Color="Color.Primary">Sell</MudButton>
                <MudButton Variant="Variant.Filled" Color="Color.Primary">Buy</MudButton>
                </MudExpansionPanel>
                <MudExpansionPanel Text="Simple Buy & Sell" MaxHeight="1000">
                <p>
                A simple buy/sell business model.
                </p>
                <MudDivider DividerType="DividerType.Middle" Class="my-6" />
                <MudButton Variant="Variant.Filled" Color="Color.Secondary">Details</MudButton>
                <MudButton Variant="Variant.Filled" Color="Color.Primary">Sell</MudButton>
                <MudButton Variant="Variant.Filled" Color="Color.Primary">Buy</MudButton>
                </MudExpansionPanel>
                </MudExpansionPanels>
                </MudItem>*@
        }
    </MudGrid>

</div>


@code {
    [Inject]
    private IState<WebWalletState> walletState { get; set; }

    [Inject]
    private IDispatcher Dispatcher { get; set; }

    [Inject]
    IConfiguration Configuration { get; set; }

    [Inject] ISnackbar Snackbar { get; set; }
    [Inject] NavigationManager Navigation { get; set; }
    [Inject] ILyraAPI lyraApi { get; set; }
    [Inject] DealerConnMgr connMgr { get; set; }

    List<IOtcOrder> tradableOrders;
    List<IDao> alldaos = new List<IDao>();
    List<IDao> daos = new List<IDao>();

    string keywords;

    string name, desc;
    int sellerPar, buyerPar;
    bool busy;

    List<IDao> mydaos;

    string seldaoname;

    protected override Task OnInitializedAsync()
    {
        SubscribeToAction<ContractChangeEvent>(async cce =>
            {
                await GetMyDaos();
                await InvokeAsync(() => StateHasChanged());
            });

        return base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            Dispatcher.Dispatch(new WebWalletChangeTitleAction
                {
                    title = "Lyra DAO Central",
                    menunew = true,
                });

            await GetMyDaos();
            StateHasChanged();
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    async Task GetMyDaos()
    {
        var alldaoret = await lyraApi.GetAllDaosAsync(0, 10);
        if (alldaoret.Successful())
        {
            alldaos = alldaoret.GetBlocks().Cast<IDao>().ToList();
        }

        if (walletState.Value.wallet == null)
            return;
        var brkblksret = await walletState.Value.wallet.RPC.GetAllBrokerAccountsForOwnerAsync(walletState.Value.wallet.AccountId);
        mydaos = brkblksret.GetBlocks().Where(a => a is DaoGenesisBlock).Cast<IDao>().ToList();
    }

    async Task Back2(string buttonName)
    {
        Navigation.NavigateTo("/dao");
    }
}
