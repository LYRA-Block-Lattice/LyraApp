@page "/dao/detail/{daoid}"

@using Fluxor
@using Fluxor.Blazor.Web.Components
@using Lyra.Data.Crypto
@using Lyra.Data.Shared
@using Nebula.Store.WebWalletUseCase
@using Microsoft.Extensions.Configuration
@using Lyra.Data.API.WorkFlow
@using UserLibrary.Data
@inherits BasicPage

@if (loading)
{
    <div style="z-index: 5;" class="spinner"></div>
}
else
{
    <div class="mag cet fb">

        <h1>@dao.Name</h1>
        <div>
            @dao.Description
        </div>
        <div>
            Owner: @dao.OwnerAccountId.Shorten()
        </div>
        <div>
            Profit Share Ratio: @(dao.ShareRito * 100) %
        </div>
        <div>
            Seats: @dao.Treasure.Count / @dao.Seats
        </div>
        <div>
            Seller Fee Ratio: @(dao.SellerFeeRatio*100m) %
        </div>
        <div>
            Buyer Fee Ratio: @(dao.BuyerFeeRatio*100m) %
        </div>
        <div>
            Seller collateral Ratio: @dao.SellerPar %
        </div>
        <div>
            Buyer collateral Ratio: @dao.BuyerPar %
        </div>

        @if (walletState.Value.wallet == null)
        {
            <a href="/wallet"><MudButton Variant="Variant.Filled" Color="Color.Primary">Open Wallet to do more</MudButton></a>
            <br />
        }
        else
        {
            <div>
                <br />
                @if (dao.Treasure.ContainsKey(walletState.Value.wallet.AccountId))
                {
                    <RadzenButton Text="Join or Leave" ButtonStyle="ButtonStyle.Primary"
                         Click="@(a => Navigation.NavigateTo($"/dao/invest/{(dao as TransactionBlock).AccountID}"))"
                   />
                }
                else
                {
                    <RadzenButton Text="Join or Leave" ButtonStyle="ButtonStyle.Primary"
                        Click="@(a => Navigation.NavigateTo($"/dao/invest/{(dao as TransactionBlock).AccountID}"))"
                    />
                }

            </div>
            <br />
            @if (dao.OwnerAccountId == walletState.Value.wallet.AccountId)
            {
                <a href="/dao/createvote/@((dao as TransactionBlock).AccountID)">
                    <RadzenButton Text="Create Vote" ButtonStyle="ButtonStyle.Primary" />
                </a>
                <a href="/dao/modify/@((dao as TransactionBlock).AccountID)">
                    <RadzenButton Text="Modify DAO Settings" ButtonStyle="ButtonStyle.Secondary" />
                </a>
            }
        }
        <hr />
        <div>
            <h3>Votes</h3>
            @foreach(var vt in votings)
            {
                <div>
                    <a href="/dao/vote/@((vt as TransactionBlock).AccountID)">@vt.Subject.Title</a>
                </div>
            }
        </div>
        <hr />
        <div>
            <h3>Opening Disputes</h3>
            @foreach(var disp in disps)
            {
                <div>
                    <a href="/dealer/complaint/@((disp as TransactionBlock).AccountID)">@((disp as TransactionBlock).AccountID)</a>
                </div>
            }
        </div>
        <div>
            <h3>Closed Disputes</h3>
            @foreach(var disp in dispcls)
            {
                <div>
                    <a href="/dealer/complaint/@((disp as TransactionBlock).AccountID)">@((disp as TransactionBlock).AccountID)</a>
                </div>
            }
        </div>

    </div>
}




@code {
    [Parameter]
    public string daoid { get; set; }

    [Inject] DealerConnMgr connMgr { get; set; }

    public override string DaoId => daoid;
    public override string Title => "DAO Details";

    List<IVoting> votings = new List<IVoting>();
    List<IOtcTrade> disps = new List<IOtcTrade>();
    List<IOtcTrade> dispcls = new List<IOtcTrade>();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender)
        {
            // get all votes
            var allvotret = await lyraApi.FindAllVotesByDaoAsync(DaoId, false);
            if (allvotret.Successful())
            {
                votings = allvotret.GetBlocks().Cast<IVoting>().ToList();
            }

            // get all disputes
            var alldispret = await lyraApi.FindOtcTradeByStatusAsync(DaoId, OTCTradeStatus.Dispute, 0, 10);
            if(alldispret.Successful())
            {
                disps = alldispret.GetBlocks().Cast<IOtcTrade>().ToList();
            }

            var alldispret2 = await lyraApi.FindOtcTradeByStatusAsync(DaoId, OTCTradeStatus.DisputeClosed, 0, 10);
            if(alldispret2.Successful())
            {
                dispcls = alldispret2.GetBlocks().Cast<IOtcTrade>().ToList();
            }
        }
        await base.OnAfterRenderAsync(firstRender);
    }
}
