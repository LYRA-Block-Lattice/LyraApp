@page "/dao/new"

@using Fluxor
@using Fluxor.Blazor.Web.Components
@using Lyra.Data.Crypto
@using Nebula.Store.WebWalletUseCase
@using Microsoft.Extensions.Configuration
@using Lyra.Data.API.WorkFlow
@using UserLibrary.Data
@using UserLibrary.Store.NotificationUseCase
@inherits FluxorComponent

<div class="mag cet">

    <MudGrid>
        <MudItem xs="12">
            <h1>Create Orgnization</h1>
        </MudItem>
        <MudItem xs="12">
            <RadzenTextBox @bind-Value=@name Placeholder="Name" Class="w-100" />
        </MudItem>
        <MudItem xs="12">
            <RadzenTextArea @bind-Value=@desc Placeholder="Orgnization description..." Class="w-100" />
        </MudItem>
        <MudItem xs="12">
            Ratio to share to staking (0% - 100%):
            <RadzenNumeric @bind-Value="@pftShare" /> %
        </MudItem>
        <MudItem xs="12">
            Number of staking (0 - 100):
            <RadzenNumeric @bind-Value="@pftSeats" />
        </MudItem>
        <MudItem xs="12">
            Seller Fee Ratio <br />
            <RadzenNumeric TValue="decimal" @bind-Value=@sellerFee /> %
        </MudItem>
        <MudItem xs="12">
            Buyer Fee Ratio <br />
            <RadzenNumeric TValue="decimal" @bind-Value=@buyerFee /> %
        </MudItem>
        <MudItem xs="12">
            Seller Collateral Percentage <br />
            <RadzenNumeric TValue="int" @bind-Value=@sellerPar /> %
        </MudItem>
        <MudItem xs="12">
            Buyer Collateral Percentage <br />
            <RadzenNumeric TValue="int" @bind-Value=@buyerPar /> %
        </MudItem>
        <MudItem xs="12">
            @if (walletState.Value.IsOpening)
            {
                <RadzenButton IsBusy=@busy Click=@(args => OnClick("adddao")) Text="Add New" Icon="add_circle_outline" ButtonStyle="ButtonStyle.Primary" />
            }
            else

            {
                <a href="/wallet"><MudButton Variant="Variant.Filled" Color="Color.Primary">Open wallet to create DAO</MudButton></a>
            }
        </MudItem>
    </MudGrid>

</div>


@code {
    [Inject]
    private IState<WebWalletState> walletState { get; set; }

    [Inject]
    private IDispatcher Dispatcher { get; set; }

    [Inject]
    IConfiguration Configuration { get; set; }

    [Inject] ISnackbar Snackbar { get; set; }
    [Inject] NavigationManager Navigation { get; set; }
    [Inject] ILyraAPI lyraApi { get; set; }

    List<IOtcOrder> tradableOrders;
    List<IDao> alldaos = new List<IDao>();
    List<IDao> daos = new List<IDao>();

    public string pftShare { get; set; }
    public string pftSeats { get; set; }

    decimal sellerFee, buyerFee;

    string keywords;

    string name, desc;
    int sellerPar, buyerPar;
    bool busy;

    List<IDao> mydaos;
    bool dir;
    string total;
    List<Ticker> tickers;
    List<string> fiats = new List<string>
    {
        "USD", "EUR", "JPY", "CNY", "CHF"
    };
    List<string> odrtyps = new List<string>
    {
        "Fixed price", "Floating price"
    };
    List<string> paymentMethods = new List<string>
    {
        "Paypal", "Bank Transfer", "Alipay", "Wechat Pay"
    };

    IEnumerable<string> paymths = new string[0];

    Ticker selcrypto;
    string seldaoname, selfiat = "USD", selodrtyp = "Fixed price";
    decimal selprice, selqty, cltlyr, paymin, paymax;
    decimal selcryptoprice;

    decimal coltworth;
    string coltrito;

    protected override Task OnInitializedAsync()
    {
        SubscribeToAction<ContractChangeEvent>(async cce =>
            {
                await GetMyDaos();
                await InvokeAsync(() => StateHasChanged());
            });

        return base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            Dispatcher.Dispatch(new WebWalletChangeTitleAction
                {
                    title = "Create new Lyra DAO",
                });
        }

        await base.OnAfterRenderAsync(firstRender);
    }


    async Task GetMyDaos()
    {
        var alldaoret = await lyraApi.GetAllDaosAsync(0, 10);
        if (alldaoret.Successful())
        {
            alldaos = alldaoret.GetBlocks().Cast<IDao>().ToList();
        }

        if (walletState.Value.wallet == null)
            return;
        var brkblksret = await walletState.Value.wallet.RPC.GetAllBrokerAccountsForOwnerAsync(walletState.Value.wallet.AccountId);
        mydaos = brkblksret.GetBlocks().Where(a => a is DaoGenesisBlock).Cast<IDao>().ToList();
    }

    async Task OnClick(string buttonName)
    {
        busy = true;

        Snackbar.Add("Creating orgnization...", Severity.Info);

        try
        {
            var dcret = await walletState.Value.wallet.CreateDAOAsync(name, desc, decimal.Parse(pftShare) / 100m, 
                Math.Round(sellerFee / 100m, 8), Math.Round(buyerFee / 100m, 8), 
                int.Parse(pftSeats), sellerPar, buyerPar);
            if (dcret.Successful())
            {
                Snackbar.Add($"Orgnization {name} created successfully.", Severity.Success);
                await GetMyDaos();
            }
            else
            {
                Snackbar.Add($"Failed to create orgnization: {dcret.ResultCode.Humanize()}", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Failed to create orgnization: {ex.Message}", Severity.Error);
        }

        busy = false;

    }

    async Task Back(string buttonName)
    {
        Navigation.NavigateTo("/dao");
    }
}
