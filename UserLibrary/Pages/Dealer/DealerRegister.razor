@page "/dealer/register/{dealerid}"
@using Fluxor
@using Lyra.Data.API.Identity
@using Lyra.Data.API.WorkFlow
@using Lyra.Data.Crypto
@using Microsoft.Extensions.Configuration
@using UserLibrary.Data
@using Nebula.Store.WebWalletUseCase
@inject NavigationManager NavigationManager

<PageTitle>Register to dealer</PageTitle>

<div class="mag">
    <div style="height: 300px; background: #ECEFF1; ">
        <div style="padding: 25px;">
            <div style="width: 100%; height: 100px; display: flex">
                <h1 style="align-self: flex-end; font-size:40px;">Register to dealer</h1>
            </div>
            <div style="width: 100%;">
                Register to dealer and get notified on various event in realtime.
            </div>
            <div style="width: 100%; padding-top: 10px; padding-bottom: 10px;">
                <MudDivider />
            </div>
            <div style="width: 100%; font-size: x-small;">
                Note: Private information only used for communication between buyer and sellers, and by arbitration when necessary.
            </div>
        </div>
    </div>
    <div style="height:50px;" />
    <div>
        @if (walletState.Value.wallet == null)
        {
            <div>
                <a href="/login">
                    <MudButton Variant="MudBlazor.Variant.Filled" FullWidth="true" Color="Color.Primary" class="rounded-pill">
                        <MudIcon Icon="@Icons.Filled.LockOpen" />
                        Open Wallet
                    </MudButton>
                </a>
            </div>
        }
        else
        {
            <p>                
                @if (dlr != null)
                {
                    <h3>@dlr.Name</h3>
                    <div style="font-size:x-small;">@dlr.TimeStamp</div>
                    <br />
                    <div>@dlr.Description</div>                   

                    <br />

                    <br />
                }
            </p>
            <p></p>
            <p>
                <h3>Lyra User Name</h3>
                <MudTextField @bind-Value="@username" Label="" />
            </p>
            <div style="height:45px;" />
            <p>
                <h3>First Name</h3>
                <MudTextField @bind-Value="@firstname" Label="" />
            </p>
            <div style="height:45px;" />
            <p>
                <h3>Middle Name</h3>
                <MudTextField @bind-Value="@middlename" Label="" />
            </p>
            <p>
                <h3>Last Name</h3>
                <MudTextField @bind-Value="@lastname" Label="" />
            </p>
            <div style="height:45px;" />
            <p>
                <h3>Email</h3>
                <MudTextField @bind-Value="@email" Label="" />
            </p>
            <div style="height:45px;" />
            <p>
                <h3>Mobile Phone</h3>
                <MudTextField @bind-Value="@mobilephone" Label="" />
            </p>
            <div style="height:45px;" />
            <p>
                <h3>Avatar</h3>
                <MudTextField @bind-Value="@avatar" Label="" />
            </p>
            <div style="height:45px;" />
            <p>
                <h3>Telegram ID</h3>
                <MudTextField @bind-Value="@telegramId" Label="" />
                Note: Please send a message to <a target="_blank" href="https://t.me/@dealerbot">https://t.me/@dealerbot</a> to activate.
            </p>
            <div style="height:45px;" />

            <div style="height:45px;" />
            <p>
                @if (walletState.Value.wallet == null)
                {
                    <a href="wallet"><MudButton Variant="MudBlazor.Variant.Filled" FullWidth="true" Color="Color.Primary">Open wallet to create token</MudButton></a>
                }
                else
                {
                    <RadzenButton style="width: 160px" IsBusy=@busy Click=@OnRegister Text="Register" />
                }

            </p>

            @if (success)
            {
                <p>
                    Success!
                </p>
            }
        }
    </div>
</div>

@code {

    [Parameter] public string dealerid { get; set; }
    [Inject]
    IConfiguration Configuration { get; set; }

    [Inject]
    private IState<WebWalletState> walletState { get; set; }

    [Inject] IDispatcher Dispatcher { get; set; }
    [Inject] ISnackbar Snackbar { get; set; }
    [Inject] ILyraAPI lyraApi { get; set; }
    [Inject] NebulaConsts _consts { get; set; }
    [Inject] DealerConnMgr connMgr { get; set; }

    string username, firstname, middlename, lastname, email, mobilephone, avatar, telegramId;
    bool busy, success;
    string dealerbot;

    IDealer dlr;
    LyraUser user;
    string btnText = "Register to Dealer";

    protected override void OnInitialized()
    {
        Dispatcher.Dispatch(new WebWalletChangeTitleAction { title = "Register to dealer" });
        base.OnInitialized();
    }

    // load user if any
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && walletState.Value.IsOpening)
        {
            try
            {
                var lsb = await lyraApi.GetLastServiceBlockAsync();
                if (!lsb.Successful())
                {
                    Snackbar.Add($"Failed to get network status: {lsb.ResultCode}. Please retry later.", Severity.Warning);
                    return;
                }

                var dealer = connMgr.GetDealer(dealerid);

                user = await dealer.GetUserDetailsByAccountIdAsync(walletState.Value.wallet.AccountId,
                    Signatures.GetSignature(walletState.Value.wallet.PrivateKey, (lsb.GetBlock().Hash), walletState.Value.wallet.AccountId));

                if (user != null)
                {
                    username = user.UserName;
                    firstname = user.FirstName;
                    middlename = user.MiddleName;
                    lastname = user.LastName;
                    email = user.Email;
                    mobilephone = user.MobilePhone;
                    avatar = user.AvatarId;
                    telegramId = user.TelegramID;
                    if (telegramId == null)
                        telegramId = "@";
                    else if (!telegramId.StartsWith("@"))
                        telegramId = "@" + telegramId;

                    btnText = "Update my profile";
                }
                else
                    btnText = "Register to Dealer";

                var brief = await dealer.GetBriefAsync();
                dealerbot = brief.TelegramBotUsername;

                // get dealers
                var dlret = await lyraApi.GetLastBlockAsync(dealerid);
                if (dlret.Successful())
                {
                    dlr = dlret.As<IDealer>();
                }
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Failed to status: {ex.Message}. Please check network connect.", Severity.Warning);
            }

            StateHasChanged();
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    async Task OnRegister()
    {
        busy = true;

        try
        {
            var lsb = await lyraApi.GetLastServiceBlockAsync();
            if (!lsb.Successful())
            {
                Snackbar.Add($"Failed to get network status: {lsb.ResultCode}. Please retry later.", Severity.Warning);
                return;
            }

            if (telegramId != null && !telegramId.StartsWith("@"))
                telegramId = "@" + telegramId;

            var dealer = connMgr.GetDealer(dealerid);
            var ret = await dealer.RegisterAsync(walletState.Value.wallet.AccountId,
                username, firstname, middlename, lastname, email, mobilephone, avatar, telegramId,
                Signatures.GetSignature(walletState.Value.wallet.PrivateKey, (lsb.GetBlock().Hash), walletState.Value.wallet.AccountId)
            );
            success = ret.Successful();

            if (!success)
            {
                Snackbar.Add($"Failed to register: {ret.ResultCode.Humanize()}", Severity.Warning);
            }
            else
            {
                Snackbar.Add($"User {username} registered.", Severity.Success);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Failed to register: {ex.Message}", Severity.Error);
        }


        busy = false;
    }
}
