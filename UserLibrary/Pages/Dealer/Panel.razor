@page "/dealer/panel"
@using Blazored.LocalStorage
@using Fluxor
@using Lyra.Data.API.WorkFlow
@using Nebula.Store.WebWalletUseCase
@using Newtonsoft.Json
@using UserLibrary.Data

<PageTitle>Dealer Panel</PageTitle>

<div class="mag">
    <MudRadioGroup @bind-SelectedOption="selPriceFeedID">   
    <h1>Public Trusted Dealers</h1>    
    <table id="dealers">
        <thead>
            <tr>
                <td>Dealer</td>
                <td>Trust for Price Feeding</td>
                <td>Trust for Messanging</td>
            </tr>
        </thead>
        <tbody>
            @foreach(var dlr in publicDealers)
            {
                <tr>
                    <td>
                        <a href="/dealer/register/@dlr.AccountId">
                        <h3>@dlr.Name</h3><br />
                        <div>@dlr.Desc</div>   
                        <br />
                        <div style="font-size:small;">Since: @dlr.Time</div></a>
                    </td>
                    <td>
                        <MudRadio Option="@(dlr.AccountId)" Color="Color.Primary"></MudRadio>
                    </td>
                    <td>
                        <MudCheckBox @bind-Checked="@(dlr.Messaging)" Color="Color.Primary"></MudCheckBox>
                    </td>
                </tr>

            }
        </tbody>

    </table>
    <br />
    <h1>My Trusted Dealers</h1>
        <table id="dealers">
        <thead>
            <tr>
                <td>Dealer</td>
                <td>Trust for Price Feeding</td>
                <td>Trust for Messanging</td>
            </tr>
        </thead>
        <tbody>
            @foreach(var dlr in privateDealers)
            {
                <tr>
                    <td>
                        <a href="/dealer/register/@dlr.AccountId">
                        <h3>@dlr.Name</h3><br />
                        <div>@dlr.Desc</div>   
                        <br />
                        <div style="font-size:small;">Since: @dlr.Time</div></a>
                    </td>
                    <td>
                        <MudRadio Option="@(dlr.AccountId)" Color="Color.Primary"></MudRadio>
                    </td>
                    <td>
                        <MudCheckBox @bind-Checked="@(dlr.Messaging)" Color="Color.Primary"></MudCheckBox>
                    </td>
                </tr>

            }
        </tbody>
    </table>

    <div>
        <p>
            <MudTextField Label="Add private trusted Dealer ID" @bind-Value="@addDealerID" /> <br />
            <MudButton Variant="Variant.Filled" Color="Color.Secondary" @onclick="AddDealer">Add Dealer</MudButton>
        </p>
    </div>
    </MudRadioGroup>
    <br />
    <MudButton Variant="Variant.Filled" Color="Color.Primary" @onclick="Save">Save</MudButton>
</div>

@code {
    [Inject] IDispatcher Dispatcher { get; set; }
    [Inject] ISnackbar Snackbar { get; set; }
    [Inject] ILyraAPI lyraApi { get; set; }
    [Inject] DealerClient dealerApi { get; set; }
    [Inject] NebulaConsts _consts { get; set; }
    [Inject] ILocalStorageService localStorage { get; set; }

    private class DealerDesc
    {
        public string AccountId { get; set; }
        public string Name { get; set; }
        public string Desc { get; set; }
        public DateTime Time { get; set; }
        public bool Messaging { get; set; }
    }

    PreferenceContainer pc;

    List<DealerDesc> publicDealers = new List<DealerDesc>();
    List<DealerDesc> privateDealers = new List<DealerDesc>();
    string selPriceFeedID;

    string addDealerID { get; set; }

    protected override void OnInitialized()
    {
        Dispatcher.Dispatch(new WebWalletChangeTitleAction { title = "Dealer Panel" });
        base.OnInitialized();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender)
        {
            var storStr = await localStorage.GetItemAsync<string>(_consts.PrefStorName) ?? "{}";
            pc = JsonConvert.DeserializeObject<PreferenceContainer>(storStr);

            // get dealers
            foreach (var tdid in _consts.TrustedDealerIds)
            {
                var dlret = await lyraApi.GetLastBlockAsync(tdid);
                if (dlret.Successful())
                {
                    var d = dlret.As<IDealer>();
                    publicDealers.Add(
                        new DealerDesc
                            {
                                AccountId = d.AccountID,
                                Name = d.Name,
                                Desc = d.Description,
                                Time = d.TimeStamp,
                            }
                    );
                }
            }

            // private trusted dealers
            if(pc.PrivateTrustedDealerIDs != null)
            {
                foreach (var tdid in pc.PrivateTrustedDealerIDs)
                {
                    var dlret = await lyraApi.GetLastBlockAsync(tdid);
                    if (dlret.Successful())
                    {
                        var d = dlret.As<IDealer>();
                        privateDealers.Add(
                            new DealerDesc
                                {
                                    AccountId = d.AccountID,
                                    Name = d.Name,
                                    Desc = d.Description,
                                    Time = d.TimeStamp,
                                }
                        );
                    }
                }
            }

            selPriceFeedID = pc.PriceFeedingDealerID ?? publicDealers.First().AccountId;

            if(pc.PublicTrustedDealerIDs == null && pc.PrivateTrustedDealerIDs == null)
                publicDealers.First().Messaging = true;
            else
            {
                if(pc.PublicTrustedDealerIDs != null)
                    foreach(var ptd in pc.PublicTrustedDealerIDs)
                    {
                        var x = publicDealers.FirstOrDefault(a => a.AccountId == ptd);
                        if (x != null)
                            x.Messaging = true;
                    }

                if(pc.PrivateTrustedDealerIDs != null)
                    foreach(var ptd in pc.PrivateTrustedDealerIDs)
                    {
                        var x = privateDealers.FirstOrDefault(a => a.AccountId == ptd);
                        if (x != null)
                            x.Messaging = true;
                    }
            }

            StateHasChanged();
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task Save(MouseEventArgs e)
    {
        pc.PriceFeedingDealerID = selPriceFeedID;
        pc.PublicTrustedDealerIDs = publicDealers.Where(a => a.Messaging).Select(a => a.AccountId).ToList();
        pc.PrivateTrustedDealerIDs = privateDealers.Where(a => a.Messaging).Select(a => a.AccountId).ToList();
        await localStorage.SetItemAsStringAsync(_consts.PrefStorName, JsonConvert.SerializeObject(pc));

        Snackbar.Add($"Preference Saved.", Severity.Info);
    }

    private async Task AddDealer(MouseEventArgs e)
    {
        if(string.IsNullOrWhiteSpace(addDealerID))
        {
            Snackbar.Add($"Please specify a dealer ID.", Severity.Warning);
            return;
        }

        var dlret = await lyraApi.GetLastBlockAsync(addDealerID);
        if (dlret.Successful())
        {
            var d = dlret.As<IDealer>();
            privateDealers.Add(
                new DealerDesc
                    {
                        AccountId = d.AccountID,
                        Name = d.Name,
                        Desc = d.Description,
                        Time = d.TimeStamp,
                    }
            );

            StateHasChanged();

            Snackbar.Add($"Add private trusted dealer: {addDealerID}", Severity.Info);
        }
        else
        {
            Snackbar.Add($"Failed to private trusted dealer: {dlret.ResultCode.Humanize()}", Severity.Warning);
        }
    }
}
