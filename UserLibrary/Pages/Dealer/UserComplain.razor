@page "/dealer/newcomplain/{tradeid}"
@using Lyra.Data.API.Identity
@using Lyra.Data.API.WorkFlow
@using Lyra.Data.Crypto
@using Lyra.Data.Shared
@using Fluxor
@using Nebula.Store.WebWalletUseCase

@if(brief == null)
{
    <MudProgressCircular Color="Color.Primary" Style="height:70px;width:70px;" Indeterminate="true" />
}
else
{
<div class="mag fh">
    <RadzenTemplateForm TItem="Model" Data=@model Submit=@OnSubmit InvalidSubmit=@OnInvalidSubmit>

        <h2>Create a complain</h2>
        <br />
        <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">About trade: </RadzenText>
        <RadzenLink Path="http://a" Text="@tradeid.Shorten()" />

        <br />
            <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">The complaint will be resolved by: @nextLevel</RadzenText>

        <br />
        <br />
        <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Payment state: </RadzenText>
            <RadzenRadioButtonList @bind-Value="@model.fiatState" Name="fiatState" TValue="ComplaintFiatStates">
            <Items>
                    @if (myrole == ComplaintByRole.Buyer)
                    {
                        <RadzenRadioButtonListItem Text="I have paid to seller" Value="ComplaintFiatStates.SelfPaid" />
                        <RadzenRadioButtonListItem Text="I did not pay" Value="ComplaintFiatStates.SelfUnpaid" />
                    }
                    else
                    {
                        <RadzenRadioButtonListItem Text="I have got fiat paid" Value="ComplaintFiatStates.PeerPaid" />
                        <RadzenRadioButtonListItem Text="I havn't got fiat paid" Value="ComplaintFiatStates.PeerUnpaid" />
                    }
            </Items>
        </RadzenRadioButtonList>
@*        <RadzenRequiredValidator Component="fiatState" Text="Fiat payment state is required" Popup=@popup Style="position: absolute" />
*@
        <br />
        <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">I want to: </RadzenText>
        <RadzenRadioButtonList @bind-Value="@model.purpose" Name="purpose" TValue="int" Change=@((args) => OnChange(args, "RadioButtonList with horizontal orientation"))>
            <Items>
                <RadzenRadioButtonListItem Text="Continue trade" Value="1" />
                <RadzenRadioButtonListItem Text="Close trade" Value="2" />
            </Items>
        </RadzenRadioButtonList>
        <RadzenRequiredValidator Component="purpose" Text="Your purpose is required" Popup=@popup Style="position: absolute" />

        <br />

        <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">My statement (Optional): </RadzenText>
        <RadzenTextArea @bind-Value="@model.statement" Cols="50" Rows="3" Placeholder="Enter here..." Change=@(args => OnChange(args, "TextArea")) Class="w-100" />

        <br />

        <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Attachments (Optional): </RadzenText>
        <InputFile id="fileInput112" OnChange="UploadFiles" hidden multiple accept=".jpg, .jpeg, .png" />
        <MudButton HtmlTag="label"
                   Variant="MudBlazor.Variant.Filled"
                   StartIcon="@Icons.Filled.Image"
                   for="fileInput112">
            Send images
        </MudButton>

        <br />
        <br />

        <RadzenCheckBox @bind-Value="@model.chkAgree" Name="chkAgree" TValue="bool" Change=@(args => OnChange(args, "CheckBox1 CheckBox")) />
        <RadzenLabel Text="I confirm the information here can be used as proof for future arbitration. " Component="chkAgree" Style="margin-left: 8px; vertical-align: middle;" />
        <RadzenCompareValidator Text="Need to agree before submit" Value=@true Component="chkAgree" Popup=@popup Style="position: absolute" Operator=@compareOperator />
        <br />
        <br />
        <RadzenButton ButtonType="Radzen.ButtonType.Submit" Text="Submit"></RadzenButton>
        &nbsp;&nbsp;

            <RadzenButton Text="Go back" Click="@(() => JSRuntime.InvokeVoidAsync("history.back"))"></RadzenButton>
    </RadzenTemplateForm>
</div>
}

@code {
    [Parameter]
    public string? tradeid { get; set; }

    [Inject]
    private IState<WebWalletState> walletState { get; set; }

    [Inject] ILyraAPI lyraApi { get; set; }
    [Inject] DealerConnMgr connMgr { get; set; }
    [Inject] ISnackbar Snackbar { get; set; }
    [Inject] IJSRuntime JSRuntime { get; set; }

    bool popup = false;
    CompareOperator compareOperator = CompareOperator.Equal;
    Model model = new Model();

    IOtcTrade trade;
    TradeBrief brief;
    ComplaintByRole myrole;

    DisputeLevels nextLevel => (DisputeLevels)((int)brief.DisputeLevel + 1);

    class Model
    {
        public ComplaintFiatStates fiatState { get; set; }
        public int purpose { get; set; }
        public string statement { get; set; } = "";
        public bool chkAgree { get; set; }
    }

    private async Task UploadFiles(InputFileChangeEventArgs e)
    {

    }
    void OnClick(string buttonName)
    {
        //console.Log($"{buttonName} clicked");
    }
    void OnChange(int? value, string name)
    {
        //console.Log($"{name} value changed to {value}");
    }
    void OnChange(bool value, string name)
    {
        //console.Log($"{name} value changed to {value}");
    }
    void OnChange(string value, string name)
    {
        //console.Log($"{name} value changed to {value}");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender)
        {
            var tradeblk = await lyraApi.GetLastBlockAsync(tradeid);
            trade = tradeblk.As<IOtcTrade>();

            if (trade.Trade.dir == TradeDirection.Buy && walletState.Value.wallet.AccountId == trade.OwnerAccountId)
                myrole = ComplaintByRole.Buyer;
            else
                myrole = ComplaintByRole.Seller;

            model = new Model
                {
                    fiatState = myrole == ComplaintByRole.Buyer ? ComplaintFiatStates.SelfUnpaid : ComplaintFiatStates.PeerUnpaid
                };

            brief = await GetBrief();
            StateHasChanged();
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task<TradeBrief> GetBrief()
    {
        var lsb = await lyraApi.GetLastServiceBlockAsync();
        var briefret = await connMgr.GetDealer(trade.Trade.dealerId).GetTradeBriefAsync(tradeid, walletState.Value.wallet.AccountId,
            Signatures.GetSignature(walletState.Value.wallet.PrivateKey, lsb.GetBlock().Hash, walletState.Value.wallet.AccountId));
        var brief = briefret.Deserialize<TradeBrief>();
        return brief;
    }

    async Task OnSubmit(Model model)
    {
        var cfg = new ComplaintClaim
            {
                created = DateTime.UtcNow,

                ownerId = walletState.Value.wallet.AccountId,
                tradeId = tradeid,
                level = nextLevel,
                role = myrole,

                fiatState = model.fiatState,
                request = model.purpose == 1 ? ComplaintRequest.ContinueTrade : ComplaintRequest.CancelTrade,

                statement = model.statement,
                imageHashes = null,
            };

        cfg.Sign(walletState.Value.wallet.PrivateKey, walletState.Value.wallet.AccountId);

        var ret = await connMgr.GetDealer(trade.Trade.dealerId).ComplainAsync(cfg);

        if (ret.Successful())
        {
            Snackbar.Add($"Complaint submited. Return to view.", Severity.Info);
        }
        else
        {
            Snackbar.Add($"Failed to complain: {ret.ResultCode}. Message: {ret.ResultMessage}", Severity.Error);
        }
    }

    void OnInvalidSubmit(FormInvalidSubmitEventArgs args)
    {
        //Log("InvalidSubmit", JsonSerializer.Serialize(args, new JsonSerializerOptions() { WriteIndented = true }));
    }
}
