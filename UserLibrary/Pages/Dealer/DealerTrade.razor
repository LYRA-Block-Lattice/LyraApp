@page "/dealer/trade/{accountId}"
@using Fluxor
@using Fluxor.Blazor.Web.Components
@using Lyra.Data.API.WorkFlow
@using Microsoft.Extensions.Configuration
@using UserLibrary.Data
@using Nebula.Store.WebWalletUseCase
@inherits FluxorComponent
@inject NavigationManager NavigationManager

<div>
    @if(otc == null)
    {
        <p>No such order!</p>
    }
    else
    {

    <div style="height: 150px; background: #ECEFF1; ">
        <div style="padding: 25px;">
            <div style="width: 100%; height: 100px; vertical-align: middle; ">
                <h1 style="align-self: flex-end; font-size:40px;">@(otc.Order.dir == TradeDirection.Sell ? "Buy" : "Sell") @otc.Order.crypto</h1>
                <MudDivider />
                <div class="market">
                Buying Price: @otc.Order.price @otc.Order.fiat
                </div>
                <div class="market">
                Market Price: @marketprice @otc.Order.fiat
                </div>
            </div>
        </div>
    </div>
    <div style="height:50px;" />
    <div class="mag">


        <div>
            <h3>You will pay</h3>
            <div class="ipt">
                <MudNumericField @bind-Value="@pay" DebounceInterval="500" OnDebounceIntervalElapsed="calc"  Label="@("Fiat " + otc.Order.fiat)" Variant="Variant.Outlined"  />
                Limitation: @otc.Order.limitMin @otc.Order.fiat - @otc.Order.limitMax @otc.Order.fiat
            </div>
        </div>
        <div style="height:45px;" />
        <div>
            <h3>Via</h3>
                                <RadzenDropDown AllowClear="false" TValue="string" Class="w-100"
                                    @bind-Value=@method
                                    Data=@otc.Order.payBy />
        </div>
        <div style="height:45px;" />
        <div>
            <h3>Collateral</h3>
            <MudNumericField @bind-Value="@cltlyr" DebounceInterval="500" OnDebounceIntervalElapsed="calc2" 
                Label="In LYR" Variant="Variant.Outlined"  />
            <div> Equivalent @(Math.Round(lyraprice * cltlyr / MarketPrices[otc.Order.fiat.ToLower()], 2)) @otc.Order.fiat</div>
            Ratio of collateral: @coltrito <br />
            Minimum ratio required by DAO: @dao.BuyerPar % <br />
            Current Balance: @walletState.Value.wallet.BaseBalance LYR </div>
        <div style="height:45px;" />
        <div>
            <h3>You will get</h3>
            <div class="getmnt">@got @otc.Order.crypto</div>
        </div>
        <div style="height:45px;" />
        <div>
            <h3>Your trade is guaranteed by max to</h3>
            <div class="getmnt">Seller Collateral: @otc.Order.collateral LYR</div>
            <div> Equivalent @(Math.Round(lyraprice * otc.Order.collateral / MarketPrices[otc.Order.fiat.ToLower()], 2)) @otc.Order.fiat</div>
        </div>
        <div style="height:45px;" />
        <div>
            @if (walletState.Value.wallet == null)
            {
                <a href="wallet"><MudButton Variant="Variant.Filled" FullWidth="true" Color="Color.Primary">Open wallet to create token</MudButton></a>
            }
            else
            {
                <RadzenButton style="width: 160px" IsBusy=@busy Click=@OnDeal Text="@(otc.Order.dir == TradeDirection.Sell ? "Buy" : "Sell")" />
            }

        </div>
    </div>

        @if (success)
        {
            <p>
                <a href="dao">Back to DAO</a>
            </p>
        }

    }

    
</div>

@code {
    [Parameter]
    public string? accountId { get; set; }

    [Inject]
    IConfiguration Configuration { get; set; }

    [Inject]
    private IState<WebWalletState> walletState { get; set; }

    [Inject] ISnackbar Snackbar { get; set; }
    [Inject] NavigationManager Navigation { get; set; }

    IOtcOrder otc;
    string method;
    decimal pay, got;
    bool busy, success;
    decimal marketprice, marketpriceusd;
    decimal cltlyr, lyraprice;
    string coltrito;

    Dictionary<string, decimal> MarketPrices;

    IDao dao;

    protected override async Task OnInitializedAsync()
    {
        SubscribeToAction<RespQuote>(async e =>
        {
            MarketPrices = e.Prices;
            PriceChanged();
            await InvokeAsync(StateHasChanged);
        });  

        await base.OnInitializedAsync();
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender)
        {
            var lstret = await walletState.Value.wallet.RPC.GetLastBlockAsync(accountId);
            if (lstret.Successful())
            {
                otc = lstret.GetBlock() as IOtcOrder;
                method = otc.Order.payBy.First();

                var daoret = await walletState.Value.wallet.RPC.GetLastBlockAsync(otc.Order.daoId);
                dao = daoret.GetBlock() as IDao;
            }

            //check if user has been registed on dealer server
            var client = new DealerClient(Configuration["network"]);
            var user = await client.GetUserByAccountIdAsync(walletState.Value.wallet.AccountId);
            if (!user.Successful())
            {
                // register user
                Navigation.NavigateTo("/dealer/register");
            }
            else
            {
                // fetch init prices
                MarketPrices = await client.GetPricesAsync();
                PriceChanged();
            }

            StateHasChanged();
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    private void PriceChanged()
    {
        marketpriceusd = 0;
        if (otc.Order.crypto.EndsWith("ETH")) marketpriceusd = MarketPrices["ETH"];
        if (otc.Order.crypto.EndsWith("BTC")) marketpriceusd = MarketPrices["BTC"];
        if (otc.Order.crypto.EndsWith("USDT")) marketpriceusd = MarketPrices["USDT"];

        lyraprice = MarketPrices["LYR"];

        marketprice = Math.Round(marketpriceusd / MarketPrices[otc.Order.fiat.ToLower()], 2);
    }

    private void CalCollat()
    {
        var valinfiat = lyraprice * cltlyr / MarketPrices[otc.Order.fiat.ToLower()];
        var buytotal = pay;

        coltrito = $"{(valinfiat / buytotal) * 100:N2} %";
    }

    void calc()
    {
        got = Math.Round(pay / otc.Order.price, 8);
        calc2();
    }

    void calc2()
    {
        CalCollat();
    }

    async Task OnDeal()
    {
        if(got > otc.Order.amount || got <= 0)
        {
            Snackbar.Add($"Amount not right. (between a and b)", Severity.Error);
            return;
        }

        busy = true;

        var daoret3 = await walletState.Value.wallet.RPC.GetLastBlockAsync(otc.Order.daoId);
        var daot = daoret3.GetBlock() as TransactionBlock;

        var dealer = new DealerClient(Configuration["network"]);
        var prices = await dealer.GetPricesAsync();
        var tokenSymbol = otc.Order.crypto.Split('/')[1];
        var neededLyr = Math.Round(prices[tokenSymbol] * got * ((daot as IDao).BuyerPar / 100) / prices["LYR"] * 1.03m);

            if (cltlyr < neededLyr)
            {
                Snackbar.Add($"Not enough collateral. Need > {neededLyr} LYR", Severity.Warning);
                busy = false;
                return;
            }

        var trade = new OTCTrade
            {
                daoId = otc.Order.daoId,
                orderId = (otc as TransactionBlock).AccountID,
                orderOwnerId = otc.OwnerAccountId,
                dir = otc.Order.dir == TradeDirection.Sell ? TradeDirection.Buy : TradeDirection.Sell,
                crypto = otc.Order.crypto,
                fiat = otc.Order.fiat,
                price = otc.Order.price,
                amount = got,
                pay = pay,
                collateral = cltlyr,
                payVia = method,
            };

        var traderet = await walletState.Value.wallet.CreateOTCTradeAsync(trade);
        success = traderet.Successful();

        if(success)
        {
            Navigation.NavigateTo($"/dealer/crtrade/{traderet.TxHash}");
        }
        else
        {
            Snackbar.Add($"Error create trade: {traderet.ResultCode}", Severity.Error);
        }

        busy = false;
    }
}
