@page "/dealer/complaint/{tradeid}"
@using Fluxor
@using Fluxor.Blazor.Web.Components
@using Lyra.Data.API.Identity
@using Lyra.Data.Crypto
@using Nebula.Store.WebWalletUseCase
@inherits FluxorComponent

<div class="mag">
    <h3>Complaint</h3>
    <div>
        For Trade ID: <CopyToClipboard Text=@tradeid />
    </div>

    @if(brief == null)
    {
        <div style="z-index: 5;" class="spinner"></div>
    }
    else if(!walletState.Value.IsOpening)
    {
        <a href="/wallet"><MudButton Variant="Variant.Filled" Color="Color.Primary">Open Wallet to View Details</MudButton></a>
    }
    else
    {
        <div>
            Level of Dispute: @((int)brief.DisputeLevel), @brief.DisputeLevel
        </div>
        <div>
            Litigant: <br />
            @foreach(var mem in brief.Members)
            {
                <div>
                    Account ID: <CopyToClipboard Text=@mem />
                </div>
            }
        </div>
        @if(brief.DisputeLevel != DisputeLevels.None)
        {
            <div>
                @foreach(var cmp in brief.DisputeHistory)
                {
                    <div>
                        <hr />
                    </div>

                    <div>
                        Level: @cmp.Level
                    </div>
                    <div>
                        Raised By: @cmp.RaisedBy
                    </div>
                    <div>
                        Raised Time: @cmp.RaisedTime
                    </div>
                    <div>
                        Claimed Lost: @cmp.ClaimedLost LYR
                    </div>

                }
            </div>
        }
    }
</div>


@code {
    [Parameter]
    public string tradeid { get; set; }

    [Inject] public DealerClient dealer { get; set; }
    [Inject] ILyraAPI lyraApi { get; set; }

    [Inject]
    private IState<WebWalletState> walletState { get; set; }

    TradeBrief brief;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender)
        {
            if(walletState.Value.IsOpening)
            {
                await GetTradeBrief();
                await InvokeAsync(() => StateHasChanged());
            }
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task GetTradeBrief()
    {
        var lsbret = await lyraApi.GetLastServiceBlockAsync();
        if (lsbret.Successful())
        {
            var lsb = lsbret.GetBlock() as ServiceBlock;
            var wallet = walletState.Value.wallet;
            var sign = Signatures.GetSignature(wallet.PrivateKey, lsb.Hash, wallet.AccountId);
            var ret = await dealer.GetTradeBriefAsync(tradeid, wallet.AccountId, sign);
            if(ret.Successful())
            {
                brief = ret.Deserialize<TradeBrief>();
            }                        
        }
    }
}
