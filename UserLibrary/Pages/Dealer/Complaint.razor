@page "/dealer/complaint/{tradeid}"
@using Fluxor
@using Fluxor.Blazor.Web.Components
@using Lyra.Data.API
@using Lyra.Data.API.Identity
@using Lyra.Data.API.ODR
@using Lyra.Data.API.WorkFlow
@using Lyra.Data.Crypto
@using Lyra.Data.Shared
@using Nebula.Store.WebWalletUseCase
@using UserLibrary.Data
@using Humanizer;
@inherits FluxorComponent

<div class="mag">
    <h3>Complaint</h3>
    <div>
        For Trade ID: <CopyToClipboard Text=@tradeid />
    </div>

    @if (brief == null)
    {
        <div style="z-index: 5;" class="spinner"></div>
    }
    else if (!walletState.Value.IsOpening)
    {
        <a href="/wallet"><MudButton Variant="MudBlazor.Variant.Filled" Color="Color.Primary">Open Wallet to View Details</MudButton></a>
    }
    else
    {
        <div>
            Level of Dispute: @((int)brief.DisputeLevel), @brief.DisputeLevel
        </div>
        <div>
            Litigant: <br />
            @foreach (var mem in brief.Members)
            {
                <div>
                    Account ID: <CopyToClipboard Text=@mem />
                </div>
            }
        </div>
        <div>
            @foreach (var cmp in brief.GetDisputeHistory())
            {
                var color = cmp.State switch
                {
                    DisputeNegotiationStates.NewlyCreated => "rz-background-color-warning-light",
                    DisputeNegotiationStates.AllPartiesNotified => "rz-background-color-warning-light",
                    DisputeNegotiationStates.PlaintiffWithdraw => "rz-background-color-base-700",
                    DisputeNegotiationStates.AcceptanceConfirmed => "rz-background-color-success-light",
                    DisputeNegotiationStates.Failed => "rz-background-color-danger-light",
                    _ => ""
                };
                color = "m-3 " + color;
                <RadzenCard Class="@color" Style="margin: 5px;">
                    <div>
                        <hr />
                    </div>

                    <div>
                        Level: @cmp.Complaint.level
                    </div>
                    <div>
                        Raised By: @cmp.Complaint.ownerId
                    </div>
                    <div>
                        Raised Time: @cmp.RaisedTime
                    </div>
                    <div>
                        State: @cmp.State
                    </div>
                    <div>
                        Statement: @(string.IsNullOrEmpty(cmp.Complaint.statement) ? "(empty)" : cmp.Complaint.statement)
                    </div>
                    <div>
                        Request: @cmp.Complaint.request
                    </div>


                        <RadzenAccordion>
                            <Items>
                                @if (walletState.Value.wallet.AccountId == cmp.Complaint.ownerId
                                        && cmp.State != DisputeNegotiationStates.PlaintiffWithdraw)
                                {
                                <RadzenAccordionItem Text="Actions to my complaint" Icon="auto_fix_normal">
                                    <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3"> If there was misunderstandings or the issue specified has been resolved, you can withdraw the complaint. </RadzenText>
                                    <br />

                                    <RadzenButton Text="Withdraw" Click="@(() => WithdrawDisputeCaseAsync(cmp))"></RadzenButton>

                                </RadzenAccordionItem>
                                }
                                
                                @foreach(var reply in cmp.Replies?? new List<ComplaintReply>())
                                {
                                    var title = $"Response {reply.response.Humanize()} by {reply.ownerId.Shorten()} at {(DateTime.UtcNow - reply.created).Humanize()} ago";
                                    <RadzenAccordionItem Text="@title" Icon="reply">
                                        <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Replied by: @reply.ownerId </RadzenText>
                                        <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Date time: @reply.created </RadzenText>
                                        <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Fiat payment status: @reply.fiatState </RadzenText>
                                        <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Statement: @(string.IsNullOrWhiteSpace(reply.statement) ? "(empty)" : reply.statement) </RadzenText>
                                        <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Response: @reply.response </RadzenText>
                                    </RadzenAccordionItem>
                                }

                                <RadzenAccordionItem Text="Reply to this complaint" Icon="reply">
                                    <RadzenTemplateForm TItem="ComplaintReplyModel" Data=@replies[cmp.Complaint.Hash] Submit=@OnSubmit InvalidSubmit=@OnInvalidSubmit>

                                        <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">My statement (Optional): </RadzenText>
                                        <RadzenTextArea @bind-Value="@(replies[cmp.Complaint.Hash].statement)" Cols="50" Rows="3" Placeholder="Enter here..." Class="w-100" />
                                        <br />

                                        <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Payment state: </RadzenText>
                                        <RadzenRadioButtonList @bind-Value="@(replies[cmp.Complaint.Hash].fiatState)" Name="fiatState" TValue="ComplaintFiatStates">
                                            <Items>
                                                @if (myrole == ComplaintByRole.Buyer)
                                                {
                                                    <RadzenRadioButtonListItem Text="I have paid to seller" Value="ComplaintFiatStates.SelfPaid" />
                                                    <RadzenRadioButtonListItem Text="I did not pay" Value="ComplaintFiatStates.SelfUnpaid" />
                                                }
                                                else
                                                {
                                                    <RadzenRadioButtonListItem Text="I have got fiat paid" Value="ComplaintFiatStates.PeerPaid" />
                                                    <RadzenRadioButtonListItem Text="I havn't got fiat paid" Value="ComplaintFiatStates.PeerUnpaid" />
                                                }
                                            </Items>
                                        </RadzenRadioButtonList>
@*                                        <RadzenRequiredValidator Component="fiatState" Text="Fiat payment state is required" Popup=@popup Style="position: absolute" />
*@                                        <br />

                                        <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">My reply (Required): </RadzenText>
                                        <RadzenRadioButtonList Orientation="Radzen.Orientation.Vertical" @bind-Value="@(replies[cmp.Complaint.Hash].response)" Name="response" TValue="ComplaintResponse">
                                            <Items>
                                                @foreach (ComplaintResponse e in Enum.GetValues(typeof(ComplaintResponse)))
                                                {
                                                    if(e == ComplaintResponse.Comment)
                                                    {
                                                        <RadzenRadioButtonListItem Text="@e.Humanize()" Value="@e" />
                                                    }
                                                    else if (replies[cmp.Complaint.Hash].request == ComplaintRequest.CancelTrade
                                                    && (e == ComplaintResponse.AgreeToCancel || e == ComplaintResponse.RefuseToCancel))
                                                    {
                                                        <RadzenRadioButtonListItem Text="@e.Humanize()" Value="@e" />
                                                    }
                                                }
                                            </Items>
                                        </RadzenRadioButtonList>
                                        <br />
                                        <RadzenCheckBox @bind-Value="@(replies[cmp.Complaint.Hash].chkAgree)" Name="chkAgree" TValue="bool" />
                                        <RadzenLabel Text="I confirm the information here can be used as proof for future arbitration. " Component="chkAgree" Style="margin-left: 8px; vertical-align: middle;" />
                                        <RadzenCompareValidator Text="Need to agree before reply" Value=@true Component="chkAgree" Popup=@popup Style="position: absolute" Operator=@compareOperator />
                                        <br />
                                        <br />

                                        <RadzenButton ButtonType="Radzen.ButtonType.Submit" Text="Reply"></RadzenButton>

                                    </RadzenTemplateForm>
                                </RadzenAccordionItem>
                            </Items>
                        </RadzenAccordion>

                    @if (cmp.Complaint.level == DisputeLevels.DAO && votings != null)
                    {
                        foreach (var vote in votings)
                        {
                            <div>
                                <div>
                                    Vote: @vote.Subject.Title
                                </div>
                                @if (summaries.ContainsKey((vote as TransactionBlock).AccountID))
                                {
                                    <div>
                                        Decided: @(summaries[(vote as TransactionBlock).AccountID].IsDecided)
                                    </div>
                                }
                            </div>
                        }
                    }
                </RadzenCard>
            }
        </div>
    }
</div>


@code {
    [Parameter]
    public string tradeid { get; set; }

    [Inject] ILyraAPI lyraApi { get; set; }

    [Inject]
    private IState<WebWalletState> walletState { get; set; }
    [Inject] DealerConnMgr connMgr { get; set; }
    [Inject] ISnackbar Snackbar { get; set; }

    IOtcTrade trade;
    TradeBrief brief;
    List<IVoting> votings;
    Dictionary<string, VotingSummary> summaries;
    ComplaintByRole myrole;

    bool popup = false;
    CompareOperator compareOperator = CompareOperator.Equal;

    class ComplaintReplyModel
    {
        public DisputeCase dispute { get; set; }
        public ComplaintRequest request { get; set; }
        public ComplaintFiatStates fiatState { get; set; }
        public string statement { get; set; } = "";
        public ComplaintResponse response { get; set; }
        public bool chkAgree { get; set; }
    }

    Dictionary<string, ComplaintReplyModel> replies = new Dictionary<string, ComplaintReplyModel>();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (walletState.Value.IsOpening)
            {
                var tradeblk = await lyraApi.GetLastBlockAsync(tradeid);
                trade = tradeblk.As<IOtcTrade>();

                if (trade.Trade.dir == TradeDirection.Buy && walletState.Value.wallet.AccountId == trade.OwnerAccountId)
                    myrole = ComplaintByRole.Buyer;
                else
                    myrole = ComplaintByRole.Seller;

                await GetTradeBrief();

                // create models
                replies.Clear();
                foreach (var hist in brief.GetDisputeHistory())
                {
                    var model = new ComplaintReplyModel
                        {
                            dispute = hist,
                            fiatState = myrole == ComplaintByRole.Buyer ? ComplaintFiatStates.SelfUnpaid : ComplaintFiatStates.PeerUnpaid,
                        };
                    replies.Add(hist.Complaint.Hash, model);
                }



                await InvokeAsync(() => StateHasChanged());
            }
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task GetTradeBrief()
    {
        var lsbret = await lyraApi.GetLastServiceBlockAsync();
        if (lsbret.Successful())
        {
            var lsb = lsbret.GetBlock() as ServiceBlock;
            var wallet = walletState.Value.wallet;
            var sign = Signatures.GetSignature(wallet.PrivateKey, lsb.Hash, wallet.AccountId);

            var tradeblk = await lyraApi.GetLastBlockAsync(tradeid);
            var dealer = connMgr.GetDealer(tradeblk.As<IOtcTrade>().Trade.dealerId);
            var ret = await dealer.GetTradeBriefAsync(tradeid, wallet.AccountId, sign);
            if (ret.Successful())
            {
                brief = ret.Deserialize<TradeBrief>();

                if (brief.DisputeLevel == DisputeLevels.DAO)
                {
                    var votesret = await lyraApi.FindAllVoteForTradeAsync(tradeid);
                    if (votesret.Successful())
                    {
                        votings = votesret.GetBlocks().Cast<IVoting>().ToList();
                        summaries = new Dictionary<string, VotingSummary>();
                        foreach (var vote in votings)
                        {
                            var voteid = (vote as TransactionBlock).AccountID;
                            var retx = await lyraApi.GetVoteSummaryAsync(voteid);
                            summaries.Add(voteid, retx.Deserialize<VotingSummary>());
                        }
                    }
                }
            }
        }
    }

    async Task OnSubmit(ComplaintReplyModel model)
    {
        var wallet = walletState.Value.wallet;
        var reply = new ComplaintReply
            {
                created = DateTime.UtcNow,

                ownerId = wallet.AccountId,
                tradeId = tradeid,
                level = model.dispute.Complaint.level,
                role = myrole,
                fiatState = model.fiatState,
                response = model.response,

                statement = model.statement,
                imageHashes = null,

                complaintHash = model.dispute.Complaint.Hash,
            };
        reply.Sign(wallet.PrivateKey, wallet.AccountId);

        var ret = await connMgr.GetDealer(trade.Trade.dealerId).ComplainReplyAsync(reply);
        if (ret.Successful())
        {
            Snackbar.Add($"Reply to complaint successfully.", Severity.Success);

            // debug
            //await GetTradeBrief();
            //if (!brief.IsCancellable)
            //    Snackbar.Add($"TradeBrief not cancellable!", Severity.Error);
        }
        else
        {
            Snackbar.Add($"Reply to complaint failed: {ret.ResultCode.Humanize()}, {ret.ResultMessage}", Severity.Error);
        }

        await UpdateUIAfterChange();
    }

    async Task WithdrawDisputeCaseAsync(DisputeCase dispute)
    {
        var wallet = walletState.Value.wallet;
        var reply = new ComplaintReply
            {
                created = DateTime.UtcNow,

                ownerId = wallet.AccountId,
                tradeId = trade.AccountID,
                level = DisputeLevels.Peer,
                role = ComplaintByRole.Buyer,
                fiatState = ComplaintFiatStates.SelfPaid,
                response = ComplaintResponse.OwnerWithdraw,

                statement = "test",
                imageHashes = null,

                complaintHash = dispute.Complaint.Hash,
            };
        reply.Sign(wallet.PrivateKey, wallet.AccountId);

        var ret = await connMgr.GetDealer(trade.Trade.dealerId).ComplainReplyAsync(reply);
        if(ret.Successful())
        {            
            
        }
        else
        {
            Snackbar.Add($"Failed to withdraw: {ret.ResultCode}. Message: {ret.ResultMessage}", Severity.Normal);
        }

        await UpdateUIAfterChange();
    }

    async Task UpdateUIAfterChange()
    {
        Snackbar.Add($"Refresh content...", Severity.Normal);

        await GetTradeBrief();

        // create models
        replies.Clear();
        foreach (var hist in brief.GetDisputeHistory())
        {
            var model = new ComplaintReplyModel { dispute = hist };
            replies.Add(hist.Complaint.Hash, model);
        }

        var tradeblk = await lyraApi.GetLastBlockAsync(tradeid);
        trade = tradeblk.As<IOtcTrade>();

        await InvokeAsync(() => StateHasChanged());
    }

    void OnInvalidSubmit(FormInvalidSubmitEventArgs args)
    {
        //Log("InvalidSubmit", JsonSerializer.Serialize(args, new JsonSerializerOptions() { WriteIndented = true }));
    }
}
