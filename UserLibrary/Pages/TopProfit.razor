@inherits Fluxor.Blazor.Web.Components.FluxorComponent
@page "/profit"
@page "/profit/{pftid}"
@using Fluxor
@using Lyra.Data.Shared
@using Microsoft.Extensions.Configuration
@using Nebula.Store.WebWalletUseCase
@inject IConfiguration Configuration
@inject NavigationManager UriHelper

<div class="mag">

@if (ui == UI.Loading)
{
    <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-7" />
}

@if (ui == UI.Main)
{
    @* <h1>All Profiting Accounts</h1>

    <div>
        <table class="table">
            <thead>
                <tr>
                    <th>Name</th>
                    <th>Type</th>
                    <th>Created Time</th>
                    <th>Share Ratio</th>
                    <th>Seats</th>
                    <th>Total Profit</th>
                    <th>Profiting Account ID</th>
                    <th>Owner</th>
                </tr>
            </thead>
            <tbody> *@
                <div class="flex-container">
                @foreach (var pft in pfts.OrderByDescending(a => a.totalprofit).ThenBy(x => x.gens.Name))
                {
                    <div class="node-list">
                        <div class="node-name"  @onclick="@(async () => await NavToPft(pft.gens.AccountID))">@pft.gens.Name</div>
                        <table>
                            <tr>
                                <td>Type</td>
                                <td>@pft.gens.PType</td>
                            </tr>
                            <tr>
                                <td>Created Time</td>
                                <td>@pft.gens.TimeStamp</td>
                            </tr>
                            <tr>
                                <td>Share Ratio</td>
                                <td>@(pft.gens.ShareRito*100) %</td>
                            </tr>
                            <tr>
                                <td>Seats</td>
                                <td>@pft.gens.Seats</td>
                            </tr>
                            <tr>
                                <td>Total Profit</td>
                                <td>@pft.totalprofit</td>
                            </tr>
                            <tr>
                                <td>Profiting account ID</td>
                                <td>
                                    <p style="width:100%;display:inline;">
                                        <CopyToClipboard Text="@pft.gens.AccountID" />
                                        <a target="_blank" href="@bexpurl/showblock/@pft.gens.AccountID"><MudIcon Icon="@Icons.Filled.CallMade" Size="Size.Small" /></a>
                                    </p>
                                </td>
                            </tr>
                            <tr>
                                <td>Owner</td>
                                <td><a target="_blank" href="@bexpurl/showblock/@pft.gens.OwnerAccountId">@pft.gens.OwnerAccountId.Substring(0, 10)...</a></td>
                            </tr>
                        </table>
                    </div>
                    @* <tr style="cursor:pointer" @onclick="@(async () => await NavToPft(pft.gens.AccountID))">
                        <td style="color: blue">@pft.gens.Name</td>
                        <td>@pft.gens.PType</td>
                        <td>@pft.gens.TimeStamp</td>
                        <td>@(pft.gens.ShareRito*100) %</td>
                        <td>@pft.gens.Seats</td>
                        <td>@pft.totalprofit</td>
                        <td>
                            <a target="_blank" href="@bexpurl/showblock/@pft.gens.AccountID">@pft.gens.AccountID</a>
                        </td>
                        <td>
                            <a target="_blank" href="@bexpurl/showblock/@pft.gens.OwnerAccountId">@pft.gens.OwnerAccountId.Substring(0, 10)...</a>

                        </td>
                    </tr> *@
                }
            @* </tbody>
        </table>
    </div> *@
    </div>

}

@if(ui == UI.Details)
{
    <h1 style="text-align: center;">Details of profiting account</h1>
    <div class="prof-ID">
        <div class="node-list" style="width: 100%;">
            
            @if (pft == null)
            {
                <p>No profiting account.</p>
            }
            else
            {

                <table>
                    <tr>
                        <td>Name</td>
                        <td>: @pft.Name</td>
                    </tr>
                    <tr>
                        <td>Type</td>
                        <td>: @pft.PType</td>
                    </tr>
                    <tr>
                        <td>Owner</td>
                        <td>: <a target="_blank" href="@bexpurl/showblock/@pft?.OwnerAccountId">@pft?.OwnerAccountId.Substring(0, 10)...</a></td>
                    </tr>
                    <tr>
                        <td>Profiting account ID</td>
                        <td>
                            :
                            <p style="width:100%;display:inline;">
                            <CopyToClipboard Text="@GetPftID()" />
                            <a target="_blank" href="@bexpurl/showblock/@GetPftID()"><MudIcon Icon="@Icons.Filled.CallMade" Size="Size.Small" /></a>
                        </p>
                        </td>
                    </tr>
                    <tr>
                        <td>Total earned</td>
                        <td>: @pftStats.Total LYR</td>
                    </tr>
                    <tr>
                        <td>Profit sharing ratio</td>
                        <td>: @FormatShare()</td>
                    </tr>
                    <tr>
                        <td>Pay to stakers</td>
                        <td>: @GetToStakers() LYR</td>
                    </tr>
                    <tr>
                        <td>Pay to owner</td>
                        <td>: @GetToOwner() LYR</td>
                    </tr>
                </table>





                <h2 style="margin: 20px; text-align:center; margin-top:50px;">All Current Stakings</h2>
                <div class="current-staking">
                    
                        
                    @foreach (var stk in stks)
                    {
                        <div class="staking-wrap">
                        <div class="wrap-staking">
                        
                            <table>
                                <tr>
                                    <td>Staking amount</td>
                                    <td>: @stk.Amount LYR</td>
                                </tr>
                                <tr>
                                    <td>Start Time</td>
                                    <td>: @stk.Time</td>
                                </tr>
                                <tr>
                                    <td>End time</td>
                                    <td>: @(stk.Time.AddDays(stk.Days))</td>
                                </tr>
                                <tr>
                                    <td>Staking days</td>
                                    <td>: @stk.Days</td>
                                </tr>
                                <tr>
                                    <td>Earns</td>
                                    <td>: @stkRewards[stk.StkAccount] LYR</td>
                                </tr>
                                <tr>
                                    <td>Staking Account</td>
                                    <td>: <a target="_blank" href="@bexpurl/showblock/@stk.StkAccount">@stk.StkAccount.Shorten()</a></td>
                                </tr>
                                <tr>
                                    <td>Owner Account</td>
                                    <td>: <a target="_blank" href="@bexpurl/showblock/@stk.OwnerAccount">@stk.OwnerAccount.Shorten()</a></td>
                                </tr>
                            </table>
                            
                        </div>
                        </div>

                        string style = "";
                        if (stk.Time <= DateTime.UtcNow && stk.Time.AddDays(stk.Days) >= DateTime.UtcNow)
                        {
                            style = "background-color:light-green;";
                        }
                        else
                        {
                            style = "background-color:light-grey;";
                        }

                        
                    }

                    
                    </div>
                            
                <p style="font-size:xx-small">Note: Statistics data may not be updated in time. Only for reference.</p>
            }
            <hr />
            <div>
                <MudButton Variant="Variant.Filled" Color="Color.Primary" @onclick="Back">Return</MudButton>
            </div>
        </div>
    </div>
    
}

@if (ui == UI.Error)
{
    <p>@error</p>
}


</div>

@code {
    [Parameter]
    public string pftid { get; set; }
    [Parameter]
    [SupplyParameterFromQuery]
    public string? src { get; set; }

    [Inject]
    private IDispatcher Dispatcher { get; set; }

    string error;

    List<Profiting> pfts;

    enum UI { Loading, Main, Error, Details };
    UI ui;

    // for details
    public IProfiting pft { get; set; }
    public List<Staker> stks { get; set; }
    public ProfitingStats pftStats { get; set; }
    public Dictionary<string, decimal> stkRewards { get; set; }
    string bexpurl;

    protected override async Task OnInitializedAsync()
    {
        bexpurl = Configuration["network"] == "mainnet" ? "https://nebula.lyra.live" : "https://nebulatestnet.lyra.live";
       
        Dispatcher.Dispatch(new WebWalletChangeTitleAction { title = "Lyra Revenue Center" });

        try
        {
            ui = UI.Loading;
            var lcx = LyraRestClient.Create(Configuration["network"], Environment.OSVersion.ToString(), "Nebula", "1.4");
            pfts = await lcx.FindAllProfitingAccountsAsync(DateTime.MinValue, DateTime.MaxValue);

            ui = UI.Main;

            if(pftid != null)
            {
                await GetDetails(pftid);
                ui = UI.Details;
            }

            StateHasChanged();
        }
        catch (Exception ex)
        {
            error = ex.ToString();
            ui = UI.Error;
        }

        await base.OnInitializedAsync();
    }

    async Task NavToPft(string pftid)
    {
        UriHelper.NavigateTo("/profit/" + pftid);
        await GetDetails(pftid);
        ui = UI.Details;
        StateHasChanged();
    }

    async Task GetDetails(string pftid)
    {
        var lcx = LyraRestClient.Create(Configuration["network"], Environment.OSVersion.ToString(), "Nebula", "1.4");

        var ret = await lcx.GetBlockByIndexAsync(pftid, 1);
        if (ret.Successful())
        {
            pft = ret.GetBlock() as ProfitingGenesis;

            stks = await lcx.FindAllStakingsAsync(pftid, DateTime.UtcNow);
            pftStats = await lcx.GetAccountStatsAsync(pftid, DateTime.MinValue, DateTime.MaxValue);

            var rwds = new Dictionary<string, decimal>();
            foreach (var stk in stks)
            {
                var stats = await lcx.GetBenefitStatsAsync(pftid, stk.StkAccount, DateTime.MinValue, DateTime.MaxValue);
                rwds.Add(stk.StkAccount, stats.Total);
            }
            stkRewards = rwds;
        }

        ui = UI.Details;
    }

    private string GetPftID()
    {
        if (pft == null)
            return "";

        return ((TransactionBlock)pft).AccountID;
    }

    private decimal GetToOwner()
    {
        return Math.Round(pftStats.Total * (1 - pft.ShareRito), 8);
    }
    private decimal GetToStakers()
    {
        return Math.Round(pftStats.Total * pft.ShareRito, 8);
    }

    private string FormatShare()
    {
        return $"{pft.ShareRito * 100} %";
    }

    void Back(MouseEventArgs e)
    {        
        if(src == "ne")
            UriHelper.NavigateTo("/showbb");
        else
        {
            ui = UI.Main;
            UriHelper.NavigateTo("/profit");
        }            
    }
}
