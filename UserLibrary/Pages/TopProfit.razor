@inherits Fluxor.Blazor.Web.Components.FluxorComponent
@page "/profit"
@page "/profit/{pftid}"
@using Fluxor
@using Lyra.Data.Shared
@using Microsoft.Extensions.Configuration
@using Nebula.Store.WebWalletUseCase
@inject IConfiguration Configuration
@inject NavigationManager UriHelper

<div class="mag">

@if (ui == UI.Loading)
{
    <p><i>Loading...</i></p>
}

@if (ui == UI.Main)
{
    <h1>All Profiting Accounts</h1>

    <div>
        <table class="table">
            <thead>
                <tr>
                    <th>Name</th>
                    <th>Type</th>
                    <th>Created Time</th>
                    <th>Share Ratio</th>
                    <th>Seats</th>
                    <th>Total Profit</th>
                    <th>Profiting Account ID</th>
                    <th>Owner</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var pft in pfts.OrderByDescending(a => a.totalprofit).ThenBy(x => x.gens.Name))
                {
                    <tr style="cursor:pointer" @onclick="@(async () => await NavToPft(pft.gens.AccountID))">
                        <td style="color: blue">@pft.gens.Name</td>
                        <td>@pft.gens.PType</td>
                        <td>@pft.gens.TimeStamp</td>
                        <td>@(pft.gens.ShareRito*100) %</td>
                        <td>@pft.gens.Seats</td>
                        <td>@pft.totalprofit</td>
                        <td>
                            <a target="_blank" href="@bexpurl/showblock/@pft.gens.AccountID">@pft.gens.AccountID</a>
                        </td>
                        <td>
                            <a target="_blank" href="@bexpurl/showblock/@pft.gens.OwnerAccountId">@pft.gens.OwnerAccountId.Substring(0, 10)...</a>

                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

@if(ui == UI.Details)
{
    <h1>Details of profiting account</h1>
    @if (pft == null)
    {
        <p>No profiting account.</p>
    }
    else
    {
        <div>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" @onclick="Back">Return</MudButton>
        </div>
        <hr />

        <p>Name: <b>@pft.Name</b></p>
        <p>Type: <b>@pft.PType</b></p>
        <p>
            Node Owner Account ID: <a target="_blank" href="@bexpurl/showblock/@pft?.OwnerAccountId">@pft?.OwnerAccountId.Substring(0, 10)...</a>
        </p>
        <p>
            Profiting Account ID:
            <a target="_blank" href="@bexpurl/showblock/@GetPftID()">@GetPftID()</a>
        </p>
        <p>Total Earn: @pftStats.Total LYR</p>
        <p>Profit sharing ratio: @FormatShare() </p>
        <p>Pay to stakers: @GetToStakers() LYR</p>
        <p>Pay to owner: @GetToOwner() LYR</p>
        <p>

        </p>
        <p>
            <div><h4>All Current Stakings</h4></div>
            <div>
                <table class="table">
                    <thead>
                        <tr>
                            <th>Staking Amount</th>
                            <th>Start Time</th>
                            <th>End Time</th>
                            <th>Staking Days</th>                            
                            <th>Earns</th>                            
                            <th>Staking Account</th>
                            <th>Owner Account</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var stk in stks)
                        {
                            string style = "";
                            if (stk.Time <= DateTime.UtcNow && stk.Time.AddDays(stk.Days) >= DateTime.UtcNow)
                            {
                                style = "background-color:light-green;";
                            }
                            else
                            {
                                style = "background-color:light-grey;";
                            }

                            <tr style="@style">
                                <td>@stk.Amount LYR</td>
                                <td>@stk.Time</td>
                                <td>@(stk.Time.AddDays(stk.Days))</td>
                                <td>@stk.Days</td>                                
                                <td>@stkRewards[stk.StkAccount] LYR</td>                                
                                <td>
                                    <a target="_blank" href="@bexpurl/showblock/@stk.StkAccount">@stk.StkAccount.Shorten()</a>
                                </td>
                                <td>
                                    <a target="_blank" href="@bexpurl/showblock/@stk.OwnerAccount">@stk.OwnerAccount.Shorten()</a>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </p>
        <p style="font-size:xx-small">Note: Statistics data may not be updated in time. Only for reference.</p>
    }
    <hr />
    <div>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" @onclick="Back">Return</MudButton>
    </div>
}

@if (ui == UI.Error)
{
    <p>@error</p>
}


</div>

@code {
    [Parameter]
    public string pftid { get; set; }
    [Parameter]
    [SupplyParameterFromQuery]
    public string? src { get; set; }

    [Inject]
    private IDispatcher Dispatcher { get; set; }
    [Inject] ILyraAPI lyraApi { get; set; }

    string error;

    List<Profiting> pfts;

    enum UI { Loading, Main, Error, Details };
    UI ui;

    // for details
    public IProfiting pft { get; set; }
    public List<Staker> stks { get; set; }
    public ProfitingStats pftStats { get; set; }
    public Dictionary<string, decimal> stkRewards { get; set; }
    string bexpurl;

    protected override async Task OnInitializedAsync()
    {
        bexpurl = Configuration["network"] == "mainnet" ? "https://nebula.lyra.live" : "https://nebulatestnet.lyra.live";
       
        Dispatcher.Dispatch(new WebWalletChangeTitleAction { title = "Lyra Revenue Center" });

        try
        {
            ui = UI.Loading;
            pfts = await lyraApi.FindAllProfitingAccountsAsync(DateTime.MinValue, DateTime.MaxValue);

            ui = UI.Main;

            if(pftid != null)
            {
                await GetDetails(pftid);
                ui = UI.Details;
            }

            StateHasChanged();
        }
        catch (Exception ex)
        {
            error = ex.ToString();
            ui = UI.Error;
        }

        await base.OnInitializedAsync();
    }

    async Task NavToPft(string pftid)
    {
        UriHelper.NavigateTo("/profit/" + pftid);
        await GetDetails(pftid);
        ui = UI.Details;
        StateHasChanged();
    }

    async Task GetDetails(string pftid)
    {
        var ret = await lyraApi.GetBlockByIndexAsync(pftid, 1);
        if (ret.Successful())
        {
            pft = ret.GetBlock() as ProfitingGenesis;

            stks = lyraApi.FindAllStakings(pftid, DateTime.UtcNow);
            pftStats = await lyraApi.GetAccountStatsAsync(pftid, DateTime.MinValue, DateTime.MaxValue);

            var rwds = new Dictionary<string, decimal>();
            foreach (var stk in stks)
            {
                var stats = await lyraApi.GetBenefitStatsAsync(pftid, stk.StkAccount, DateTime.MinValue, DateTime.MaxValue);
                rwds.Add(stk.StkAccount, stats.Total);
            }
            stkRewards = rwds;
        }

        ui = UI.Details;
    }

    private string GetPftID()
    {
        if (pft == null)
            return "";

        return ((TransactionBlock)pft).AccountID;
    }

    private decimal GetToOwner()
    {
        return Math.Round(pftStats.Total * (1 - pft.ShareRito), 8);
    }
    private decimal GetToStakers()
    {
        return Math.Round(pftStats.Total * pft.ShareRito, 8);
    }

    private string FormatShare()
    {
        return $"{pft.ShareRito * 100} %";
    }

    void Back(MouseEventArgs e)
    {        
        if(src == "ne")
            UriHelper.NavigateTo("/showbb");
        else
        {
            ui = UI.Main;
            UriHelper.NavigateTo("/profit");
        }            
    }
}
