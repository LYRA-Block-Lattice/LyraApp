@namespace UserLibrary.Pages
@page "/webwallet"
@page "/wallet"
@page "/wallet/{action}/{target}"

@inherits Fluxor.Blazor.Web.Components.FluxorComponent

@using BlazorZXingJs
@using Fluxor
@using Lyra.Core.API
@using Lyra.Data.API
@using Lyra.Data.Crypto
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.JSInterop
@using Nebula.Store.WebWalletUseCase
@using Nebula.Data
@using Microsoft.Extensions.Configuration
@using Blazored.LocalStorage
@using Microsoft.Extensions.Logging
@using Microsoft.Extensions.Options
@inject IConfiguration Configuration
@inject NavigationManager Navigation
@inject Blazored.LocalStorage.ILocalStorageService localStore
@inject ILogger<WebWallet> logger
@inject ILyraAPI lyraClient
@using UserLibrary.Components
@using UserLibrary.Data

@if (walletState.Value.IsLoading || busy || busysend)
{
    <div style="z-index: 5;" class="spinner"></div>
}

@if (walletState.Value.wallet != null)
{
    <MudTabs @ref="tabs" Elevation="4" Rounded="true" Centered="true" Color="Color.Secondary">
        <MudTabPanel Text=@localizer["Home"]>
            @if(walletState.Value.PendingRecv)
            {
                <MudButton Variant="MudBlazor.Variant.Outlined" Disabled="@busy" Color="Color.Success" OnClick="@Refresh" FullWidth>
                @if (busy)
                {
                    <MudProgressCircular Color="Color.Secondary" Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                        <MudText Class="ms-2">@localizer["Processing"]</MudText>
                }
                else
                {

                    <MudBadge Content="@(walletState.Value.PendingRecvCount)" Color="Color.Primary" Overlap="true" Class="mx-6 my-4">
                            <MudText>@localizer["Receive"]</MudText>
                    </MudBadge>
                }
            </MudButton>
            }

            <div class="cet">
                @if (walletState.Value.wallet.GetLastSyncBlock() != null)
                {
                    @foreach (var kvp in walletState.Value.wallet.GetLastSyncBlock().Balances)
                    {
                        <MudCard Style="min-width: 200px;" Elevation="8">
                            <MudCardHeader>
                                <CardHeaderContent>
                                    <h4>@kvp.Key.Replace("tether/", "$")</h4>
                                </CardHeaderContent>
                                <CardHeaderActions>
                                    <MudButton Variant="MudBlazor.Variant.Filled" Color="Color.Primary"
                                   OnClick="@(async ()=>{ await SendX(kvp.Key); })">@localizer["Send"]</MudButton>
                                </CardHeaderActions>
                            </MudCardHeader>
                            <MudCardContent>
                                <div>@($"{kvp.Value.ToBalanceDecimal():N4}")</div>
                            </MudCardContent>
                        </MudCard>
                    }
                }
                else
                {
                    <MudCard Style="width: 200px;" Elevation="8">
                            <MudCardHeader>
                                <CardHeaderContent>
                                    <h4>LYR</h4>
                                </CardHeaderContent>
                                <CardHeaderActions>
                                <MudButton Variant="MudBlazor.Variant.Filled" Disabled="@(true)" Color="Color.Primary"
                                   OnClick="@(async ()=>{ await SendX("LYR"); })">@localizer["Send"]</MudButton>
                                </CardHeaderActions>
                            </MudCardHeader>
                            <MudCardContent>
                                <div>0.00</div>
                            </MudCardContent>
                        </MudCard>
                }

                <MudCard Style="width: 200px;" Elevation="8">
                        <MudCardHeader>
                            <CardHeaderContent>
                            <h4>@localizer["Your New Token"]</h4>
                            </CardHeaderContent>
                            <CardHeaderActions>

                            </CardHeaderActions>
                        </MudCardHeader>
                        <MudCardContent>
                            <div style="height: 100%; display: flex; align-items: center; justify-content: center">
                                <a href="mint">
                                    <MudFab Color="Color.Secondary" Icon="@Icons.Material.Filled.Add" Size="Size.Small" IconSize="Size.Large" aria-label="add" />
                                </a>
                            </div>
                        </MudCardContent>
                    </MudCard>
            </div>

        </MudTabPanel>

        <MudTabPanel Text=@localizer["Send"]>
            <div class="mag">
                <MudGrid>
                    <MudItem xs="12">
                        <MudTextField T="string" Label=@localizer["Destination Wallet Address"] @bind-Value="@dstAddr" />
                        <a href="/scan">
                            <MudButton Variant="MudBlazor.Variant.Filled" Color="Color.Primary">@localizer["Scan QR-Code"]</MudButton>
                        </a>
                        <RadzenDropDown AllowClear="true" TValue="ContactItem" Class="w-100" 
                            Data=@contacts Change=@(args => OnContact(args as ContactItem)) />
                    </MudItem>
                    <MudItem xs="12">
                        <MudTextField T="string" Label=@localizer["Token Name"] @bind-Value="@tokenName" />
                    </MudItem>
                    <MudItem xs="12">
                        <MudNumericField T="decimal" Label=@localizer["Amount"] @bind-Value="@amount" />
                    </MudItem>
                    <MudItem xs="12">
                        <MudButton Variant="MudBlazor.Variant.Filled" Disabled="@busysend" Color="Color.Primary" OnClick="@(async () => await SendTokenAsync())">
                    @if (busysend)
                    {
                        <MudProgressCircular Color="Color.Secondary" Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                                <MudText Class="ms-2">@localizer["Processing"]</MudText>
                    }
                    else
                    {
                                <MudText>@localizer["Send Token"]</MudText>
                    }
                </MudButton>
                    </MudItem>
                </MudGrid>
                
            </div>

        </MudTabPanel>

        @if (!string.IsNullOrWhiteSpace(Configuration["faucetPvk"]) && Configuration["network"] != "mainnet" && walletState.Value.wallet.BaseBalance == 0m && !walletState.Value.freeTokenSent) //&& walletState.Value.freeTokenTimes < 3
        {
            <MudTabPanel Text="Free Token">
                <div>
                    <p>Current balance of faucet account: <em>@walletState.Value.faucetBalance</em> LYR</p>
                </div>

                @*    <div class="section">
                    <ReCAPTCHA @ref="reCAPTCHAComponent" SiteKey="6Lftd8gZAAAAAK5G9aHUFY7wtV1yocfAf2Vj-EmI" OnSuccess="OnSuccess" OnExpired="OnExpired" />
                    </div>*@

                <div class="section">
                    <button class="btn btn-success" @onclick="OnClickPost" disabled="@walletState.Value.DisablePostButton">
                        Send me Token!
                    </button>
                    &nbsp;&nbsp;
                    <MudButton Variant="MudBlazor.Variant.Filled" Color="Color.Primary" @onclick="Return">Return</MudButton>
                </div>
            </MudTabPanel>
        }
    </MudTabs>





}
else
{
    try
    {
        Navigation.NavigateTo("login", false, true);
    }
    catch (Exception e)
    {

    }
}
