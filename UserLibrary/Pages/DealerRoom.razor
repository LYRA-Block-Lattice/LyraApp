@page "/dealer/room/{tradeid}"
@using Fluxor
@using Lyra.Data.API.Identity
@using Lyra.Data.Crypto
@using Microsoft.AspNetCore.SignalR.Client
@using Nebula.Store.WebWalletUseCase
@using UserLibrary.Data
@inject NavigationManager NavigationManager
@implements IAsyncDisposable

<h1>Dealer Room</h1>
<p>for trade: @tradeid</p>

<div class="form-group">
    <label>
        User:
        <input @bind="userInput" />
    </label>
</div>
<div class="form-group">
    <label>
        Message:
        <input @bind="messageInput" size="50" />
    </label>
</div>
<button @onclick="Send" disabled="@(!wrapper?.IsConnected)">Send</button>
<hr>

<ul id="messagesList">
    @foreach (var message in messages)
    {
        <li>@message</li>
    }
</ul>

@code {
    [Parameter]
    public string? tradeid { get; set; }

    [Inject]
    private IState<WebWalletState> walletState { get; set; }
    [Inject] ISnackbar Snackbar { get; set; }

    private List<string> messages = new List<string>();
    private string? userInput;
    private string? messageInput;

    ConnectionMethodsWrapper? wrapper;

    protected override async Task OnInitializedAsync()
    {
        wrapper = new ConnectionMethodsWrapper(ConnectionFactoryHelper.CreateConnection(new Uri("https://localhost:7070/hub"), null));

        wrapper.RegisterOnChat(a =>
        {
            messages.Add($"{a.AccountId}: {a.Text} [{a.Hash}]");
            StateHasChanged();
        });

        await wrapper.StartAsync();

        var result = await wrapper.JoinRoom(new JoinRoomRequest
            {
                TradeID = tradeid,
                UserAccountID = walletState.Value.wallet.AccountId,
                Signature = Signatures.GetSignature(walletState.Value.wallet.PrivateKey, tradeid, walletState.Value.wallet.AccountId),
            });

        if(result.Successful())
        {
            Snackbar.Add($"Join dealer room successfully.", Severity.Success);
        }
        else
        {
            Snackbar.Add($"Error join dealer room: {result.ResultCode}", Severity.Error);
        }
    }

    private async Task Send()
    {
        await wrapper.Chat(new ChatMessage { 
            TradeId = tradeid,
            AccountId = walletState.Value.wallet.AccountId,
            Text = messageInput        
        });
	}

    private async Task Hist()
	{

	}

    public async ValueTask DisposeAsync()
    {
        if (wrapper is not null)
        {
            await wrapper.DisposeAsync();
        }
    }
}
