@page "/dealer/room/{tradeid}"
@inherits FluxorComponent

@using Fluxor
@using Fluxor.Blazor.Web.Components
@using Lyra.Data.API.WorkFlow
@using Lyra.Data.Crypto
@using Lyra.Data.Shared
@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.Extensions.Configuration
@using Nebula.Store.WebWalletUseCase
@using System.Security.Cryptography
@using UserLibrary.Data
@inject NavigationManager Navigation

<div class="mag fh">

    <h1>Dealer Room</h1>
    <p>for trade: @(tradeid.Shorten())</p>

    <div class="scr">
        <div class="chatw" @ref="msgsref">
            <div class="top mud-elevation-3">
                <div class="act">
                    @pintitle
                </div>
                <div>
                    @pinnedmsg
                </div>
                @if (actable)
                {
                    <div align="right">
                        <MudButton Variant="Variant.Filled" Color="Color.Primary"
                               OnClick="FinishAction">Finished</MudButton>
                    </div>
                }

            </div>
            @foreach (var cainter in messages)
            {
                var obj = cainter.Get();
                if(obj is RespMessage msg && msg.TradeId == tradeid)
                {
                    var align = "left";
                    if (joinroom.Roles[msg.UserName] == "me")
                        align = "right";
                    if (joinroom.Roles[msg.UserName] == "dealer")
                        align = "center";
                    <div align="@align" class="para @(joinroom.Roles[msg.UserName])w">
                        <div>@msg.UserName</div>
                        <div class="@(joinroom.Roles[msg.UserName])msg">@msg.Text</div>
                    </div>
                }
                else if(obj is RespFile file && file.TradeId == tradeid)
                {
                    var align = "left";
                    if (joinroom.Roles[file.UserName] == "me")
                        align = "right";
                    if (joinroom.Roles[file.UserName] == "dealer")
                        align = "center";
                    <div align="@align" class="para @(joinroom.Roles[file.UserName])w">
                        <div>@file.UserName</div>
                        <div class="@(joinroom.Roles[file.UserName])msg">
                            <img class="thumb" src="@file.Url" @onclick="@(a => Zoom(file.Url))" /></div>
                    </div>
                }
            }
        </div>
    </div>

    <div class="inp ext">
        <MudTextField T="string" @ref="@inputTxt" Variant="Variant.Outlined" Lines="1"
                      OnKeyUp="@Enter" />
        <MudFab Color="Color.Primary" StartIcon="@Icons.Filled.EmojiEmotions"
                Size="Size.Small" OnClick="ToggleEmj" />
        <MudFab Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add"
                Size="Size.Small" OnClick="ToggleAdd" />
    </div>

    @if (showadd)
    {
        <div class="ext">
            <InputFile id="fileInput112" OnChange="UploadFiles" hidden multiple accept=".jpg, .jpeg, .png" />

            <MudButton
                   Variant="Variant.Filled"
                   StartIcon="@Icons.Filled.Image"
                   for="fileInput112">
                Send images
            </MudButton>

            <MudButton
                   Variant="Variant.Filled"
                   StartIcon="@Icons.Filled.Close"
                   >
                Close Trade
            </MudButton>

            <MudButton
                   Variant="Variant.Filled"
                   StartIcon="@Icons.Filled.Balance"
                   >
                Complaint
            </MudButton>
        </div>
    }

    @if (showemoji)
    {
        <!-- Emoji Keyboard -->
        <div class="emj">
            @foreach (var c in Emoji.MostCommonCollection)
            {
                <button type="button" @onclick="(() => AddEmoji(c))">@c</button>
            }
        </div>
    }

</div>

    <div @ref="@fullpage" class="fullpage" style="@fpstyle" @onclick="@(e => CloseFP())">

    </div>

@code {
    [Parameter]
    public string? tradeid { get; set; }

    [Inject]
    private IState<WebWalletState> walletState { get; set; }
    [Inject]
    IConfiguration Configuration { get; set; }
    [Inject] ISnackbar Snackbar { get; set; }
    [Inject] IJSRuntime JsRuntime { get; set; }
    [Inject] private IDialogService DialogService { get; set; }
    [Inject] ConnectionMethodsWrapper Realconn { get; set; }

    private List<RespContainer> messages = new List<RespContainer>();

    string pinnedmsg = "Connecting dealer and get update...";

    JoinRoomResponse joinroom;

    PinnedMessage lastpin;
    string pintitle;
    bool actable;

    ElementReference fullpage { get; set; }
    ElementReference msgsref { get; set; }
    MudTextField<string> inputTxt { get; set; }
    bool addmsg;
    bool showemoji, showadd, showfullpage;
    string fpstyle;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (addmsg)
        {
            await JsRuntime.InvokeVoidAsync("updateScroll", msgsref);
            addmsg = false;
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    protected override async Task OnInitializedAsync()
    {
        if (walletState.Value.wallet == null)
        {
            Navigation.NavigateTo("/wallet");
            return;
        }

        SubscribeToAction<RespContainer>(a =>
            {
                var obj = a.Get();
                if(obj.TradeId == tradeid)
                {
                    messages.Add(a);
                    addmsg = true;
                    InvokeAsync(() => StateHasChanged());
                }
                else
                {
                    Snackbar.Add($"New message for trade: {obj.TradeId.Shorten()}", Severity.Normal, config =>
                    {
                        config.Action = "Open Trade";
                        config.ActionColor = Color.Primary;
                        config.Onclick = async snackbar =>
                        {
                            await Help(obj.TradeId);
                        };
                    });
                }
            });

        SubscribeToAction<PinnedMessage>(a =>
            {
                if(a.TradeId == tradeid)
                {
                    lastpin = a;
                    pintitle = a.Mode switch
                    {
                        PinnedMode.Action => "Take Action",
                        PinnedMode.Wait => "Await",
                        PinnedMode.Notify => "",
                        _ => "",
                    };
                    actable = a.Mode == PinnedMode.Action;
                    pinnedmsg = a.Text;

                    InvokeAsync(() => StateHasChanged());
                }
                else
                {
                    if(a.Mode == PinnedMode.Action)
                    {
                        Snackbar.Add($"Trade changed. Need action: {a.Text}", Severity.Info);
                    }
                    else
                    {
                        Snackbar.Add($"Trade changed. {a.Text}", Severity.Normal);
                    }
                }
            });

        await JoinDealerRoom();
    }

    private async Task JoinDealerRoom()
    {
        joinroom = await Realconn.JoinRoom(new JoinRoomRequest
            {
                TradeID = tradeid,
                UserAccountID = walletState.Value.wallet.AccountId,
                Signature = Signatures.GetSignature(walletState.Value.wallet.PrivateKey, tradeid, walletState.Value.wallet.AccountId),
            });

        if (joinroom.Successful())
        {
            Snackbar.Add($"Join dealer room successfully.", Severity.Success);

            // populate history
            messages.AddRange(joinroom.History);
            addmsg = true;
        }
        else
        {
            Snackbar.Add($"Error join dealer room: {joinroom.ResultCode}", Severity.Error);
        }
    }

    private async Task Help(string newtradeid)
    {
        // rejoin room
        Navigation.NavigateTo($"/dealer/room/{newtradeid}");
        messages.Clear();
        lastpin = null;
        pintitle = null;
        actable = false;

        tradeid = newtradeid;
        await JoinDealerRoom();
        await InvokeAsync(() => StateHasChanged());
    } 

    void ToggleEmj()
    {
        showemoji = !showemoji;
        if (showemoji)
            showadd = false;
    }

    void ToggleAdd()
    {
        showadd = !showadd;
        if (showadd)
            showemoji = false;
    }

    //Add Emoji to Message
    protected async Task AddEmoji(string emoji)
    {
        inputTxt.Text += emoji;
    }

    private async Task Enter(KeyboardEventArgs e)
    {
        if (e.Code == "Enter" || e.Code == "NumpadEnter")
        {
            if(!string.IsNullOrWhiteSpace(inputTxt.Text))
            {
                await Send(inputTxt.Text);
                await inputTxt.Clear();
            }
        }
    }

    private async Task Send(string txt)
    {
        // PortableSignatures make a better compatibility
        if(Realconn.IsConnected)
        {
            await Realconn.Chat(new ChatMessage
                {
                    TradeId = tradeid,
                    AccountId = walletState.Value.wallet.AccountId,
                    Text = txt,
                    Signature = PortableSignatures.GetSignature(walletState.Value.wallet.PrivateKey,
                                    txt, walletState.Value.wallet.AccountId),
                });
        }
        else
        {
            Snackbar.Add($"Not connected to dealer. Please retry again.", Severity.Error);
        }
    }

    private async Task FinishAction()
    {
        var tradeblk = (await walletState.Value.wallet.RPC.GetLastBlockAsync(tradeid)).As<IOtcTrade>();
        var fiat = $"{tradeblk.Trade.fiat} {tradeblk.Trade.price * tradeblk.Trade.amount:N2}";

        if (tradeblk.OTStatus == OTCTradeStatus.Open &&
            tradeblk.OwnerAccountId == walletState.Value.wallet.AccountId)
        {
            // ask if your have paied
            var result = await DialogService.ShowMessageBox(
            "Warning",
                $"Please make sure you have paid {fiat} to the seller.",
                yesText: "Confirm!", cancelText: "Cancel");

            if (result != null && result.Value)
            {
                var payindret = await walletState.Value.wallet.OTCTradeBuyerPaymentSentAsync(tradeid);
                if (payindret.Successful())
                {
                    await Send("/fiatsent");

                    Snackbar.Add($"Successfully.", Severity.Success);
                }
                else
                {
                    Snackbar.Add($"Failed. {payindret.ResultCode}", Severity.Error);
                }
            }
        }

        if (tradeblk.OTStatus == OTCTradeStatus.FiatSent &&
            tradeblk.Trade.orderOwnerId == walletState.Value.wallet.AccountId)
        {
            // ask if your have paied
            var result = await DialogService.ShowMessageBox(
            "Warning",
                $"Please make sure you have received fiat payment of {fiat}.",
                yesText: "Confirm!", cancelText: "Cancel");

            if (result != null && result.Value)
            {
                var payindret = await walletState.Value.wallet.OTCTradeSellerGotPaymentAsync(tradeid);
                if (payindret.Successful())
                {
                    await Send("/fiatreceived");

                    Snackbar.Add($"Successfully.", Severity.Success);
                }
                else
                {
                    Snackbar.Add($"Failed. {payindret.ResultCode}", Severity.Error);
                }
            }
        }

    }

    private async Task UploadFiles(InputFileChangeEventArgs e)
    {
        var entries = e.GetMultipleFiles();
        //Do your validations here
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;
        //Snackbar.Add($"Files with {entries.FirstOrDefault().Size} bytes size are not allowed", Severity.Error);
        //Snackbar.Add($"Files starting with letter {entries.FirstOrDefault().Name.Substring(0, 1)} are not recommended", Severity.Warning);
        //Snackbar.Add($"This file has the extension {entries.FirstOrDefault().Name.Split(".").Last()}", Severity.Info);

        //TODO upload the files to the server
        var client = new DealerClient(Configuration["network"]);
        var wallet = walletState.Value.wallet;
        foreach (var f in entries)
        {
            try
            {
                int MAXALLOWEDSIZE = 5 * 1024 * 1024;      // 5MB

                if(f.Size > MAXALLOWEDSIZE)
                {
                    Snackbar.Add($"Files {f.Name} with {f.Size} bytes size are not allowed. (Max {MAXALLOWEDSIZE:N})", Severity.Error);
                    continue;
                }

                using (var stream = f.OpenReadStream(MAXALLOWEDSIZE))
                {
                    using (var memoryStream = new MemoryStream())
                    {
                        await stream.CopyToAsync(memoryStream);
                        var imageData = memoryStream.ToArray();

                        string hash, signature;
                        using (var sha = SHA256.Create())
                        {
                            byte[] hash_bytes = sha.ComputeHash(imageData);
                            hash = Base58Encoding.Encode(hash_bytes);
                        }
                        signature = PortableSignatures.GetSignature(wallet.PrivateKey, hash);

                        var ret = await client.UploadImageAsync(wallet.AccountId, signature, tradeid,
                            f.Name, imageData, f.ContentType);
                        if (ret.Successful())
                        {
                            await Realconn.SendFile(new FileMessage
                            {
                                AccountId = wallet.AccountId,
                                Signature = Signatures.GetSignature(wallet.PrivateKey, ret.Hash, wallet.AccountId),
                                TradeId = tradeid,
                                FileHash = ret.Hash,
                            });
                        }
                        else
                        {
                            Snackbar.Add($"Failed to upload image: {ret.ResultCode}", Severity.Error);
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Upload image error: {ex.Message}");
            }
        }
    }

    private async Task Zoom(string url)
    {
        fpstyle = $"background-image: url(\"{url}\"); display: block;";
    }

    private void CloseFP()
    {
        fpstyle = $"display: none;";
    }
}
