@page "/dealer/room/{tradeid}"
@using Microsoft.AspNetCore.SignalR.Client
@using UserLibrary.Data
@inject NavigationManager NavigationManager
@implements IAsyncDisposable

<h1>Trade Room</h1>
<p>for trade: @tradeid</p>

<div class="form-group">
    <label>
        User:
        <input @bind="userInput" />
    </label>
</div>
<div class="form-group">
    <label>
        Message:
        <input @bind="messageInput" size="50" />
    </label>
</div>
<button @onclick="Send" disabled="@(!wrapper?.IsConnected)">Send</button>
<button @onclick="Hist" >History</button>
<hr>

<ul id="messagesList">
    @foreach (var message in messages)
    {
        <li>@message</li>
    }
</ul>

@code {
    [Parameter]
    public string? tradeid { get; set; }

    private List<string> messages = new List<string>();
    private string? userInput;
    private string? messageInput;

    ConnectionMethodsWrapper? wrapper;

    protected override async Task OnInitializedAsync()
    {
        wrapper = new ConnectionMethodsWrapper(ConnectionFactoryHelper.CreateConnection(new Uri("https://localhost:7070/hub"), null));

        wrapper.RegisterOnFoo(a =>
        {
            messages.Add(a.FooPayload);
            StateHasChanged();
        });

        await wrapper.StartAsync();
    }

    private async Task Send()
    {
        await wrapper.InvokeFoo(messageInput);
        //   if (hubConnection is not null)
		//{
  //          await hubConnection.SendAsync("Publish", userInput, messageInput);
		//}
	}

    private async Task Hist()
	{

	}

    public async ValueTask DisposeAsync()
    {
        if (wrapper is not null)
        {
            await wrapper.DisposeAsync();
        }
    }
}
