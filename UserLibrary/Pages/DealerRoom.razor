@page "/dealer/room/{tradeid}"
@using Fluxor
@using Lyra.Data.Crypto
@using Microsoft.AspNetCore.SignalR.Client
@using Nebula.Store.WebWalletUseCase
@using UserLibrary.Data
@inject NavigationManager NavigationManager
@implements IAsyncDisposable

<div class="mag fh">

    <h1>Dealer Room</h1>
    <p>for trade: @tradeid</p>

    <div class="chatw">
        <div class="top">
            @pinnedmsg
        </div>
        @foreach (var msg in messages)
        {
            var align = "left";
            if (joinroom.Roles[msg.UserName] == "me")
                align = "right";
            if (joinroom.Roles[msg.UserName] == "dealer")
                align = "center";
            <div align="@align" class="para @(joinroom.Roles[msg.UserName])w">
                <div>@msg.UserName</div>
                <div class="@(joinroom.Roles[msg.UserName])msg">@msg.Text</div>
            </div>

        }
    </div>

    <div>
        <div class="form-group">
            <label>
                Message:
                <input @bind="messageInput" size="50" />
            </label>
        </div>
    </div>
    <MudButton Variant="Variant.Filled" Color="Color.Primary"
               Disabled="@(!(wrapper?.IsConnected) ?? false)" OnClick="Send">
        Send
    </MudButton>


</div>


@code {
    [Parameter]
    public string? tradeid { get; set; }

    [Inject]
    private IState<WebWalletState> walletState { get; set; }
    [Inject] ISnackbar Snackbar { get; set; }

    private List<RespMessage> messages = new List<RespMessage>();
    private string? userInput;
    private string? messageInput;

    string pinnedmsg = "Connecting dealer and get update...";
    ConnectionMethodsWrapper? wrapper;
    JoinRoomResponse joinroom;

    protected override async Task OnInitializedAsync()
    {
        wrapper = new ConnectionMethodsWrapper(ConnectionFactoryHelper.CreateConnection(new Uri("https://localhost:7070/hub"), null));

        wrapper.RegisterOnChat(a =>
        {
            messages.Add(a);
            StateHasChanged();
        });

        wrapper.RegisterOnPinned(a =>
        {
            pinnedmsg = a.Text;
            StateHasChanged();
        });

        await wrapper.StartAsync();

        joinroom = await wrapper.JoinRoom(new JoinRoomRequest
            {
                TradeID = tradeid,
                UserAccountID = walletState.Value.wallet.AccountId,
                Signature = Signatures.GetSignature(walletState.Value.wallet.PrivateKey, tradeid, walletState.Value.wallet.AccountId),
            });

        if (joinroom.Successful())
        {
            Snackbar.Add($"Join dealer room successfully.", Severity.Success);

            // populate history
            messages.AddRange(joinroom.History);
        }
        else
        {
            Snackbar.Add($"Error join dealer room: {joinroom.ResultCode}", Severity.Error);
        }
    }

    private async Task Send()
    {
        await wrapper.Chat(new ChatMessage
            {
                TradeId = tradeid,
                AccountId = walletState.Value.wallet.AccountId,
                Text = messageInput,
                Signature = Signatures.GetSignature(walletState.Value.wallet.PrivateKey,
                        messageInput, walletState.Value.wallet.AccountId),
            });
        messageInput = "";
    }

    private async Task Hist()
    {

    }

    public async ValueTask DisposeAsync()
    {
        if (wrapper is not null)
        {
            await wrapper.DisposeAsync();
        }
    }
}
