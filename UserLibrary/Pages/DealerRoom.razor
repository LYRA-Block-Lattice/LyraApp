@page "/dealer/room/{tradeid}"
@using Fluxor
@using Lyra.Data.API.WorkFlow
@using Lyra.Data.Crypto
@using Lyra.Data.Shared
@using Microsoft.AspNetCore.SignalR.Client
@using Nebula.Store.WebWalletUseCase
@using UserLibrary.Data
@inject NavigationManager NavigationManager

<div class="mag fh">

    <h1>Dealer Room</h1>
    <p>for trade: @(tradeid.Shorten())</p>

    <div class="scr">
        <div class="chatw" @ref="msgsref">
            <div class="top mud-elevation-3">
                <div class="act">
                    @pintitle
                </div>
                <div>
                    @pinnedmsg
                </div>
@if(actable)
                {
                <div align="right">
                    <MudButton Variant="Variant.Filled" Color="Color.Primary"
                        OnClick="FinishAction">Finished</MudButton>
                </div>
                }

            </div>
            @foreach (var msg in messages)
            {
                var align = "left";
                if (joinroom.Roles[msg.UserName] == "me")
                    align = "right";
                if (joinroom.Roles[msg.UserName] == "dealer")
                    align = "center";
                <div align="@align" class="para @(joinroom.Roles[msg.UserName])w">
                    <div>@msg.UserName</div>
                    <div class="@(joinroom.Roles[msg.UserName])msg">@msg.Text</div>
                </div>

            }
        </div>
    </div>

    <div class="inp">
        <MudTextField @bind-Value="@messageInput" Variant="Variant.Outlined" Lines="3" />
        <MudButton Variant="Variant.Filled" Color="Color.Primary"
                   Disabled="@(!(executor.HotLine?.IsConnected) ?? false)" OnClick="Send">
            Send
        </MudButton>
    </div>
</div>


@code {
    [Parameter]
    public string? tradeid { get; set; }

    [Inject]
    private IState<WebWalletState> walletState { get; set; }
    [Inject] ISnackbar Snackbar { get; set; }
    [Inject] IJSRuntime JsRuntime { get; set; }
    [Inject] private IDialogService DialogService { get; set; }
    [Inject] PeriodicExecutor executor { get; set; }

    private List<RespMessage> messages = new List<RespMessage>();
    private string? userInput;
    private string? messageInput;

    string pinnedmsg = "Connecting dealer and get update...";
    
    JoinRoomResponse joinroom;

    PinnedMessage lastpin;
    string pintitle;
    bool actable;

    ElementReference msgsref { get; set; }
    bool addmsg;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(addmsg)
        {
            await JsRuntime.InvokeVoidAsync("updateScroll", msgsref);
            addmsg = false;
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    protected override async Task OnInitializedAsync()
    {
        if(walletState.Value.wallet == null)
        {
            NavigationManager.NavigateTo("/wallet");
            return;
        }

        executor.OnDealerMessage += a =>
        {
            messages.Add(a);
            addmsg = true;
            InvokeAsync(() => StateHasChanged());
        };

        executor.OnDealerPinnedMessage += a =>
        {
            lastpin = a;
            pintitle = a.Mode switch
            {
                PinnedMode.Action => "Take Action",
                PinnedMode.Wait => "Await",
                PinnedMode.Notify => "",
                _ => "",
            };
            actable = a.Mode == PinnedMode.Action;
            pinnedmsg = a.Text;

            InvokeAsync(() => StateHasChanged());
        };

        joinroom = await executor.HotLine.JoinRoom(new JoinRoomRequest
            {
                TradeID = tradeid,
                UserAccountID = walletState.Value.wallet.AccountId,
                Signature = Signatures.GetSignature(walletState.Value.wallet.PrivateKey, tradeid, walletState.Value.wallet.AccountId),
            });

        if (joinroom.Successful())
        {
            Snackbar.Add($"Join dealer room successfully.", Severity.Success);

            // populate history
            messages.AddRange(joinroom.History);
            addmsg = true;
        }
        else
        {
            Snackbar.Add($"Error join dealer room: {joinroom.ResultCode}", Severity.Error);
        }
    }

    private async Task Send()
    {
        await Send(messageInput);
    }

    private async Task Send(string txt)
    {
        await executor.HotLine.Chat(new ChatMessage
            {
                TradeId = tradeid,
                AccountId = walletState.Value.wallet.AccountId,
                Text = txt,
                Signature = Signatures.GetSignature(walletState.Value.wallet.PrivateKey,
                            txt, walletState.Value.wallet.AccountId),
            });
        messageInput = "";
    }

    private async Task FinishAction()
    {
        var tradeblk = (await walletState.Value.wallet.RPC.GetLastBlockAsync(tradeid)).As<IOtcTrade>();
        var fiat = $"{tradeblk.Trade.fiat} {tradeblk.Trade.price * tradeblk.Trade.amount:N2}";

        if(tradeblk.OTStatus == OTCTradeStatus.Open &&
            tradeblk.OwnerAccountId == walletState.Value.wallet.AccountId)
        {
            // ask if your have paied
            var result = await DialogService.ShowMessageBox(
            "Warning",
                $"Please make sure you have paid {fiat} to the seller.",
                yesText: "Confirm!", cancelText: "Cancel");

            if (result != null && result.Value)
            {
                var payindret = await walletState.Value.wallet.OTCTradeBuyerPaymentSentAsync(tradeid);
                if(payindret.Successful())
                {
                    await Send("/fiatsent");

                    Snackbar.Add($"Successfully.", Severity.Success);
                }
                else
                {
                    Snackbar.Add($"Failed. {payindret.ResultCode}", Severity.Error);
                }
            }
        }

        if(tradeblk.OTStatus == OTCTradeStatus.FiatSent &&
            tradeblk.Trade.orderOwnerId == walletState.Value.wallet.AccountId)
        {
            // ask if your have paied
            var result = await DialogService.ShowMessageBox(
            "Warning",
                $"Please make sure you have received fiat payment of {fiat}.",
                yesText: "Confirm!", cancelText: "Cancel");

            if (result != null && result.Value)
            {
                var payindret = await walletState.Value.wallet.OTCTradeSellerGotPaymentAsync(tradeid);
                if(payindret.Successful())
                {
                    await Send("/fiatreceived");

                    Snackbar.Add($"Successfully.", Severity.Success);
                }
                else
                {
                    Snackbar.Add($"Failed. {payindret.ResultCode}", Severity.Error);
                }
            }
        }
        
    }

}
