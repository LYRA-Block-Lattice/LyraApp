@page "/login"
@page "/login/{src}"
@using Blazored.LocalStorage
@using Fluxor
@using Nebula.Store.WebWalletUseCase
@using UserLibrary.Data
@inject NavigationManager Navigation

@if (busy)
{
    <div style="z-index: 5;" class="spinner"></div>
}
else if(src == "key")
{
    <UserLibrary.Components.CreateWithPrivateKey OnFinished="@(() => {hasStore = true; Navigation.NavigateTo("/login");})" />
}
else if(hasStore)
{
    <UserLibrary.Components.OpenWithPassword />
}
else
{
    <UserLibrary.Components.CreateWithPassword OnFinished="@(() => {hasStore = true;})" />
}

@code{
    [Parameter]
    public string src { get; set; }

    [Inject]
    private IState<WebWalletState> walletState { get; set; }

    [Inject]
    private IDispatcher Dispatcher { get; set; }

    [Inject]
    public ILocalStorageService localStorage { get; set; }
    [Inject] NebulaConsts _consts { get; set; }

    bool hasStore = false;
    bool busy = true;

    protected async override Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        if(walletState.Value.wallet != null)
        {
            Navigation.NavigateTo("wallet");
        }       
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            busy = true;
            StateHasChanged();

            // convert old store
            var oldDataExists = await localStorage.ContainKeyAsync("nebdat");
            if(oldDataExists)
            {
                var wcjson = await localStorage.GetItemAsync<string>(_consts.NebulaStorName);
                var wc = new WalletContainer(wcjson);

                wc.AddOrUpdate("Default", await localStorage.GetItemAsync<byte[]>("nebdat"), $"Migrated: {DateTime.Now}");
                await localStorage.SetItemAsync(_consts.NebulaStorName, wc.ToString());
                await localStorage.RemoveItemAsync("nebdat");
            }
            // end

            if (await localStorage.ContainKeyAsync(_consts.NebulaStorName))
                hasStore = true;
            else
                hasStore = false;

            busy = false; 
            StateHasChanged();
        }
    }
}