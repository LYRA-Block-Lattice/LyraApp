@page "/settings"
@using Fluxor
@using Microsoft.Extensions.Configuration
@using Nebula.Store.WebWalletUseCase
@using BlazorZXingJs
@using System.Reflection
@inject NavigationManager Navigation
@inject IConfiguration Configuration

<div class="mag">
    @if (walletState.Value.wallet == null)
    {
        <div>
        <a href="/wallet">
            <MudButton Variant="Variant.Filled" FullWidth="true" Color="Color.Primary" class="rounded-pill">
                <MudIcon Icon="@Icons.Filled.LockOpen" />
                Open Wallet
            </MudButton>
        </a>
        </div>

            <div>

                <WalletsManager />

            </div>
    }
    else
    {
        
        <div class="wrap-all-balance setting-sect">
            <div class="all-balance">
                <div class="coin-card">
                    <select name="network" id="" style="background-color: white;">
                        <option value="">Mainnet</option>
                        <option value="">TestNet</option>
                    </select>
                </div>
                
                <div class="coin-card"  @onclick="SaveSettings">
                    Save
                </div>
                <div class="coin-card">
                    <a style="color: #272c34ff;" href="/backup">Backup wallet</a>
                </div>
                <div class="coin-card" @onclick="CloseWallet">
                    Logout
                </div>
            </div>
            <div class="voting-sect">
                <p>Your are now voting for: @walletState.Value.wallet.VoteFor</p>
                <MudTextField T="string" Label="Vote For Address" @bind-Value="@voteAddr" />
                <div style="margin-top: 20px;">
                    <p style="color: red">Please save private key properly if you want to open this wallet again.</p>
                </div>
            </div>
             @* <MudButton Variant="Variant.Filled" Color="Color.Primary" @onclick="SaveSettings">Save</MudButton>
            <a href="/backup"><MudButton Variant="Variant.Filled" Color="Color.Primary">Backup Wallet</MudButton></a>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" @onclick="CloseWallet">Close Wallet</MudButton> *@
        </div>
    }

    <div style="font-size: xx-small;position:absolute;bottom:20px;">
        <hr>
        Main Program Version: @(Assembly.GetEntryAssembly().GetName().Version)<br />
        User Library Version: @(typeof(UserLibrary.Data.WalletView).Assembly.GetName().Version)
    </div>
</div>
@code {
    [Inject]
    private IState<WebWalletState> walletState { get; set; }

    [Inject]
    private IDispatcher Dispatcher { get; set; }

    [Inject]
    private IJSRuntime JS { get; set; }

    [Inject] private IDialogService DialogService { get; set; }
    [Inject] ISnackbar Snackbar { get; set; }

    string voteAddr, altDisplay;
    string bexpurl;
    bool fetching;
    List<string> txs;

    protected override void OnInitialized()
    {
        Dispatcher.Dispatch(new WebWalletChangeTitleAction { title = "App Settings" });
        bexpurl = Configuration["network"] == "mainnet" ? "https://nebula.lyra.live" : "https://nebulatestnet.lyra.live";
        base.OnInitialized();
    }

    private void ToggleKey(MouseEventArgs e)
    {
        if (altDisplay == "************")
            altDisplay = walletState?.Value?.wallet?.PrivateKey;
        else
            altDisplay = "************";
    }

    private void CloseWallet(MouseEventArgs e)
    {
        Dispatcher.Dispatch(new WebWalletCloseAction());
        Navigation.NavigateTo("/login");
    }

    private void SaveSettings(MouseEventArgs e)
    {
        Dispatcher.Dispatch(new WebWalletSaveSettingsAction { VoteFor = voteAddr });
    }

    private async Task Transactions()
    {
        fetching = true;
        StateHasChanged();
        try
        {
            var client = LyraRestClient.Create(Configuration["network"], Environment.OSVersion.ToString(), "Nebula", "1.4");

            var result = await walletState.Value.wallet.SyncAsync(client);
            txs = new List<string>();
            if (result == Lyra.Core.Blocks.APIResultCodes.Success)
            {
                var accHeight = await client.GetAccountHeightAsync(walletState.Value.wallet.AccountId);
                Dictionary<string, long> oldBalance = null;
                var start = accHeight.Height - 10;
                if (start < 1)
                    start = 1;          // only show the last 100 tx
                for (long i = start; i <= accHeight.Height; i++)
                {
                    var blockResult = await client.GetBlockByIndexAsync(walletState.Value.wallet.AccountId, i);
                    var block = blockResult.GetBlock() as TransactionBlock;
                    if (block == null)
                        txs.Add("Null");
                    else
                    {
                        var str = $"No. {block.Height} {block.TimeStamp}, ";
                        if (block is SendTransferBlock sb)
                            str += $"Send to {sb.DestinationAccountId}";
                        else if (block is ReceiveTransferBlock rb)
                        {
                            if (rb.SourceHash == null)
                            {
                                str += $"Genesis";
                            }
                            else
                            {
                                var srcBlockResult = await client.GetBlockAsync(rb.SourceHash);
                                var srcBlock = srcBlockResult.GetBlock() as TransactionBlock;
                                str += $"Receive from {srcBlock.AccountID}";
                            }
                        }
                        str += BalanceDifference(oldBalance, block.Balances);
                        str += $" Balance: {string.Join(", ", block.Balances.Select(m => $"{m.Key}: {m.Value.ToBalanceDecimal()}"))}";

                        txs.Add(str);

                        oldBalance = block.Balances;
                    }
                }
            }
            txs.Reverse();            
        }
        catch (Exception ex)
        {
            Console.WriteLine($"In Transactions: {ex}");
        }
        fetching = false;
        StateHasChanged();
    }

    private string BalanceDifference(Dictionary<string, long> oldBalance, Dictionary<string, long> newBalance)
    {
        if (oldBalance == null)
        {
            return " Amount: " + string.Join(", ", newBalance.Select(m => $"{m.Key} {m.Value.ToBalanceDecimal()}"));
        }
        else
        {
            return " Amount: " + string.Join(", ", newBalance.Select(m => $"{m.Key} {(decimal)(m.Value - (oldBalance.ContainsKey(m.Key) ? oldBalance[m.Key] : 0)) / LyraGlobal.TOKENSTORAGERITO}"));
        }
    }
}
