@page "/staking"

@using Fluxor
@using Nebula.Store.WebWalletUseCase
@implements IDisposable

<div class="mag">
@if(walletState.Value.wallet == null)
{
    <a href="/wallet">
        <MudButton Variant="Variant.Filled" FullWidth="true" Color="Color.Primary" class="rounded-pill">
            <MudIcon Icon="@Icons.Filled.LockOpen" />
            Open Wallet
        </MudButton>
    </a>
}
else
{
    @if (walletState.Value.stkAccounts != null)
    {
        <UserLibrary.Components.Staking />
    }
    else
    {
        Dispatcher.Dispatch(new WebWalletStakingAction { wallet = walletState.Value.wallet });
        <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-7" />
    }
}

</div>

@code {
    [Inject]
    private IState<WebWalletState> walletState { get; set; }

    [Inject]
    private IDispatcher Dispatcher { get; set; }

    protected override void OnInitialized()
    {
        walletState.StateChanged += this.WalletChanged;
        Dispatcher.Dispatch(new WebWalletChangeTitleAction { title = "Lyra Staking" });
        base.OnInitialized();
    }

    private void WalletChanged(object sender, WebWalletState wallet)
    {
        InvokeAsync(() =>
        {
            StateHasChanged();
        }
        );
    }
    
    public void Dispose()
    {
        walletState.StateChanged -= this.WalletChanged;
    }
}
