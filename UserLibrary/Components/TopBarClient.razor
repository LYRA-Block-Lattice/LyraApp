@namespace UserLibrary.Components
@inherits FluxorComponent

@using Blazored.LocalStorage
@using Fluxor
@using Fluxor.Blazor.Web.Components
@using Lyra.Core.API
@using Lyra.Core.Accounts
@using Lyra.Data.API.WorkFlow
@using Lyra.Data.Crypto
@using Lyra.Data.Shared
@using Microsoft.Extensions.Configuration
@using Nebula.Store.WebWalletUseCase
@using Newtonsoft.Json
@using System.Globalization
@using UserLibrary.Data
@using UserLibrary.Store.NotificationUseCase
@inject IConfiguration Configuration
@inject NavigationManager Navigation

<div class="top-row">
    <div class="tg" @onclick="@(() => Navigation.NavigateTo("/"))">
        @title
    </div>
    <div class="tg">
        <div>@net &nbsp;</div>
        <div>
            <MudMenu AnchorOrigin="Origin.BottomLeft" TransformOrigin="Origin.TopRight">
                <ActivatorContent>
                    <div class="icon">
                        <svg t="1640578476860" class="icon" viewBox="0 0 1024 1024" preserveAspectRatio="xMaxYMax meet" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="2994" width="24" height="24"><path d="M480 64A416.64 416.64 0 0 0 64 480 416.64 416.64 0 0 0 480 896 416.64 416.64 0 0 0 896 480 416.64 416.64 0 0 0 480 64z m0 64C674.752 128 832 285.248 832 480S674.752 832 480 832A351.552 351.552 0 0 1 128 480C128 285.248 285.248 128 480 128zM448 256v192H256v64h192v192h64V512h192V448H512V256z" fill="#ffffff" p-id="2995"></path></svg>
                    </div>
                </ActivatorContent>

                <ChildContent>
                    <MudMenuItem>
                        <a href="/scan">
                            <div class="tg">
                                <div>
                                    <svg t="1640580184239" class="icon" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="3899" width="32" height="32"><path d="M128 669.866667v154.133333a72 72 0 0 0 67.776 71.893333l4.224 0.106667H354.133333c4.693333 0 8.533333 3.84 8.533334 8.533333v46.933334a8.533333 8.533333 0 0 1-8.533334 8.533333H205.482667A141.482667 141.482667 0 0 1 64 818.517333V669.866667c0-4.693333 3.84-8.533333 8.533333-8.533334h46.933334c4.693333 0 8.533333 3.84 8.533333 8.533334z m832 0v148.650666A141.482667 141.482667 0 0 1 818.517333 960H669.866667a8.533333 8.533333 0 0 1-8.533334-8.533333v-46.933334c0-4.693333 3.84-8.533333 8.533334-8.533333h154.133333a72 72 0 0 0 71.893333-67.776l0.106667-4.224V669.866667c0-4.693333 3.84-8.533333 8.533333-8.533334h46.933334c4.693333 0 8.533333 3.84 8.533333 8.533334z m0-170.666667v46.933333a8.533333 8.533333 0 0 1-8.533333 8.533334H72.533333a8.533333 8.533333 0 0 1-8.533333-8.533334v-46.933333c0-4.693333 3.84-8.533333 8.533333-8.533333h878.933334c4.693333 0 8.533333 3.84 8.533333 8.533333z m-597.333333-426.666667v46.933334a8.533333 8.533333 0 0 1-8.533334 8.533333H200a72 72 0 0 0-71.893333 67.776L128 200V354.133333a8.533333 8.533333 0 0 1-8.533333 8.533334H72.533333a8.533333 8.533333 0 0 1-8.533333-8.533334V205.482667A141.482667 141.482667 0 0 1 205.482667 64H354.133333c4.693333 0 8.533333 3.84 8.533334 8.533333zM818.517333 64A141.482667 141.482667 0 0 1 960 205.482667V354.133333a8.533333 8.533333 0 0 1-8.533333 8.533334h-46.933334a8.533333 8.533333 0 0 1-8.533333-8.533334V200a72 72 0 0 0-67.776-71.893333L824 128H669.866667a8.533333 8.533333 0 0 1-8.533334-8.533333V72.533333c0-4.693333 3.84-8.533333 8.533334-8.533333h148.650666z" fill="#333333" p-id="3900"></path></svg>
                                </div>
                                <div>
                                    Scan to Pay
                                </div>
                            </div>
                        </a>
                    </MudMenuItem>
                    @if(menus != null)
                    {
                        <MudDivider />

                        @foreach(var kvp in menus)
                        {
                            <MudMenuItem OnClick="@(a => gonew(kvp.Value))">@kvp.Key</MudMenuItem>
                        }
                    }
                </ChildContent>
            </MudMenu>
        </div>
    </div>
</div>

@code
{
    [Inject]
    private IState<WebWalletState>? walletState { get; set; }
    [Inject]
    private IDispatcher Dispatcher { get; set; }

    [Inject] ISnackbar Snackbar { get; set; }
    [Inject] DealerConnMgr wrapper { get; set; }
    [Inject] ILyraAPI Client { get; set; }
    [Inject] IConfiguration _config { get; set; }
    [Inject] ILocalStorageService localStorage { get; set; }
    [Inject] NebulaConsts _consts { get; set; }

    MudMenu mnu;

    RenderFragment? banner;
    string title = "Lyra";
    string net = "";
    //string cururl;

    Dictionary<string, string> menus;

    protected override async Task OnInitializedAsync()
    {
        net = Configuration["network"];
        if (net == "mainnet")
            net = "";

        await base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {            
            try
            {
                await AttachEvents();
                await InitSignalR();
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Error init: {ex}", Severity.Warning);
            }
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    //async Task SetLanguage()
    //{
    //    var cultureFromLS = await localStorage.GetItemAsync<string>("culture");

    //    CultureInfo culture;

    //    if (cultureFromLS != null)
    //    {
    //        culture = new CultureInfo(cultureFromLS);
    //    }
    //    else
    //    {
    //        culture = new CultureInfo("en-US");
    //    }

    //    CultureInfo.DefaultThreadCurrentCulture = culture;
    //    CultureInfo.DefaultThreadCurrentUICulture = culture; 
    //}

    protected async Task AttachEvents()
    {
        SubscribeToAction<WebWalletChangeTitleAction>(
            async x =>
            {
                title = x.title;
                menus = x.menus;
                await InvokeAsync(() => StateHasChanged());
            }
            );
        SubscribeToAction<WebWalletResultAction>(async a =>
            {
                await WalletChanged(null, a.wallet);
            });

        SubscribeToAction<PreferenceContainer>(async pc =>
            {
                await ResetConn(pc);
            });

        SubscribeToAction<WebWalletCloseAction>(async a =>
            {
                await WalletChanged(null, null);
            });

        SubscribeToAction<RespContainer>(ax =>
            {
                if (Navigation.Uri.Contains("/dealer/room"))
                    return;

                var obj = ax.Get();

                if (obj is RespMessage a)
                {
                    Snackbar.Add($"{a.UserName}: {a.Text}", Severity.Normal, config =>
                    {
                        config.Action = "Open Trade";
                        config.ActionColor = Color.Primary;
                        config.Onclick = snackbar =>
                        {
                            Help(a.TradeId);
                            return Task.CompletedTask;
                        };
                    });
                }
                else
                if (obj is RespFile fx)
                {
                    Snackbar.Add($"{fx.UserName} send you a file: {fx.FileName}", Severity.Normal, config =>
                    {
                        config.Action = "Open Trade";
                        config.ActionColor = Color.Primary;
                        config.Onclick = snackbar =>
                        {
                            Help(fx.TradeId);
                            return Task.CompletedTask;
                        };
                    });
                }
            });
        SubscribeToAction<PinnedMessage>(a =>
            {
                // if in current trade's room, bypass notification.
                if (Navigation.Uri.Contains("/dealer/room") &&
                        Navigation.Uri.Contains(a.TradeId))
                    return;

                var title = a.Mode switch
                {
                    PinnedMode.Action => "Take Action: ",
                    PinnedMode.Wait => "Await: ",
                    PinnedMode.Notify => "",
                    _ => "",
                };

                Snackbar.Add($"{title}{a.Text}", Severity.Normal, config =>
                {
                    config.Action = "Open Trade";
                    config.ActionColor = Color.Primary;
                    config.Onclick = snackbar =>
                    {
                        Help(a.TradeId);
                        return Task.CompletedTask;
                    };
                });
            });

        SubscribeToAction<AccountChangedEvent>(achgevt =>
            {
                if (achgevt.ChangeType == AccountChangeTypes.Receive)
                {
                    Dispatcher.Dispatch(new WebWalletGotSendToMeAction());

                    if (Navigation.Uri.Contains("/wallet"))
                    {
                        Snackbar.Add($"Incoming transfer from: {achgevt.PeerAccountId.Shorten()}", Severity.Success);
                    }
                    else
                    {
                        Snackbar.Add($"Incoming transfer from: {achgevt.PeerAccountId.Shorten()}", Severity.Success, config =>
                    {
                        config.Action = "Open Wallet";
                        config.ActionColor = Color.Primary;
                        config.Onclick = snackbar =>
                        {
                            GoWallet();
                            return Task.CompletedTask;
                        };
                    });
                    }
                }
                else if (achgevt.ChangeType == AccountChangeTypes.SendReceived)
                {
                    Snackbar.Add($"Your send to: {achgevt.PeerAccountId.Shorten()} is received.", Severity.Success);
                }
                else if (achgevt.ChangeType == AccountChangeTypes.Contract)
                {
                    Snackbar.Add($"Your contract {achgevt.PeerAccountId.Shorten()} is changed.", Severity.Success);
                }
            });

        await base.OnInitializedAsync();
    }

    async Task ResetConn(PreferenceContainer pc)
    {
        try
        {
            PreferenceContainer pc2 = pc ?? new PreferenceContainer();
            var mngrs = new Dictionary<string, Uri>();
            foreach (var id in pc2.GetAllTrusted() ?? new List<string>() { _consts.TrustedDealerIds[0] })
            {
                var dlret = await Client.GetLastBlockAsync(id);
                if (dlret.Successful())
                {
                    var d = dlret.As<IDealer>();
                    mngrs.Add(id, new Uri(d.Endpoint));
                }
            }

            await wrapper.SwitchDealerAsync(mngrs, pc2.PriceFeedingDealerID ?? _consts.TrustedDealerIds[0]);

            if (walletState.Value.IsOpening)
            {
                var lsb = await Client.GetLastServiceBlockAsync();
                var wlt = walletState.Value.wallet;
                await wrapper.Join(new JoinRequest
                            {
                                UserAccountID = wlt.AccountId,
                                Signature = Signatures.GetSignature(wlt.PrivateKey, lsb.GetBlock().Hash, wlt.AccountId),
                            });
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Exception reset connection: {ex}", Severity.Error);
        }
    }

    async Task InitSignalR()
    {
        var storStr = await localStorage.GetItemAsync<string>(_consts.PrefStorName) ?? "{}";
        var pc = JsonConvert.DeserializeObject<PreferenceContainer>(storStr);

        await ResetConn(pc);

        wrapper.RegisterOnChat(a => Dispatcher.Dispatch(a));
        wrapper.RegisterOnPinned(a => Dispatcher.Dispatch(a));
        wrapper.RegisterOnEvent(a =>
            {
                try
                {
                    var evt = a.Get();

                    if (evt is AccountChangedEvent achgevt)
                    {
                        Dispatcher.Dispatch(achgevt);
                    }
                    else if (evt is ContractChangeEvent cchg)
                    {
                        Dispatcher.Dispatch(cchg);
                    }
                    else if (evt is WorkflowEvent wfevt)
                    {
                        Dispatcher.Dispatch(wfevt);
                    }
                    else if (evt is RespQuote quote)
                    {
                        Dispatcher.Dispatch(new HotUpdateResultAction
                                    {
                                        LatestPrices = quote.Prices
                                    });
                        Dispatcher.Dispatch(new MarketUpdated());
                    }
                    else
                    {
                        // unknown?
                        Snackbar.Add($"Unknown Event: {evt}", Severity.Warning);
                    }
                }
                catch(Exception ex)
                {
                    Snackbar.Add($"Exception in RegisterOnEvent: {ex}", Severity.Error);
                }
            });

        Dispatcher.Dispatch(new HotUpdateAction());
    }

    private void Help(string tradeid)
    {
        Navigation.NavigateTo($"/dealer/room/{tradeid}");
    }

    private void GoWallet()
    {
        Navigation.NavigateTo($"/wallet");
    }

    private async Task WalletChanged(object sender, Wallet wallet)
    {
        try
        {
            decimal balance1 = 0;
            if (wallet != null)
            {
                var blk = wallet.GetLastSyncBlock();
                if (blk != null)
                {
                    if (blk.Balances.ContainsKey("LYR"))
                        balance1 = blk.Balances["LYR"].ToBalanceDecimal();

                    var bs = $"{balance1:N2}";
                    banner =
    @<div>Balance: <b>@bs</b> LYR</div>
            ;
                }
                else
                {
                    banner =
    @<div>Wallet is empty.</div>
            ;
                }
            }
            else
            {
                banner =
        @<div>Wallet is not opened.</div>
    ;
            }

            if (wallet != null)
            {
                var lsb = await Client.GetLastServiceBlockAsync();
                var wlt = walletState.Value.wallet;
                await wrapper.Join(new JoinRequest
                    {
                        UserAccountID = wlt.AccountId,
                        Signature = Signatures.GetSignature(wlt.PrivateKey, lsb.GetBlock().Hash, wlt.AccountId),
                    });
            }

            await InvokeAsync(() => StateHasChanged());
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Exception in WalletChanged: {ex}", Severity.Error);
        }
    }

    private void gonew(string url)
    {
        Navigation.NavigateTo(url);
    }
}