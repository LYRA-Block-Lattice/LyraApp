@using Fluxor
@using Fluxor.Blazor.Web.Components
@using Lyra.Data.API.WorkFlow
@using Lyra.Data.Shared
@using Microsoft.Extensions.Configuration
@using Nebula.Store.WebWalletUseCase
@inherits FluxorComponent

<div align="left">
    <RadzenDataGrid TItem="IOtcTrade" Data="trades"
        AllowColumnResize="true" AllowSorting="true" PageSize="10" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true"    
    >
        <Columns>
            <RadzenDataGridColumn TItem="IOtcTrade" Property="TimeStamp" Title="Time Stamp"  Width="180px"/>
            <RadzenDataGridColumn TItem="IOtcTrade" Title="Dir" Width="60px">
                <Template Context="trade">
                    <a target="_blank" href="@(LyraGlobal.GetBlockViewUrl(Configuration["network"], trade.AccountID))">
                        @GetTradeDir(trade)
                    </a>
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="IOtcTrade" Title="Crypto"  Width="90px">
                <Template Context="trade">                    
                        @(trade.Trade.crypto.Replace("tether/", "$"))
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="IOtcTrade" Property="Trade.amount" Title="Amount"  Width="70px" />
            <RadzenDataGridColumn TItem="IOtcTrade" Property="Trade.price" Title="Price"  Width="70px"/>
            <RadzenDataGridColumn TItem="IOtcTrade" Property="Trade.fiat" Title="Fiat"  Width="60px"/>
            <RadzenDataGridColumn TItem="IOtcTrade" Property="OTStatus" Title="Status" Width="100px"/>
            <RadzenDataGridColumn TItem="IOtcTrade" Title="Actions">
                <Template Context="trade">
                    <div>
                        <a href="/dealer/room/@trade.AccountID">
                            <MudButton Variant="MudBlazor.Variant.Filled" Color="Color.Secondary">Chat</MudButton>
                        </a>
                        @if((trade as IOtcTrade).OTStatus == OTCTradeStatus.CryptoReleased)
                        {
                            <MudButton Variant="MudBlazor.Variant.Filled" OnClick="@(() => Comment(trade.AccountID))" Color="Color.Tertiary">Comment</MudButton>
                        }
                    </div>
                </Template>
            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>

</div>

@code {
    [Inject]
    IConfiguration Configuration { get; set; }

    [Inject]
    private IState<WebWalletState> walletState { get; set; }

    [Inject] ISnackbar Snackbar { get; set; }
    [Inject] NavigationManager Navigation { get; set; }

    List<IOtcTrade> trades = new List<IOtcTrade>();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender && walletState.Value.wallet != null)
        {
            await Refresh();

            SubscribeToAction<ContractChangeEvent>(async cce =>
            {
                await Refresh();
                await InvokeAsync(() => StateHasChanged());
            });
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    async Task Refresh()
    {
        // get all current trades
        var ret = await walletState.Value.wallet.RPC.FindOtcTradeAsync(walletState.Value.wallet.AccountId, false, 0, 10);
        if (ret.Successful())
        {
            trades = ret.GetBlocks()
                .OrderByDescending(a => a.TimeStamp)
                //.Take(3)
                .Cast<IOtcTrade>().ToList();
            StateHasChanged();
        }
        else
        {
            Snackbar.Add($"Error getting transactions: {ret.ResultCode.Humanize()}", Severity.Error);
        }
    }

    string GetTradeDir(IOtcTrade trade)
    {
        var dir = "Buy";
        if (trade.Trade.dir == TradeDirection.Buy && trade.OwnerAccountId == walletState.Value.wallet.AccountId)
            dir = "Buy";
        if (trade.Trade.dir == TradeDirection.Buy && trade.Trade.orderOwnerId == walletState.Value.wallet.AccountId)
            dir = "Sell";
        if (trade.Trade.dir == TradeDirection.Sell && trade.OwnerAccountId == walletState.Value.wallet.AccountId)
            dir = "Sell";
        if (trade.Trade.dir == TradeDirection.Sell && trade.Trade.orderOwnerId == walletState.Value.wallet.AccountId)
            dir = "Buy";
        return dir;
    }

    async Task Comment(string accountId)
    {
        Navigation.NavigateTo($"/dealer/comment/{accountId}");
    }
}
