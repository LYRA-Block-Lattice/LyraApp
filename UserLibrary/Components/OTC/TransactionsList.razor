@using Fluxor
@using Lyra.Data.API.WorkFlow
@using Lyra.Data.Shared
@using Microsoft.Extensions.Configuration
@using Nebula.Store.WebWalletUseCase

<div>
    @foreach(var trade in trades)
    {
        var dir = "Buy";
        if((trade as IOtcTrade).Trade.orderOwnerId == walletState.Value.wallet.AccountId)
        {
            dir = "Sell";
        }
        <a href="/dealer/room/@trade.AccountID">
        <div class="container">
            <div class="nw">
                <div> @trade.AccountID.Shorten() </div>
            </div>
            <div class="nw">
                <div>@dir @((trade as IOtcTrade).Trade.crypto) </div>
            </div>
            <div>
                @trade.TimeStamp
                @*<MudButton Variant="Variant.Filled" OnClick="@ShowCreateTradeUI" Color="Color.Primary">@(Otc.Order.dir == TradeDirection.Sell ? "Buy" : "Sell")</MudButton>*@
            </div>
        </div></a>
    }
</div>

@code {
    [Inject]
    IConfiguration Configuration { get; set; }

    [Inject]
    private IState<WebWalletState> walletState { get; set; }

    [Inject] ISnackbar Snackbar { get; set; }
    [Inject] NavigationManager Navigation { get; set; }

    List<TransactionBlock> trades = new List<TransactionBlock>();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender && walletState.Value.wallet != null)
        {
            // get all current trades 
            var ret = await walletState.Value.wallet.RPC.FindOtcTradeAsync(walletState.Value.wallet.AccountId, false, 0, 10);
            if(ret.Successful())
            {
                trades = ret.GetBlocks()
                    .OrderByDescending(a => a.TimeStamp)
                    .Take(3)
                    .Cast<TransactionBlock>().ToList();
                StateHasChanged();
            }
            else
            {
                Snackbar.Add($"Error getting transactions: {ret.ResultCode}", Severity.Error);
            }
        }
        await base.OnAfterRenderAsync(firstRender);
    }
}
