@using Fluxor
@using Fluxor.Blazor.Web.Components
@using Lyra.Data.API.WorkFlow
@using Microsoft.Extensions.Configuration
@using Nebula.Store.WebWalletUseCase
@using Newtonsoft.Json
@using UserLibrary.Data
@inherits FluxorComponent

@if(Otc != null)
{
<div class="container">
    <div class="nw">
        <MudAvatar Color="Color.Primary">@Dao.Name.First()</MudAvatar>
        <div>
            <div>@Dao.Name</div>
            @if(stats != null)
            {
                <div class="b">@stats.UserName</div>
                <div>@stats.Total | @stats.Ratio %</div>
            }
        </div>        
    </div>
    <div class="nw">
        <div class="b">@Otc.Order.dir</div>
        <div>@Otc.Order.crypto  </div>         
    </div>
    <div class="price">
        <div>@Otc.Order.price @Otc.Order.fiat</div>
        <div class="market">
        Market: @marketprice @Otc.Order.fiat
        </div>
    </div>
    <div class="nw">
         Available: @Otc.Order.amount @Otc.Order.crypto<br />
         Limits: @Otc.Order.limitMin - @Otc.Order.limitMax @Otc.Order.fiat
    </div>
    <div class="nw">
        @foreach(var pm in Otc.Order.payBy ?? new string[0])
            {
                <div class="pm">@pm</div>
            }
        </div>
    <div>
        @if(walletState.Value.wallet != null && Otc.OwnerAccountId == walletState.Value.wallet.AccountId)
        {
            if(Otc.OOStatus == OTCOrderStatus.Partial)
                {
                    <MudButton Variant="Variant.Filled" OnClick="@DelistOrder" Color="Color.Tertiary">Delist</MudButton>
                }
                if(Otc.OOStatus == OTCOrderStatus.Open || Otc.OOStatus == OTCOrderStatus.Partial)
                {
                    <MudButton Variant="Variant.Filled" OnClick="@CloseOrder" Color="Color.Tertiary">Close</MudButton>
                }
                
        }
        else
        {
            <MudButton Variant="Variant.Filled" OnClick="@ShowCreateTradeUI" Color="Color.Primary">@(Otc.Order.dir == TradeDirection.Sell ? "Buy" : "Sell")</MudButton>
        }        
    </div>
</div>
}

@code {
    [Parameter]
    public IOtcOrder Otc { get; set; }

    [Parameter]
    public IDao Dao { get; set; }

    [Parameter]
    public EventCallback<IOtcOrder> OrderSelected { get; set; }

    [Inject]
    IConfiguration Configuration { get; set; }

    [Inject]
    private IState<WebWalletState> walletState { get; set; }

    [Inject] NavigationManager Navigation { get; set; }
    [Inject] ISnackbar Snackbar { get; set; }

    UserStats stats;
    decimal marketprice, marketpriceusd;

    Dictionary<string, decimal> MarketPrices;

    protected override Task OnInitializedAsync()
    {
        SubscribeToAction<RespQuote>(async e =>
        {
            MarketPrices = e.Prices;
            PriceChanged();
            await InvokeAsync(StateHasChanged);
        });        

        return base.OnInitializedAsync();
    }

    private void PriceChanged()
    {
        marketpriceusd = 0;
        if (Otc.Order.crypto.EndsWith("ETH")) marketpriceusd = MarketPrices["ETH"];
        if (Otc.Order.crypto.EndsWith("BTC")) marketpriceusd = MarketPrices["BTC"];
        if (Otc.Order.crypto.EndsWith("USDT")) marketpriceusd = MarketPrices["USDT"];

        marketprice = Math.Round(marketpriceusd / MarketPrices[Otc.Order.fiat.ToLower()], 2);
    }

    private async Task ShowCreateTradeUI()
    {
        await OrderSelected.InvokeAsync(Otc);
    }

    private async Task DelistOrder()
    {
        var closeret = await walletState.Value.wallet.DelistOTCOrderAsync((Dao as TransactionBlock).AccountID, (Otc as TransactionBlock).AccountID);
        if(closeret.Successful())
        {
            Otc = null;
            Snackbar.Add($"Order delisted.", Severity.Success);
        }
        else
        {
            Snackbar.Add($"Error close order: {closeret.ResultCode}", Severity.Error);
        }
    }

    private async Task CloseOrder()
    {
        var closeret = await walletState.Value.wallet.CloseOTCOrderAsync((Dao as TransactionBlock).AccountID, (Otc as TransactionBlock).AccountID);
        if(closeret.Successful())
        {
            Otc = null;
            Snackbar.Add($"Order closed.", Severity.Success);
        }
        else
        {
            Snackbar.Add($"Error close order: {closeret.ResultCode}", Severity.Error);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender)
        {
            // get seller's name
            var client = new DealerClient(Configuration["network"]);
            var user = await client.GetUserByAccountIdAsync(Otc.OwnerAccountId);
            if(user.Successful())
            {
                stats = JsonConvert.DeserializeObject<UserStats>(user.JsonString);

                // fetch init prices
                MarketPrices = await client.GetPricesAsync();

                PriceChanged();

                await InvokeAsync(() => StateHasChanged());
            }
        }
        await base.OnAfterRenderAsync(firstRender);
    }
}
