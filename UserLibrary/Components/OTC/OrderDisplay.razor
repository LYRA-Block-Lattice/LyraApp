@using Fluxor
@using Fluxor.Blazor.Web.Components
@using Lyra.Data.API.WorkFlow
@using Microsoft.Extensions.Configuration
@using Nebula.Store.WebWalletUseCase
@using Newtonsoft.Json
@using UserLibrary.Data
@using UserLibrary.Store.NotificationUseCase
@inherits FluxorComponent

@if (Otc != null && hotData.Value.MarketPrices != null)
{
        <table border="0">
            <tr>
                <td>
                    <MudAvatar Color="Color.Primary">@Dao.Name.First()</MudAvatar>
                </td>
                <td>
                        <div>
                            <div>@Dao.Name</div>
                            @if (stats != null)
                            {
                                <div class="b">@stats.UserName</div>
                            }
                        </div>
                </td>
                <td>
                        <div>Trade(s) @(stats?.Total) | @(stats?.Ratio) %</div>
                </td>
            </tr>
            <tr>
                <td colspan="3">
                    <div class="price">
                        <div>@Otc.Order.price @Otc.Order.fiat</div>
                        <div class="market">
                            Market: @marketprice @Otc.Order.fiat
                        </div>
                    </div>
                </td>
            </tr>
            <tr>
                <td colspan="3" style="font-size: small">
                    Available @(Math.Round(Otc.Order.amount, 2)) @Otc.Order.crypto<br />
                    Limits @Otc.Order.limitMin - @Otc.Order.limitMax @Otc.Order.fiat
                </td>
            </tr>
            <tr>
                <td colspan="2">
                    @foreach (var pm in Otc.Order.payBy ?? new string[0])
                    {
                        <span class="pm">@pm</span>
                    }
                </td>
                <td>
                    @if (walletState.Value.wallet != null && Otc.OwnerAccountId == walletState.Value.wallet.AccountId)
                    {

                    }
                    else
                    {
                        <MudButton Variant="Variant.Filled" OnClick="@ShowCreateTradeUI" Color="Color.Primary">@(Otc.Order.dir == TradeDirection.Sell ? "Buy" : "Sell")</MudButton>
                    }
                </td>
            </tr>
        </table>
}

@code {
    [Parameter]
    public IOtcOrder Otc { get; set; }

    [Parameter]
    public IDao Dao { get; set; }

    [Parameter]
    public EventCallback<IOtcOrder> OrderSelected { get; set; }

    [Inject]
    IConfiguration Configuration { get; set; }

    [Inject]
    IState<HotDataState> hotData { get; set; }  

    [Inject]
    private IState<WebWalletState> walletState { get; set; }

    [Inject]
    private IDispatcher Dispatcher { get; set; }

    [Inject] NavigationManager Navigation { get; set; }
    [Inject] ISnackbar Snackbar { get; set; }

    UserStats stats;
    decimal marketprice, marketpriceusd;

    protected override Task OnInitializedAsync()
    {
        SubscribeToAction<MarketUpdated>(async e =>
        {
            PriceChanged();
            await InvokeAsync(StateHasChanged);
        });

        return base.OnInitializedAsync();
    }

    private void PriceChanged()
    {
        if(hotData.Value.MarketPrices?.Count > 10)      // anti debug data empty
        {
            marketpriceusd = 0;
            var priceTag = Otc.Order.crypto.Replace("tether/", "").ToUpper();
            if (hotData.Value.MarketPrices.ContainsKey(priceTag))
            {            
                marketpriceusd = hotData.Value.MarketPrices[priceTag];
            }

            marketprice = Math.Round(marketpriceusd / hotData.Value.MarketPrices[Otc.Order.fiat.ToLower()], 2);
        }
    }

    private async Task ShowCreateTradeUI()
    {
        await OrderSelected.InvokeAsync(Otc);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // get seller's name
            var client = new DealerClient(Configuration["network"]);
            var user = await client.GetUserByAccountIdAsync(Otc.OwnerAccountId);
            if (user.Successful())
            {
                stats = JsonConvert.DeserializeObject<UserStats>(user.JsonString);

                SubscribeToAction<ContractChangeEvent>(async cce =>
                {
                    PriceChanged();
                    await InvokeAsync(() => StateHasChanged());
                });

                // fetch init prices
                Dispatcher.Dispatch(new HotUpdateAction());

                await InvokeAsync(() => StateHasChanged());
            }
        }
        await base.OnAfterRenderAsync(firstRender);
    }
}
