@using Fluxor
@using Lyra.Data.API.WorkFlow
@using Microsoft.Extensions.Configuration
@using Nebula.Store.WebWalletUseCase
@using Newtonsoft.Json
@using UserLibrary.Data

<div class="container">
    <div class="nw">
        <MudAvatar Color="Color.Primary">@Dao.Name.First()</MudAvatar>
        <div>
            <div>@Dao.Name</div>
            @if(stats != null)
            {
                <div class="b">@stats.UserName</div>
                <div>@stats.Total | @stats.Ratio %</div>
            }
        </div>        
    </div>
    <div class="nw">
        <div class="b">@Otc.Order.dir</div>
        <div>@Otc.Order.crypto  </div>         
    </div>
    <div class="nw price">
        @Otc.Order.price @Otc.Order.fiat
    </div>
    <div class="nw">
         Available: @Otc.Order.amount<br />
         Limits: 5,000 - 12,000 USD
    </div>
    <div>
        <MudButton Variant="Variant.Filled" OnClick="@ShowCreateTradeUI" Color="Color.Primary">@(Otc.Order.dir == TradeDirection.Sell ? "Buy" : "Sell")</MudButton>
    </div>
</div>

@code {
    [Parameter]
    public IOtcOrder Otc { get; set; }

    [Parameter]
    public IDao Dao { get; set; }

    [Parameter]
    public EventCallback<IOtcOrder> OrderSelected { get; set; }

    [Inject]
    IConfiguration Configuration { get; set; }

    [Inject]
    private IState<WebWalletState> walletState { get; set; }

    [Inject] NavigationManager Navigation { get; set; }

    UserStats stats;

    private async Task ShowCreateTradeUI()
    {
        await OrderSelected.InvokeAsync(Otc);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender)
        {
            // get seller's name
            var client = new DealerClient(Configuration["network"]);
            var user = await client.GetUserByAccountIdAsync(Otc.OwnerAccountId);
            if(user.Successful())
            {
                stats = JsonConvert.DeserializeObject<UserStats>(user.JsonString);
                StateHasChanged();
            }
        }
        await base.OnAfterRenderAsync(firstRender);
    }
}
