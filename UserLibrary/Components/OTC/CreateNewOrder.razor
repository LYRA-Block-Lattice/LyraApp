@using Blazored.LocalStorage
@using Fluxor
@using Fluxor.Blazor.Web.Components
@using Lyra.Data.API.WorkFlow
@using Microsoft.Extensions.Configuration
@using Nebula.Store.WebWalletUseCase
@using Newtonsoft.Json
@using UserLibrary.Data
@using UserLibrary.Store.NotificationUseCase
@inherits FluxorComponent
@if(cfg == null)
{
    <div style="z-index: 5;" class="spinner"></div>
}
else
{
<RadzenTemplateForm TItem="OrderConfig" Data=@cfg Submit=@OnSubmit InvalidSubmit=@OnInvalidSubmit>
            <MudGrid>
            @if (walletState.Value.wallet == null)
            {
                <MudItem xs="12">
                    <a href="/wallet">Open wallet to create order</a>
                </MudItem>
            }
            else if (!showco)
            {
                <MudItem xs="12">
                    <div style="z-index: 5;" class="spinner"></div>
                </MudItem>
            }
            else
                {
                    <MudItem xs="12">
                        <h2>Sell Crypto on P2P market</h2>
                        @*                                <RadzenSelectBar @bind-Value=@dir TValue="bool">
                            <Items>
                            <RadzenSelectBarItem Text="Buy" Value="true" />
                            <RadzenSelectBarItem Text="Sell" Value="false" />
                            </Items>
                            </RadzenSelectBar>*@
                    </MudItem>
                    <MudItem xs="12">
                        Trusted Dealer Server:<br />
                        <RadzenDropDown AllowClear="false" TValue="String" Class="w-100"
                            Name="dealerName"
                                    @bind-Value=@cfg.dealerName Change="@seldealer"
                                    Data=@(mydealers.Select(a => a.Name)) /> <br />
                        <RadzenRequiredValidator Component="dealerName" Text="Trusted dealer is required." Popup="false" Style="position: absolute"/>
                    </MudItem>
                    <MudItem xs="12">
                        In Orgnization:<br />
                        <RadzenDropDown AllowClear="false" TValue="String" Class="w-100"
                            Name="daoName"
                                    @bind-Value=@cfg.daoName Change="@seldao"
                                    Data=@(mydaos.Select(a => (a as IBrokerAccount).Name)) /> <br />
                        <RadzenRequiredValidator Component="daoName" Text="Orgnization is required." Popup="false" Style="position: absolute"/>
                    </MudItem>
                    <MudItem xs="12">
                        Token To Sell<br />
                        <RadzenDropDown AllowClear="false" TValue="Ticker" Class="w-100"
                            Name="crypto"
                                    @bind-Value=@cfg.crypto Change="@productchanged"
                                    Data=@tickers /> <br />
                        Current Balance: @maxsell @cfg.crypto.Name <br />
                        <RadzenRequiredValidator Component="crypto" Text="Selling Crypto is required." Popup="false" Style="position: absolute"/>
                    <MudItem xs="12">
                        Quantity<br />
                        <RadzenNumeric TValue="decimal" Class="w-100" Name="amount" @bind-Value=@cfg.amount Change="@CalCollat" /> <br />
                        <RadzenNumericRangeValidator t Component="amount" Min="0.0001m" Max="@maxsell" Text="@($"Quantity should be between 0.0001 and {maxsell}")" Popup=false Style="position: absolute" />
                    </MudItem>
                    </MudItem>
                    <MudItem xs="12">
                        Fiat currency<br />
                        <RadzenDropDown AllowClear="false" TValue="string" Class="w-100"
                            Name="fiat"
                                    @bind-Value=@cfg.fiat Change="@fiatchanged"
                                    Data=@fiats /> <br />
                        <RadzenRequiredValidator Component="fiat" Text="Fiat is required." Popup="false" Style="position: absolute"/>
                        <div>@selfiatname</div>
                    </MudItem>
@*                    <MudItem xs="12">
                        Order Type<br />
                        <RadzenDropDown AllowClear="false" TValue="string" Class="w-100" Disabled
                                    @bind-Value=@selodrtyp
                                    Data=@odrtyps />
                    </MudItem>*@
                    <MudItem xs="12">
                        Sell price<br />
                        <RadzenNumeric TValue="decimal" Class="w-100" Name="price" @bind-Value=@cfg.price Change="@CalCollat" /><br />
                        <RadzenNumericRangeValidator Component="price" Min="0.0001m" Max="1000000000000m" Text="Price should be between 0.0001 and 1000000000000" Popup=false Style="position: absolute" />
                        Market Price: @selCryptoMarketPrice @cfg.fiat <br />
                        Total: @total @cfg.fiat
                    </MudItem>
                    <MudItem xs="12">
                        Min Payment<br />
                        <RadzenNumeric TValue="decimal" Class="w-80" Name="limitMin" @bind-Value=@cfg.limitMin Change="@CalCollat" /> @cfg.fiat <br />
                        <RadzenNumericRangeValidator Component="limitMin" Min="0.0001m" Max="@cfg.limitMax" Text="@($"Limit should be between 0.0001 and {cfg.price * cfg.amount}")" Popup=false Style="position: absolute" />
                    </MudItem>
                    <MudItem xs="12">
                        Max Payment<br />
                        <RadzenNumeric TValue="decimal" Class="w-80" Name="limitMax" @bind-Value=@cfg.limitMax Change="@CalCollat" /> @cfg.fiat <br />
                        <RadzenNumericRangeValidator Component="limitMax" Min="@cfg.limitMin" Max="@(cfg.price * cfg.amount)" Text="@($"Limit should be between 0.0001 and {cfg.price * cfg.amount}")" Popup=false Style="position: absolute" />
                    </MudItem>
                    <MudItem xs="12">
                        Collateral<br />
                        <RadzenNumeric TValue="decimal" Class="w-100" Name="collateral" @bind-Value=@cfg.collateral Change="@CalCollat2" /> <br />
                        <RadzenNumericRangeValidator Component="collateral" Min="@mincollt" Max="@(walletState.Value.wallet.BaseBalance)" Text="@($"Limit should be between 0.0001 and {cfg.price * cfg.amount}")" Popup=false Style="position: absolute" />
                        Worth: @coltworth @cfg.fiat<br />
                        Ratio: @(coltrito * 100) % <br />
                        @if(dao != null)
                        {
                            <div>
                                Minimum ratio required by DAO: @dao.SellerPar %
                            </div>
                        }
                        
                        Current Balance: @walletState.Value.wallet.BaseBalance LYR
                    </MudItem>
                    <MudItem xs="12">
                        Accepted Payment Methods<br />
                        <RadzenCheckBoxList Name="paymths" @bind-Value=@cfg.paymths TValue="string" Orientation="Radzen.Orientation.Vertical"
                                        Data="@paymentMethods" /> <br />
                        <RadzenRequiredValidator Component="paymths" Text="Payment method is required." Popup="false" Style="position: absolute"/>
                    </MudItem>
                    <MudItem xs="12">
                        <MudDivider />
                        Total: @total @cfg.fiat
                    </MudItem>
                    <MudItem xs="12">
                         <RadzenButton IsBusy=@busy ButtonType="Radzen.ButtonType.Submit" Text="Add New Order" Icon="add_circle_outline"></RadzenButton>
@*                        <RadzenButton IsBusy=@busy Click=@(async args => await CreateOrder("adddao")) Text="Add New Order" Icon="add_circle_outline" ButtonStyle="ButtonStyle.Primary" />
*@                    </MudItem>
@*                    <MudItem xs="12">
                        <RadzenButton Click=@(args => Back2("")) Text="Back" ButtonStyle="ButtonStyle.Light" />
                    </MudItem>*@
                }
            </MudGrid>
</RadzenTemplateForm>
}

@code {
    [Inject]
    IState<HotDataState> hotData { get; set; }  

    [Inject]
    private IState<WebWalletState> walletState { get; set; }

    [Inject]
    private IDispatcher Dispatcher { get; set; }

    [Inject]
    IConfiguration Configuration { get; set; }

    [Inject] ISnackbar Snackbar { get; set; }
    [Inject] NavigationManager Navigation { get; set; }
    [Inject] ILyraAPI lyraApi { get; set; }
    [Inject] DealerConnMgr connMgr { get; set; }
    [Inject] NebulaConsts _consts { get; set; }
    [Inject] ILocalStorageService localStorage { get; set; }

    List<IDao> mydaos;
    List<DealerDesc> mydealers = new List<DealerDesc>();
    bool showco, dir;
    string total;
    List<Ticker> tickers;
    List<string> fiats = new List<string>       // refer to WFOtcOrderCreate.FIATS
    {
        "USD", "EUR", "GBP", "CHF", "AUD", "CAD", "JPY", "KRW", "CNY", "TWD", "IDR", "VND", "UAH", "RUB", "THB", "AED"
    };
    List<string> odrtyps = new List<string>
    {
        "Fixed price", "Floating price"
    };
    List<string> paymentMethods = new List<string>
    {
        "Paypal", "Bank Transfer", "Alipay", "Wechat Pay", "ATM Cash Deposit"
    };

    // user selected DAO
    IDao dao;
    string selfiatname = "US Dollar";
    decimal maxsell, mincollt;
    decimal selCryptoMarketPrice = 1m;

    decimal coltworth;
    decimal coltrito;
    bool busy;

    class OrderConfig
    {
        public string dealerName { get; set; }
        public string daoName { get; set; }
        public Ticker crypto { get; set; }
        public string fiat { get; set; }
        public decimal price { get; set; }
        public decimal amount { get; set; }
        public decimal collateral { get; set; }
        public decimal limitMin { get; set; }
        public decimal limitMax { get; set; }
        public IEnumerable<string> paymths { get; set; }
    }

    OrderConfig cfg = new OrderConfig
        {
            crypto = new Ticker{ dbname = "tether/USDT", Name = "$USDT"},
            fiat = "USD",
            price = 1,
            amount = 1,
            limitMin = 1,
            paymths = new string[0]
        };

    Task OnSubmit(OrderConfig model)
    {
        return CreateOrder("");
    }

    void OnInvalidSubmit(FormInvalidSubmitEventArgs args)
    {

    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender)
        {
            try
            {
                // trusted dealers
                var storStr = await localStorage.GetItemAsync<string>(_consts.PrefStorName) ?? "{}";
                var pc = JsonConvert.DeserializeObject<PreferenceContainer>(storStr);

                // get dealers
                foreach (var tdid in pc.GetAllTrusted() ?? new List<string>() { _consts.TrustedDealerIds[0] })
                {
                    var dlret = await lyraApi.GetLastBlockAsync(tdid);
                    if (dlret.Successful())
                    {
                        var d = dlret.As<IDealer>();
                        mydealers.Add(
                            new DealerDesc
                                {
                                    AccountId = d.AccountID,
                                    Name = d.Name,
                                    Desc = d.Description,
                                    Time = d.TimeStamp,
                                    EndpointUri = new Uri(d.Endpoint),
                                }
                        );
                    }
                }

                // get sellable tokens
                var tokens = await lyraApi.GetTokenNamesAsync(null, null, "(null)");

                tickers = tokens.Entities
                    .Where(a => !a.StartsWith("unittest/"))
                    // only display which user have
                    //.Where(b => walletState.Value.wallet.GetLastSyncBlock().Balances.ContainsKey(b))
                    .Select(a => new Ticker
                    {
                        dbname = a,
                        Name = a.Replace("tether/", "$")
                    })
                    .OrderBy(a => a.Name)
                    .ToList();

                if(walletState.Value.wallet != null)
                {
                    var having = walletState.Value.wallet.GetLastSyncBlock().Balances.Keys.ToList();
                    tickers = tickers
                        .Where(b => having.Contains(b.dbname))
                        .ToList();

                    showco = true;
                }

                // daos
                var alldaoret = await lyraApi.GetAllDaosAsync(0, 10);
                if (alldaoret.Successful())
                {
                    mydaos = alldaoret.GetBlocks().Cast<IDao>().ToList();
                }
                else
                {
                    mydaos = new List<IDao>();
                }

                if (walletState.Value.wallet?.GetLastSyncBlock().Balances.ContainsKey("tether/USDT") == true)
                    maxsell = walletState.Value.wallet.GetLastSyncBlock().Balances[@cfg.crypto.dbname].ToBalanceDecimal();
                else
                    maxsell = 0;

                SubscribeToAction<MarketUpdated>(async e =>
                {
                    await productchanged();
                    await InvokeAsync(StateHasChanged);
                });

                Dispatcher.Dispatch(new HotUpdateAction());

                StateHasChanged();
            }
            catch(Exception ex)
            {
                Snackbar.Add($"Failed to initialize: {ex.Message}", Severity.Error);
            }
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    private void CalCollat(Decimal d)
    {
        if(hotData.Value == null || dao == null)
        {
            return;
        }

        var lyrprice = hotData.Value.MarketPrices["LYR"];

        var totalInFiat = cfg.price * cfg.amount;

        total = $"{totalInFiat:N2}";

        // calculate the amount of cltlyr
        mincollt = Math.Round(((totalInFiat * hotData.Value.MarketPrices[cfg.fiat.ToLower()]) / lyrprice) * (dao.SellerPar / 100m), 4, MidpointRounding.ToPositiveInfinity);
        cfg.collateral = Math.Round(mincollt * 1.01m); // for a safty margin of 1%

        CalCollat2(d);
    }

    private void CalCollat2(Decimal d)
    {
        if(hotData.Value == null || dao == null)
        {
            return;
        }

        var lyrprice = hotData.Value.MarketPrices["LYR"];

        var totalInFiat = cfg.price * cfg.amount;

        var coltworthusd = cfg.collateral * lyrprice;

        coltworth = Math.Round(coltworthusd / hotData.Value.MarketPrices[cfg.fiat.ToLower()], 2);

        if (coltworth > 0 && cfg.price * cfg.amount > 0)
            coltrito = Math.Round(coltworth / (cfg.price * cfg.amount), 4);
        else
            coltrito = 0;

        StateHasChanged();
    }

    private async Task seldealer()
    {
        //check if user has been registed on dealer server
        var dealerid = mydealers.First(a => a.Name == cfg.dealerName).AccountId;
        var user = await connMgr.GetDealer(dealerid).GetUserByAccountIdAsync(walletState.Value.wallet.AccountId);
        if (!user.Successful())
        {
            // register user
            Navigation.NavigateTo($"/dealer/register/{dealerid}");
        }
    }

    private async Task seldao()
    {
        var daoret = await walletState.Value.wallet.RPC.GetDaoByNameAsync(cfg.daoName);
        if (daoret.Successful())
        {
            dao = daoret.GetBlock() as IDao;
        }
    }

    private async Task productchanged()
    {
        if(walletState.Value.wallet != null)
        {
            if (walletState.Value.wallet.GetLastSyncBlock().Balances.ContainsKey(@cfg.crypto.dbname))
                maxsell = walletState.Value.wallet.GetLastSyncBlock().Balances[@cfg.crypto.dbname].ToBalanceDecimal();
            else
                maxsell = 0;
            await fiatchanged();
        }
    }

    private async Task fiatchanged()
    {
        PriceChanged();
        CalCollat(0);

        try
        {
            var client = connMgr.GetDealer(null);
            var fiatinfo = await client.GetFiatAsync(cfg.fiat);
            selfiatname = fiatinfo.name;
        }
        catch(Exception)
        {
            selfiatname = "";
        }
    }

    private void PriceChanged()
    {
        decimal usdprice = 0;
        var priceTag = @cfg.crypto.dbname.Replace("tether/", "").ToUpper();
        if (@cfg.crypto != null && hotData.Value.MarketPrices.ContainsKey(priceTag))
        {            
            usdprice = hotData.Value.MarketPrices[priceTag];
        }

        selCryptoMarketPrice = Math.Round(usdprice / hotData.Value.MarketPrices[cfg.fiat.ToLower()], 2);
    }

    async Task CreateOrder(string dn)
    {
        busy = true;
        Snackbar.Add("Creating Order...", Severity.Info);
        StateHasChanged();

        try
        {
            var daoret3 = await walletState.Value.wallet.RPC.GetDaoByNameAsync(cfg.daoName);
            var daot = daoret3.GetBlock() as TransactionBlock;

            var dealer = connMgr.GetPriceFeeder();
            if(dealer == null)
            {
                Snackbar.Add($"No price feeder", Severity.Error);
                return;
            }

            var prices = await dealer.GetPricesAsync();
            var tokenSymbol = cfg.crypto.dbname.Split('/')[1];
            var neededLyr = Math.Round(prices[tokenSymbol] * cfg.amount * ((daot as IDao).SellerPar / 100) / prices["LYR"] * 1.03m);
            if (cfg.collateral < neededLyr)
            {
                Snackbar.Add($"Not enough collateral. Need > {neededLyr} LYR", Severity.Warning);
                busy = false;
                StateHasChanged();
                return;
            }

            var order = new OTCOrder
                {
                    daoId = daot.AccountID,
                    dealerId = mydealers.First(a => a.Name == cfg.dealerName).AccountId,
                    dir = TradeDirection.Sell,
                    crypto = cfg.crypto.dbname,
                    fiat = cfg.fiat,
                    fiatPrice = prices[cfg.fiat.ToLower()],
                    priceType = PriceType.Fixed,
                    price = cfg.price,
                    amount = cfg.amount,
                    collateral = cfg.collateral,
                    collateralPrice = prices["LYR"],
                    limitMin = cfg.limitMin,
                    limitMax = cfg.limitMax,
                    payBy = cfg.paymths.ToArray(),
                };

            var ret = await walletState.Value.wallet.CreateOTCOrderAsync(order);
            if (ret.Successful())
            {
                Snackbar.Add("Order created.", Severity.Success);
            }
            else
            {
                Snackbar.Add($"Order failed to create: {ret.ResultCode.Humanize()}", Severity.Error);
            }
        }
        catch (Exception e)
        {
            Snackbar.Add($"Order failed to create: {e}", Severity.Error);
        }

        busy = false;
        StateHasChanged();
    }
}
