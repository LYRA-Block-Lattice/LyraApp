@using Fluxor
@using Fluxor.Blazor.Web.Components
@using Lyra.Data.API.WorkFlow
@using Microsoft.Extensions.Configuration
@using Nebula.Store.WebWalletUseCase
@using UserLibrary.Data
@using UserLibrary.Store.NotificationUseCase
@inherits FluxorComponent

            <MudGrid>
                @if (showco)
                {
                    <MudItem xs="12">
                        <h2>Sell Crypto on P2P market</h2>
                        @*                                <RadzenSelectBar @bind-Value=@dir TValue="bool">
                            <Items>
                            <RadzenSelectBarItem Text="Buy" Value="true" />
                            <RadzenSelectBarItem Text="Sell" Value="false" />
                            </Items>
                            </RadzenSelectBar>*@
                    </MudItem>
                    <MudItem xs="12">
                        In Orgnization:<br />
                        <RadzenDropDown AllowClear="false" TValue="String" Class="w-100"
                                    @bind-Value=@seldaoname Change="@seldao"
                                    Data=@(mydaos.Select(a => (a as IBrokerAccount).Name)) />
                    </MudItem>
                    <MudItem xs="12">
                        Token To Sell<br />
                        <RadzenDropDown AllowClear="false" TValue="Ticker" Class="w-100"
                                    @bind-Value=@selcrypto Change="@productchanged"
                                    Data=@tickers /> <br />
                        Current Balance: @maxsell @selcrypto
                    </MudItem>
                    <MudItem xs="12">
                        Fiat currency<br />
                        <RadzenDropDown AllowClear="false" TValue="string" Class="w-100"
                                    @bind-Value=@selfiat Change="@fiatchanged"
                                    Data=@fiats />
                        <div>@selfiatname</div>
                    </MudItem>
@*                    <MudItem xs="12">
                        Order Type<br />
                        <RadzenDropDown AllowClear="false" TValue="string" Class="w-100" Disabled
                                    @bind-Value=@selodrtyp
                                    Data=@odrtyps />
                    </MudItem>*@
                    <MudItem xs="12">
                        Sell price<br />
                        <RadzenNumeric TValue="decimal" Class="w-100" @bind-Value=@selprice Change="@CalCollat" /><br />
                        Market Price: @selcryptoprice @selfiat
                    </MudItem>
                    <MudItem xs="12">
                        Quantity<br />
                        <RadzenNumeric TValue="decimal" Class="w-100" @bind-Value=@selqty Change="@CalCollat" />
                    </MudItem>
                    <MudItem xs="12">
                        Min Payment<br />
                        <RadzenNumeric TValue="decimal" Class="w-80" @bind-Value=@paymin Change="@CalCollat" /> @selfiat
                    </MudItem>
                    <MudItem xs="12">
                        Max Payment<br />
                        <RadzenNumeric TValue="decimal" Class="w-80" @bind-Value=@paymax Change="@CalCollat" /> @selfiat
                    </MudItem>
                    <MudItem xs="12">
                        Collateral<br />
                        <RadzenNumeric TValue="decimal" Class="w-100" @bind-Value=@cltlyr Change="@CalCollat" /> <br />
                        Worth: @coltworth @selfiat<br />
                        Ratio: @(coltrito * 100) % <br />
                        @if(dao != null)
                        {
                            <div>
                                Minimum ratio required by DAO: @dao.SellerPar %
                            </div>
                        }
                        
                        Current Balance: @walletState.Value.wallet.BaseBalance LYR
                    </MudItem>
                    <MudItem xs="12">
                        Accepted Payment Methods<br />
                        <RadzenCheckBoxList @bind-Value=@paymths TValue="string" Orientation="Radzen.Orientation.Vertical"
                                        Data="@paymentMethods" />
                    </MudItem>
                    <MudItem xs="12">
                        <MudDivider />
                        Total: @total @selfiat
                    </MudItem>
                    <MudItem xs="12">
                        <RadzenButton IsBusy=@busy Click=@(async args => await CreateOrder("adddao")) Text="Add New Order" Icon="add_circle_outline" ButtonStyle="ButtonStyle.Primary" />
                    </MudItem>
@*                    <MudItem xs="12">
                        <RadzenButton Click=@(args => Back2("")) Text="Back" ButtonStyle="ButtonStyle.Light" />
                    </MudItem>*@
                }
                else
                {
                    <MudItem xs="12">
                        @if (walletState.Value.wallet == null)
                        {
                            <a href="/wallet">Open wallet to create order</a>
                        }
                        else
                        {
                            <a href="/dealer/register">Register on Lyra deal server</a>
                        }
                    </MudItem>
                }
            </MudGrid>

@code {
    [Inject]
    IState<HotDataState> hotData { get; set; }  

    [Inject]
    private IState<WebWalletState> walletState { get; set; }

    [Inject]
    private IDispatcher Dispatcher { get; set; }

    [Inject]
    IConfiguration Configuration { get; set; }

    [Inject] ISnackbar Snackbar { get; set; }
    [Inject] NavigationManager Navigation { get; set; }
    [Inject] ILyraAPI lyraApi { get; set; }
    [Inject] DealerClient dealerApi { get; set; }

    List<IDao> mydaos;
    bool showco, dir;
    string total;
    List<Ticker> tickers;
    List<string> fiats = new List<string>       // refer to WFOtcOrderCreate.FIATS
    {
        "USD", "EUR", "GBP", "CHF", "AUD", "CAD", "JPY", "KRW", "CNY", "TWD", "IDR", "VND", "UAH", "RUB", "THB", "AED"
    };
    List<string> odrtyps = new List<string>
    {
        "Fixed price", "Floating price"
    };
    List<string> paymentMethods = new List<string>
    {
        "Paypal", "Bank Transfer", "Alipay", "Wechat Pay", "ATM Cash Deposit"
    };

    IEnumerable<string> paymths = new string[0];

    // user selected DAO
    IDao dao;
    Ticker selcrypto;
    string seldaoname, selfiat = "USD", selodrtyp = "Fixed price";
    string selfiatname = "US Dollar";
    decimal maxsell, selprice, selqty, cltlyr, paymin, paymax;
    decimal selcryptoprice;

    decimal trxprice, lyrprice, btcprice, lyrintprice;
    decimal coltworth;
    decimal coltrito;
    bool busy;

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender)
        {
            try
            {
                Dispatcher.Dispatch(new HotUpdateAction());

                // get sellable tokens
                var tokens = await lyraApi.GetTokenNamesAsync(null, null, "(null)");

                tickers = tokens.Entities
                    .Where(a => !a.StartsWith("unittest/"))
                    // only display which user have
                    //.Where(b => walletState.Value.wallet.GetLastSyncBlock().Balances.ContainsKey(b))
                    .Select(a => new Ticker
                    {
                        dbname = a,
                        Name = a.Replace("tether/", "$")
                    })
                    .OrderBy(a => a.Name)
                    .ToList();

                if(walletState.Value.wallet != null)
                {
                    var having = walletState.Value.wallet.GetLastSyncBlock().Balances.Keys.ToList();
                    tickers = tickers
                        .Where(b => having.Contains(b.dbname))
                        .ToList();

                    //check if user has been registed on dealer server
                    var user = await dealerApi.GetUserByAccountIdAsync(walletState.Value.wallet.AccountId);
                    if (!user.Successful())
                    {
                        // register user
                        Navigation.NavigateTo("/dealer/register");
                    }
                    else
                    {
                        showco = true;
                    }
                }

                // daos
                var alldaoret = await lyraApi.GetAllDaosAsync(0, 10);
                if (alldaoret.Successful())
                {
                    mydaos = alldaoret.GetBlocks().Cast<IDao>().ToList();
                }
                else
                {
                    mydaos = new List<IDao>();
                }

                StateHasChanged();
            }
            catch(Exception ex)
            {
                Snackbar.Add($"Failed to initialize: {ex.Message}", Severity.Error);
            }
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    private void CalCollat(Decimal d)
    {
        total = $"{(selcryptoprice * selqty):N2}";
        var coltworthusd = cltlyr * lyrprice;

        coltworth = Math.Round(coltworthusd / hotData.Value.MarketPrices[selfiat.ToLower()], 2);

        if (coltworth > 0 && selprice * selqty > 0)
            coltrito = Math.Round(coltworth / (selprice * selqty), 4);
        else
            coltrito = 0;

        StateHasChanged();
    }

    private async Task seldao()
    {
        var daoret = await walletState.Value.wallet.RPC.GetDaoByNameAsync(seldaoname);
        if (daoret.Successful())
        {
            dao = daoret.GetBlock() as IDao;
        }
    }

    private async Task productchanged()
    {
        maxsell = walletState.Value.wallet.GetLastSyncBlock().Balances[selcrypto.dbname].ToBalanceDecimal();
        await fiatchanged();
    }

    private async Task fiatchanged()
    {
        PriceChanged();
        CalCollat(0);

        try
        {
            var client = new DealerClient(Configuration["network"]);
            var fiatinfo = await client.GetFiatAsync(selfiat);
            selfiatname = fiatinfo.name;
        }
        catch(Exception)
        {
            selfiatname = "";
        }
    }

    private void PriceChanged()
    {
        decimal usdprice = 0;
        var priceTag = selcrypto.dbname.Replace("tether/", "").ToUpper();
        if (selcrypto != null && hotData.Value.MarketPrices.ContainsKey(priceTag))
        {            
            usdprice = hotData.Value.MarketPrices[priceTag];
        }

        selcryptoprice = Math.Round(usdprice / hotData.Value.MarketPrices[selfiat.ToLower()], 2);
    }

    async Task CreateOrder(string daoname)
    {
        busy = true;
        Snackbar.Add("Creating Order...", Severity.Info);
        StateHasChanged();

        try
        {
            var daoret3 = await walletState.Value.wallet.RPC.GetDaoByNameAsync(seldaoname);
            var daot = daoret3.GetBlock() as TransactionBlock;

            var dealer = new DealerClient(Configuration["network"]);
            var prices = await dealer.GetPricesAsync();
            var tokenSymbol = selcrypto.dbname.Split('/')[1];
            var neededLyr = Math.Round(prices[tokenSymbol] * selqty * ((daot as IDao).SellerPar / 100) / prices["LYR"] * 1.03m);
            if (cltlyr < neededLyr)
            {
                Snackbar.Add($"Not enough collateral. Need > {neededLyr} LYR", Severity.Warning);
                busy = false;
                StateHasChanged();
                return;
            }

            var order = new OTCOrder
                {
                    daoId = daot.AccountID,
                    dir = TradeDirection.Sell,
                    crypto = selcrypto.dbname,
                    fiat = selfiat,
                    priceType = PriceType.Fixed,
                    price = selprice,
                    amount = selqty,
                    collateral = cltlyr,
                    limitMin = paymin,
                    limitMax = paymax,
                    payBy = paymths.ToArray(),
                };
            var ret = await walletState.Value.wallet.CreateOTCOrderAsync(order);
            if (ret.Successful())
            {
                Snackbar.Add("Order created.", Severity.Success);
            }
            else
            {
                Snackbar.Add($"Order failed to create: {ret.ResultCode}", Severity.Error);
            }
        }
        catch (Exception e)
        {
            Snackbar.Add($"Order failed to create: {e}", Severity.Error);
        }

        busy = false;
        StateHasChanged();
    }
}
