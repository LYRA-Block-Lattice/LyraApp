@using Fluxor
@using Fluxor.Blazor.Web.Components
@using Lyra.Data.API.WorkFlow
@using Lyra.Data.Shared
@using Microsoft.Extensions.Configuration
@using Nebula.Store.WebWalletUseCase
@using UserLibrary.Data
@inherits FluxorComponent

<div style="font-size: smaller;">
    <RadzenDataGrid TItem="IOtcOrder" Data="orders"
        AllowColumnResize="true" AllowSorting="true"
        PageSize="10" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Center" ShowPagingSummary="true" Style="font-size: xx-small;"
    >
        <Columns>
            <RadzenDataGridColumn TItem="IOtcOrder" Property="TimeStamp" Title="Time Stamp"  Width="180px"/>
            <RadzenDataGridColumn TItem="IOtcOrder" Title="Dir" Width="60px">
                <Template Context="order">
                    <a target="_blank" href="@(LyraGlobal.GetBlockViewUrl(Configuration["network"], order.AccountID))">
                        @(order.Order.dir == TradeDirection.Sell ? "Sell" : "Buy")
                    </a>
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="IOtcOrder" Title="Crypto"  Width="100px">
                <Template Context="order">                    
                        @(order.Order.crypto.Replace("tether/", "$"))
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="IOtcOrder" Property="Order.amount" Title="Amount"  Width="50px"/>
            <RadzenDataGridColumn TItem="IOtcOrder" Property="Order.price" Title="Price"  Width="70px"/>
            <RadzenDataGridColumn TItem="IOtcOrder" Property="Order.fiat" Title="Fiat" Width="60px"/>
            <RadzenDataGridColumn TItem="IOtcOrder" Property="OOStatus" Title="Status" Width="80px" />
            <RadzenDataGridColumn TItem="IOtcOrder" Title="Actions">
                <Template Context="order">
                    <div>
                        @if((order as IOtcOrder).OOStatus == OTCOrderStatus.Partial)
                        {
                            <MudButton Variant="Variant.Filled" OnClick="@(() => DelistOrder(order))" Color="Color.Tertiary">Delist</MudButton>
                        }

                        @if((order as IOtcOrder).OOStatus == OTCOrderStatus.Open || (order as IOtcOrder).OOStatus == OTCOrderStatus.Partial || (order as IOtcOrder).OOStatus == OTCOrderStatus.Delist)
                        {
                            <MudButton Variant="Variant.Filled" OnClick="@(() => CloseOrder(order))" Color="Color.Tertiary">Close</MudButton>
                        }
                    </div>
                </Template>
            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>
</div>

@code {
    [Inject]
    IConfiguration Configuration { get; set; }

    [Inject]
    private IState<WebWalletState> walletState { get; set; }

    [Inject] ISnackbar Snackbar { get; set; }
    [Inject] NavigationManager Navigation { get; set; }
    [Inject] ILyraAPI lyraApi { get; set; }

    List<IOtcOrder> orders = new List<IOtcOrder>();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender && walletState.Value.wallet != null)
        {
            await Refresh();

            SubscribeToAction<ContractChangeEvent>(async cce =>
            {
                await Refresh();
                await InvokeAsync(() => StateHasChanged());
            });
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    async Task Refresh()
    {
        // get all current trades
        var ret = await walletState.Value.wallet.RPC.GetOtcOrdersByOwnerAsync(walletState.Value.wallet.AccountId);
        if (ret.Successful())
        {
            orders = ret.GetBlocks()
                .OrderByDescending(a => a.TimeStamp)
                .Cast<IOtcOrder>().ToList();
            StateHasChanged();
        }
        else
        {
            Snackbar.Add($"Error getting transactions: {ret.ResultCode.Humanize()}", Severity.Error);
        }
    }

    private async Task DelistOrder(IOtcOrder Otc)
    {
        var daoret = await lyraApi.GetLastBlockAsync(Otc.Order.daoId);
        if(daoret.Successful())
        {
            var Dao = daoret.GetBlock();

            var closeret = await walletState.Value.wallet.DelistOTCOrderAsync((Dao as TransactionBlock).AccountID, (Otc as TransactionBlock).AccountID);
            if(closeret.Successful())
            {
                Otc = null;
                Snackbar.Add($"Order delisted.", Severity.Success);
                await Refresh();
            }
            else
            {
                Snackbar.Add($"Error close order: {closeret.ResultCode.Humanize()}", Severity.Error);
            }
        }
        else
        {
            Snackbar.Add($"Error get DAO: {daoret.ResultCode.Humanize()}", Severity.Error);
        }
    }

    private async Task CloseOrder(IOtcOrder Otc)
    {
        var daoret = await lyraApi.GetLastBlockAsync((Otc as IOtcOrder).Order.daoId);
        if(daoret.Successful())
        {
            var Dao = daoret.GetBlock();

            var closeret = await walletState.Value.wallet.CloseOTCOrderAsync((Dao as TransactionBlock).AccountID, (Otc as TransactionBlock).AccountID);
            if(closeret.Successful())
            {
                Otc = null;
                Snackbar.Add($"Order closed.", Severity.Success);
                await Refresh();
            }
            else
            {
                Snackbar.Add($"Error close order: {closeret.ResultCode.Humanize()}", Severity.Error);
            }
        }
        else
        {
            Snackbar.Add($"Error get DAO: {daoret.ResultCode.Humanize()}", Severity.Error);
        }
    }
}
