@namespace UserLibrary.Components

@using DexServer.Ext
@using System.ComponentModel
@using Fluxor
@using Lyra.Core.API
@using Lyra.Core.Accounts
@using Lyra.Core.Blocks
@using Lyra.Data.API
@using Lyra.Data.Shared
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.Extensions.Configuration
@using Nebula.Data
@using Nebula.Store.WebWalletUseCase
@using UserLibrary.Data
@inject IConfiguration Configuration

@if (walletState.Value.wallet == null)
{

    <a href="/wallet"><MudButton Variant="Variant.Filled" Color="Color.Primary">Open Wallet</MudButton></a>
}
else
{

    @if (tokens == null)
    {
        <p><em>Loading wallets... This may take a while.</em></p>
        <div class="spinner"></div>
    }
    else
    {
        foreach (var token in tokens)
        {
            <MudCard Style="width: 300px;" Elevation="8">
                <MudCardHeader>
                    <CardHeaderAvatar>
                        <MudAvatar Color="Color.Secondary">@token.Name.Substring(0, 1)</MudAvatar>
                    </CardHeaderAvatar>
                    <CardHeaderContent>
                        <MudText Typo="Typo.body1">@token.Name</MudText>
                    </CardHeaderContent>
                    <CardHeaderActions>
                        <MudIconButton Icon="@Icons.Material.Filled.Settings" Color="Color.Default" />
                    </CardHeaderActions>
                </MudCardHeader>
                <MudCardContent>
                    <MudText Typo="Typo.h5">Balances</MudText>
                    <MudText Typo="Typo.body2">
                        Spot:
                        <MudIconButton Icon="@Icons.Filled.ArrowCircleDown" Color="Color.Dark"
                           OnClick="@(async ()=>{ await OnTransferClick(token, true); })"></MudIconButton>
                        @token.MyBalance <b>@token.Symbol</b>
                    </MudText>
                    <MudText Typo="Typo.body2">
                        DEX:
                        <MudIconButton Icon="@Icons.Filled.ArrowCircleUp" Color="Color.Dark"
                           OnClick="@(async ()=>{ await OnTransferClick(token, false); })"></MudIconButton>
                        @token.DexBalance <b>@token.Symbol</b>
                    </MudText>
                </MudCardContent>
                <MudCardActions>
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@(async ()=>{ await OnDepositClick(token); })">
                        Deposit
                    </MudButton>
                    &nbsp;
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@(async ()=>{ await OnWithdrawClick(token); })">
                        Withdraw
                    </MudButton>
                </MudCardActions>
            </MudCard>
        }


        <MudDivider />

        <div>
            <MudButton Variant="Variant.Filled" Disabled="@refreshing" FullWidth="true" Color="Color.Primary" 
                OnClick="@RefreshAllWallets">
                @if (refreshing)
                {
                    <MudProgressCircular Color="Color.Secondary" Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                    <MudText Class="ms-2">Processing</MudText>
                }
                else
                {
                    <MudText>Refresh All Balance</MudText>
                }
            </MudButton>
        </div>

    }
}

<MudDialog @bind-IsVisible="visprog">
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Filled.FiberNew" Class="mr-3"/> Generate new wallet
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-7" />
    </DialogContent>
</MudDialog>

@code {

    [Inject]
    private IState<WebWalletState> walletState { get; set; }

    [Inject]
    private IDispatcher Dispatcher { get; set; }

    [Inject] IDialogService DialogService { get; set; }
    [Inject] ISnackbar Snackbar { get; set; }

    // progress dialog visible
    bool visprog;

    double intervalBeforeMsgClose = 2000;

    WalletView selectedrow;

    string withdrawTitle;
    bool withdrawVisible = false;
    decimal withdrawMin, withdrawMax, withdrawDefault;

    int crwalletprogress;
    bool crwalletshow;

    List<WalletView> tokens;
    WalletView token;
    string address;

    string title = "BasicModal";
    bool visible = false;
    string symbol;
    string provider;
    string contract;
    decimal mindep;
    string confirm;
    decimal depfee, wdrfee;

    string dexWalletId = null;
    string ticker = null;
    bool transferVisible = false;
    string transferTitle;
    decimal transferAmount;
    decimal transferMin = 1;
    decimal transferMax;
    decimal transferDefault;
    bool transferToDex;
    bool _confirmLoading = false;

    bool refreshing;

    async Task OnTransferClick(WalletView row, bool toDex)
    {
        try
        {
            if (row.DexWalletID == null)
            {
                // user have not create wallet yet.
                Snackbar.Add("Creating a DEX wallet for you", Severity.Info);

                var wallet = walletState.Value.wallet;
                await wallet.SyncAsync(null);
                var crdexret = await wallet.CreateDexWalletAsync(row.Symbol, row.NetworkProvider);
                if (crdexret.Successful())
                {
                    Snackbar.Add($"DEX Wallet for {row.Symbol} has been created. Refreshing...", Severity.Success);

                    await RefreshAllWallets();

                    Snackbar.Add($"Refreshed.", Severity.Success);
                }
                else
                {
                    Snackbar.Add($"DEX Wallet for {row.Symbol} was not created.", Severity.Warning);
                }
            }
            else
            {
                var args = new DexTransferArgs
                    {
                        title = toDex ? "Transfer funds from my wallet to DEX wallet" : "Transfer funds from DEX wallet to my wallet",
                        min = 0,
                        max = toDex ? row.MyBalance : row.DexBalance,
                        val = toDex ? row.MyBalance : row.DexBalance,
                        symbol = row.Symbol
                    };

                symbol = row.Symbol;
                transferAmount = toDex ? row.MyBalance : row.DexBalance;
                transferToDex = toDex;
                dexWalletId = row.DexWalletID;
                ticker = $"tether/{row.Symbol}";

                var parameters = new DialogParameters { ["Args"] = args };

                var dialog = DialogService.Show<DexDialogTransfer>("Transfer", parameters);
                var result = await dialog.Result;

                if (!result.Cancelled)
                {
                    transferAmount = (decimal)result.Data;
                    if(transferAmount > 0.00000001m && transferAmount <= args.max)
                        await Transfer();
                    else
                        Snackbar.Add($"The number {transferAmount} is out of range.", Severity.Warning);
                }
            }

        }
        catch (Exception ex)
        {
            //Err.ProcessError(ex);
            Snackbar.Add($"Error transfering funds: {ex.Message}", Severity.Error);
        }
    }

    async Task OnDepositClick(WalletView row)
    {
        token = row;

        var args = new DexDepositArgs
            {
                title = "Deposit funds for " + token.Name,
                address = token.Address,
                view = token
            };

        symbol = token.Symbol;
        provider = token.NetworkProvider;
        contract = token.Contract.Shorten();
        address = token.Address;
        mindep = token.MinDeposit;
        confirm = token.ConfirmationInfo;
        depfee = token.DepositFee;
        wdrfee = token.WithdrawFee;

        if (string.IsNullOrWhiteSpace(token.Address))
        {
            Snackbar.Add($"Generating a DEX wallet for you...", Severity.Info);
            visprog = true;

            crwalletprogress = 0;
            crwalletshow = true;
            StateHasChanged();
            if (walletState.Value.wallet != null && walletState.Value.wallet.BaseBalance >= 11m)
            {
                crwalletprogress = 10;
                await InvokeAsync(() => StateHasChanged());

                var wallet = walletState.Value.wallet;
                var ret = await wallet.CreateDexWalletAsync(symbol, provider);
                if (ret.Successful())
                {
                    crwalletprogress = 30;
                    await InvokeAsync(() => StateHasChanged());

                    for (var i = 30; i < 100; i++)
                    {
                        var dw = await wallet.FindDexWalletAsync(wallet.AccountId, symbol, provider);

                        if (dw == null)
                        {
                            crwalletprogress = i;
                            await InvokeAsync(() => StateHasChanged());

                            await Task.Delay(500);
                            continue;
                        }

                        token.Address = dw.ExtAddress;
                        address = token.Address;
                        args.address = address;

                        crwalletprogress = 100;

                        await InvokeAsync(() => StateHasChanged());

                        break;
                    }
                }
                else
                {
                    crwalletprogress = 0;
                }
                visprog = false;
                await InvokeAsync(() => StateHasChanged());
            }
            else
            {
                Snackbar.Add($"You need at least 11 LYR to generate a DEX wallet.", Severity.Error);
                return;
            }
        }
        else
        {
            crwalletshow = false;
        }

        var parameters = new DialogParameters { ["Args"] = args };

        var dialog = DialogService.Show<DexDialogDeposit>(args.title, parameters);
        var result = await dialog.Result;

        if (!result.Cancelled)
        {

        }
    }

    async Task OnWithdrawClick(WalletView row)
    {
        token = row;
        if (!string.IsNullOrWhiteSpace(token.Address)
            && walletState.Value.wallet != null
            && walletState.Value.wallet.BaseBalance >= 1m
            && row.DexWalletID != null
            && row.DexBalance > 0
            )
        {
            withdrawTitle = $"Withdraw {row.Symbol} to your address on {row.Name} {row.NetworkProvider}";
            dexWalletId = row.DexWalletID;
            provider = row.NetworkProvider;
            symbol = row.Symbol;
            contract = row.Contract;
            withdrawMin = row.MinWithdraw;
            withdrawMax = row.DexBalance;
            withdrawDefault = withdrawMax;

            depfee = row.DepositFee;
            wdrfee = row.WithdrawFee;

            var args = new DexWithdrawArgs
                {
                    title = withdrawTitle,
                    min = row.MinWithdraw,
                    max = row.DexBalance,
                    amount = row.DexBalance,
                    view = row
                };
            var parameters = new DialogParameters { ["Args"] = args };

            var dialog = DialogService.Show<DexDialogWithdraw>(args.title, parameters);
            var result = await dialog.Result;

            if (!result.Cancelled)
            {
                bool? cfm = await DialogService.ShowMessageBox(
                    "Warning", 
                    $"Withdraw {args.amount} {symbol} to {args.address}", 
                    yesText:"Confirm Withdraw", cancelText:"Cancel");
                StateHasChanged();

                if(cfm.HasValue && cfm.Value)
                {
                    await StartWithdraw(args.address, args.amount);
                }
                else
                {
                    Snackbar.Add($"Nothing happened.", Severity.Info);
                }
            }
        }
        else
        {
            Snackbar.Add($"No Token found.", Severity.Warning);
        }
    }

    private async Task StartWithdraw(string addr, decimal amount)
    {
        Snackbar.Add($"Begin Withdraw", Severity.Info);

        var wallet = walletState.Value.wallet;
        var wdwret = await wallet.DexWithdrawTokenAsync(dexWalletId, addr, amount);
        Snackbar.Add(wdwret.ResultCode.ToString(), wdwret.Successful() ? Severity.Success : Severity.Error);

        if (wdwret.Successful())
        {
            var wv = tokens.First(a => a.DexWalletID == dexWalletId);
            wv.DexBalance -= amount;

            Snackbar.Add($"Withdraw request sent", Severity.Success);
        }
        else
        {
            Snackbar.Add($"Withdraw request failed: {wdwret.ResultCode}", Severity.Warning);
        }

        StateHasChanged();
    }

    private void HandleCancel3()
    {
        withdrawVisible = false;
    }

    protected async override Task OnInitializedAsync()
    {
        Dispatcher.Dispatch(new WebWalletChangeTitleAction { title = "Lyra DEX Wallet" });

        try
        {
            if (walletState.Value.wallet != null)
                await RefreshAllWallets();
        }
        catch (Exception e)
        {
            Console.WriteLine("Error DexWallet OnInitializedAsync " + e.ToString());
        }        
        //StateHasChanged();
    }

    private async Task RefreshAllWallets()
    {
        refreshing = true;
        StateHasChanged();

        try
        {
            var dc = new DexClient(Configuration["network"]);
            var ext = await dc.GetSupportedExtTokenAsync(Configuration["network"]);
            //_tokens = ext.Asserts;

            var wallet = walletState.Value.wallet;
            var brks = await wallet.GetAllDexWalletsAsync(wallet.AccountId);
            await wallet.SyncAsync(null);

            tokens = new List<WalletView>();
            foreach (var ast in ext.Asserts)
            {
                var wv = new WalletView
                {
                    Name = ast.Name,
                    Symbol = ast.Symbol,
                    NetworkProvider = ast.NetworkProvider,
                    Contract = ast.Contract,
                    MinDeposit = ast.MinDeposit,
                    ConfirmationInfo = ast.ConfirmationInfo,
                    DepositFee = ast.DepositFee,
                    WithdrawFee = ast.WithdrawFee,
                    MinWithdraw = ast.MinWithdraw,
                    DailyWithdrawLimit = ast.DailyWithdrawLimit,
                };
                var bt = brks.FirstOrDefault(a => a.ExtSymbol == ast.Symbol) as TransactionBlock;
                var key = $"tether/{ast.Symbol}";
                if (bt != null)
                {
                    if (bt.Balances.ContainsKey(key))
                        wv.DexBalance = bt.Balances[key].ToBalanceDecimal();
                    else
                        wv.DexBalance = 0;
                    wv.Address = (bt as IDexWallet).ExtAddress;
                    wv.DexWalletID = bt.AccountID;
                }
                else
                    wv.DexBalance = 0;

                var lb = wallet.GetLatestBlock();
                if (lb != null && lb.Balances.ContainsKey(key))
                {
                    wv.MyBalance = lb.Balances[key].ToBalanceDecimal();
                }
                else
                    wv.MyBalance = 0;

                tokens.Add(wv);
            }
        }
        catch(Exception ex)
        {
            Snackbar.Add($"Error refreshing balance: {ex.Message}", Severity.Error);
        }

        refreshing = false;
    }

    private void HandleOk()
    {
        visible = false;
    }

    private void HandleCancel()
    {
        visible = false;
    }

    private async Task Transfer()
    {
        _confirmLoading = true;
        transferVisible = false;
        StateHasChanged();

        if (transferAmount <= 0)
            return;

        var wallet = walletState.Value.wallet;
        APIResult ret = null;
        if (transferToDex)
        {
            Snackbar.Add($"Transfering {transferAmount} {ticker} to DEX Wallet", Severity.Info);
            await wallet.SyncAsync(null);
            ret = await wallet.DexPutTokenAsync(dexWalletId, ticker, transferAmount);
        }
        else
        {
            Snackbar.Add($"Transfering {transferAmount} {ticker} to My Wallet", Severity.Info);
            await wallet.SyncAsync(null);
            ret = await wallet.DexGetTokenAsync(dexWalletId, transferAmount);
        }

        _confirmLoading = false;

        Snackbar.Add("Transfer result: "+ ret.ResultCode.ToString(), ret.Successful() ? Severity.Success : Severity.Error);

        if (ret.Successful())
        {
            var wv = tokens.First(a => a.DexWalletID == dexWalletId);
            if (transferToDex)
            {
                wv.MyBalance -= transferAmount;
                wv.DexBalance += transferAmount;
            }
            else
            {
                wv.MyBalance += transferAmount;
                wv.DexBalance -= transferAmount;
            }
        }
    }

    private void HandleCancel2()
    {
        transferVisible = false;
    }
}
