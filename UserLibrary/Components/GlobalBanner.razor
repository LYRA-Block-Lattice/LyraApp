@namespace UserLibrary.Components

@using Blazored.LocalStorage
@using Fluxor
@using Lyra.Core.API
@using Nebula.Store.WebWalletUseCase
@using UserLibrary.Data
@implements IDisposable

@if (showbackup)
{
    <div style="width:100%;">
        <MudLink Href="/backup" Underline="Underline.None">
            <MudAlert Severity="Severity.Warning" Variant="Variant.Filled">Wallet not backup. Tap here to backup your wallet.</MudAlert>
        </MudLink>
    </div>
}

@code
{
    [Inject]
    private IState<WebWalletState>? walletState { get; set; }
    [Inject]
    private IDispatcher Dispatcher { get; set; }
    [Inject] 
    private ILocalStorageService localStorage { get; set; }
    [Inject] NebulaConsts _consts { get; set; }

    bool showbackup;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender)
        {
            //walletState.StateChanged += this.WalletChanged;

            if(walletState.Value.wallet != null)
            {
                var wcjson = await localStorage.GetItemAsync<string>(_consts.NebulaStorName);
                var wc = new WalletContainer(wcjson);
                var meta = wc.Get(walletState.Value.wallet.AccountName);

                Dispatcher.Dispatch(new WebWalletBackupAction
                    {
                        IsBackuped = meta.Backup
                    });       
            }     
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    private void WalletChanged(object sender, WebWalletState wallet)
    {
        InvokeAsync(async () =>
        {
            if (wallet.wallet != null)
            {
                var wcjson = await localStorage.GetItemAsync<string>(_consts.NebulaStorName);
                var wc = new WalletContainer(wcjson);
                var meta = wc.Get(walletState.Value.wallet.AccountName);
                showbackup = !meta.Backup;
            }
            StateHasChanged();
        });
    }

    public void Dispose()
    {
        //walletState.StateChanged -= this.WalletChanged;
    }    
}