@namespace UserLibrary.Components
@inherits FluxorComponent

@using Fluxor
@using Fluxor.Blazor.Web.Components
@using Lyra.Core.API
@using Lyra.Core.Blocks
@using Lyra.Data.API
@using Lyra.Data.Crypto
@using Microsoft.Extensions.Configuration
@using Nebula.Store.WebWalletUseCase
@using UserLibrary.Data
@using BusinessLayer.Store.NotificationUseCase
@inject IConfiguration _config
@inject ILyraAPI lyraClient

@if (busy)
{
    <div style="z-index: 5;" class="spinner"></div>
}

<div class="swc mud-elevation-2">
    <div class="rndcc mud-elevation-2">
        <div class="ipt">
            <div>
                <MudNumericField T="decimal" HideSpinButtons="true"
                                 Style="font-size: 28px; margin-top: 0px; font-weight: 500;" DisableUnderLine
                                 Value="@amount1" ValueChanged="@(async (a) => await updateDig1(a))" />
            </div>
            <div class="algb algb2">
                <TokenSelect Tokens="@tickers" @ref="@sel1" ValueChanged="@(async(a) => await UpdateTicker1(a))" />

            </div>
        </div>
        <div class="ipt">
            <div title=@localizer["Estimated total value. Only for reference."]>@value1</div>
            @if (walletState.Value.wallet != null)
            {
                <div>
                    Balance: @($"{balance1:N4}")
                </div>
            }
        </div>
    </div>
    <div>
        <div class="arrdir1">
            <MudIcon Icon="@Icons.Filled.ArrowDownward" Color="Color.Secondary"
                     Size="Size.Medium" Style="mud-elevation-2"
                     @onclick="@DoSwapTicker"></MudIcon>
        </div>
    </div>

    <div class="rndcc mud-elevation-2">
        <div class="ipt">
            <div>
                <MudNumericField T="decimal" HideSpinButtons="true"
                                 Style="font-size: 28px; margin-top: 0px; font-weight: 500;"
                                 DisableUnderLine Value="@amount2" ValueChanged="@(async (a) => await updateDig2(a))" />
            </div>
            <div class="algb algb2">
                <TokenSelect Tokens="@tickers" @ref="@sel2" ValueChanged="@(async(a) => await UpdateTicker2(a))" />
            </div>
        </div>
        <div class="ipt">
            <div title="Estimated total value. Only for reference.">@value2</div>
            @if (walletState.Value.wallet != null)
            {
                <div>
                    @localizer["Balance:"] @($"{balance2:N4}")
                </div>
            }
        </div>
    </div>
    <div style="padding: 30px">
        @if (walletState.Value.wallet == null)
        {
            <a href="/wallet">
                <MudButton Variant="MudBlazor.Variant.Filled" FullWidth="true"
                       Color="Color.Primary" Size="Size.Large" class="rounded-pill">
                    <MudIcon Icon="@Icons.Filled.LockOpen" Title="Unlock" />
                    @localizer["Open Wallet"]
                </MudButton>
            </a>
        }
        else
        {
            <MudButton Variant="MudBlazor.Variant.Filled" FullWidth="true" Disabled="@(!canswap || swapping)"
                   Color="Color.Primary" Size="Size.Large" OnClick="@DoSwap" class="rounded-pill">

                @if (swapping)
                {
                    <MudProgressCircular Color="Color.Secondary" Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                    <MudText Class="ms-2">@localizer["Processing"]</MudText>
                }
                else
                {
                    <MudIcon Icon="@Icons.Filled.SwapCalls" Title="Swap" />
                    <MudText>@localizer["Swap"]</MudText>
                }
            </MudButton>
        }
    </div>

        <MudExpansionPanel>
            <TitleContent>
                <div>
                    <div class="d-flex">
                        <MudIcon Icon="@Icons.Material.Filled.Info" class="mr-3"></MudIcon>
                        <MudText><strong>@expandTitle</strong></MudText>
                    </div>
@if(updating)
                    {
                    <div style="position:absolute;left:0;top:-28px;z-index:20;width:100%;">
                        <MudProgressLinear Color="Color.Info" Style="height: 2px;" Indeterminate="true" Class="my-7" />
                    </div>
                    }

                </div>
            </TitleContent>
            <ChildContent>
                <div style="font-size: smaller; padding: 15px;">
                <div class="ipt" title=@localizer["Price queried from CoinGecko. Only for reference."]>
                    <div>@localizer["LYR external price"]</div>
                        <div>$ @lyrprice</div>
                    </div>
                <div class="ipt" title=@localizer["Price calculated from liquidate pool. Only for reference."]>
                    <div>@localizer["LYR internal price"]</div>
                        <div>$ @lyrintprice</div>
                    </div>
                    <MudDivider Class="ma-2" />
                    @if (haspoolinfo)
                    {
                        <div class="ipt">
                            <div>@localizer["Token Pair"]</div>
                            <div>@pairinfo</div>
                        </div>
                        @if (poollatest != null && amount1 != 0)
                        {
                            <div class="ipt">
                            <div>@localizer["Estimated ratio"]</div>
                                <div>@calprice</div>
                            </div>
                            <div class="ipt">
                            <div>@localizer["You will sell"]</div>
                                <div>@calsell</div>
                            </div>
                            <div class="ipt">
                            <div>@localizer["You will get"]</div>
                                <div>@calget</div>
                            </div>
                            <div class="ipt">
                            <div>@localizer["Price Impact"]</div>
                                <div>@calimpact</div>
                            </div>
                            <div class="ipt">
                            <div>@localizer["Pool Fee"]</div>
                                <div>@calprofee</div>
                            </div>
                            <div class="ipt">
                            <div>@localizer["Network Fee"]</div>
                                <div>@calnodfee</div>
                            </div>
                        }
                        else
                        {
                            <div class="d-flex justify-center">
                            <div>@localizer["Please change swap amount"]</div>
                            </div>
                        }
                    }

                    @if (haspoolinfo)
                    {
                        <MudDivider Class="ma-2" />
                        <div class="iptct">
                        <div>@localizer["Total Liquidate"]</div>
                            <div>@pairliquid</div>
                        </div>

                        <div class="ipt">
                        <div>@localizer["Your Share"]</div>
                            <div>@pairshare</div>
                        </div>
                    }
                    else
                    {
                        <div>
                        <div style="align-content:center;">@localizer["Please select a token pair."]</div>
                        </div>
                    }

                </div>
            </ChildContent>
        </MudExpansionPanel>
</div>

@code {
    [Inject]
    IState<HotDataState> hotData { get; set; }  

    [Inject]
    private IState<WebWalletState> walletState { get; set; }

    [Inject]
    private IDispatcher Dispatcher { get; set; }

    [Inject] ISnackbar Snackbar { get; set; }
    [Inject] ILyraAPI lyraApi { get; set; }
    [Inject] IStringLocalizer<Swap>? localizer { get; set; }
    double intervalBeforeMsgClose = 2000;

    bool busy, updating;

    RenderFragment expandTitle;
    RenderFragment value1, value2;

    decimal lyrprice, lyrintprice;   // int price: internal price calculated by pool
    decimal balance1, balance2;
    TokenSelect sel1, sel2;
    List<Ticker> tickers;
    Ticker selectedTicker1;
    Ticker selectedTicker2;

    RenderFragment pairinfo, pairliquid, pairshare;
    bool haspoolinfo = false;
    bool canswap;
    bool swapping;

    RenderFragment calprice, calsell, calget, calimpact, calprofee, calnodfee;

    string token0, token1;
    TransactionBlock poollatest;
    decimal price;
    decimal minrecv;
    decimal lyraprice;

    private decimal amount1 = 1m, amount2 = 0.0m;

    async Task updateDig1(decimal digi1)
    {
        amount1 = digi1;
        await UpdatePool(true);
    }
    async Task updateDig2(decimal digi2)
    {
        amount2 = digi2;
        await UpdatePool(false);
    }

    private void updateBtn1()
    {
        if (selectedTicker1 != null && poollatest != null && amount1 > 0 && token0 != null)
        {
            var swapcal = new SwapCalculator(token0, token1, poollatest,
                selectedTicker1.dbname, amount1, 0);
            amount2 = swapcal.MinimumReceived;

            canswap = amount1 > 0 && amount1 <= balance1
            && selectedTicker1 != null && selectedTicker2 != null
                && selectedTicker1 != selectedTicker2;
        }
        else if (selectedTicker1 == selectedTicker2)
        {
            amount2 = amount1;
            canswap = false;
        }
        else
        {
            amount2 = 0.0m;
            canswap = false;
        }
    }

    private void updateBtn2()
    {
        if (selectedTicker2 != null && poollatest != null && amount2 >= 0 && token0 != null)
        {
            var swapcal = new SwapCalculator(token0, token1, poollatest,
                selectedTicker2.dbname, amount2, 0);

            amount1 = swapcal.MinimumReceived;

            canswap = amount2 > 0 && amount2 < balance2
                && selectedTicker1 != null && selectedTicker2 != null
                && selectedTicker1 != selectedTicker2;
        }
        else
        {
            amount1 = 0.0m;
            canswap = false;
        }
    }

    private async Task UpdateTicker1(Ticker tk1)
    {
        selectedTicker1 = tk1;
        await UpdatePool(true);
    }

    private async Task UpdateTicker2(Ticker tk2)
    {
        selectedTicker2 = tk2;
        await UpdatePool(true);
    }

    private void UpdateValue()
    {
        if (selectedTicker1 == null)
        {
            value1 =
        @<div></div>
    ;
        }
        else
        {
            decimal val1 = 0;
            if (selectedTicker1.dbname == "LYR")
                val1 = lyrintprice;
            else if (selectedTicker1.dbname.StartsWith("tether/"))
            {
                val1 = hotData.Value.MarketPrices[selectedTicker1.dbname.Replace("tether/", "")];
            }
            else if (price > 0)
            {
                // then ticker2 is LYR. price is x tik1 to 1 tik2
                val1 = lyrintprice / price;
            }

            if (amount1 == 0)
            {
                value1 =
    @<div></div>
    ;
            }
            else
            {
                var val1str = $"{Math.Round(val1 * amount1, 2)}";
                value1 =
    @<div>~$ @val1str</div>
    ;
            }

        }

        if (selectedTicker2 == null)
        {
            value2 =
    @<div></div>
    ;
        }
        else
        {
            decimal val2 = 0;
            if (selectedTicker2.dbname == "LYR")
                val2 = lyrintprice;
            else if (selectedTicker2.dbname.StartsWith("tether/") && hotData.Value.MarketPrices != null)
            {
                val2 = hotData.Value.MarketPrices[selectedTicker2.dbname.Replace("tether/", "")];
            }
            else if (price > 0)
            {
                // then ticker1 is LYR. price is x tik1 to 1 tik2
                val2 = lyrintprice * price;
            }

            if (amount2 == 0)
            {
                value2 =
    @<div></div>
    ;
            }
            else
            {
                var val2str = $"{Math.Round(val2 * amount2, 2)}";
                value2 =
    @<div>~$ @val2str</div>
    ;
            }
        }
    }

    private void DoSwapTicker()
    {
        (selectedTicker1, selectedTicker2) = (selectedTicker2, selectedTicker1);
        (sel1.Value, sel2.Value) = (sel2.Value, sel1.Value);
        (amount1, amount2) = (amount2, amount1);
        UpdateBalance();
        updateBtn1();
        UpdateValue();
    }

    private string GN(string dbname)
    {
        return dbname.Replace("tether/", "$");
    }

    private async Task DoSwap()
    {
        swapping = true;
        busy = true;
        var result = await walletState.Value.wallet.SwapTokenAsync(token0, token1,
            selectedTicker1.dbname, amount1, minrecv);

        if (result.Successful())
        {
            Snackbar.Add(localizer["Token Swap Success! Waiting for pool updating..."], Severity.Success);
            await Task.Delay(3000);

            Snackbar.Add(localizer["Refresh pool and wallet..."], Severity.Info);
            await walletState.Value.wallet.SyncAsync(null);

            var existspool = await lyraApi.GetPoolAsync(selectedTicker1.dbname, selectedTicker2.dbname);
            if (existspool.Successful())
            {
                Snackbar.Add(localizer["Updated."], Severity.Success);

                poollatest = existspool.GetBlock() as TransactionBlock;
                token0 = existspool.Token0;
                token1 = existspool.Token1;
                CreatePoolInfo(poollatest);
            }
            else
            {
                Snackbar.Add(localizer["Pool refresh failed: {0}", existspool.ResultCode.Humanize()], Severity.Error);
            }

            updateBtn1();
            UpdateBalance();

            swapping = false;
        }
        else
            Snackbar.Add(localizer["Error Swap Token: {0}", result.ResultCode.Humanize()], Severity.Error);

        swapping = false;
        busy = false;
    }

    private void updateTradeInfo()
    {
        if (selectedTicker1 != null && amount1 > 0 && token0 != null)
        {
            var fromticker = selectedTicker1;
            var swapcal = new SwapCalculator(token0, token1, poollatest,
                fromticker.dbname, amount1, 0);
            var sell = $"{amount1} {fromticker}";
            calsell =
    @<div>@sell</div>
    ;

            price = swapcal.Price;
            var pricestr = $"{Math.Round(price, 8)} {selectedTicker1} " + localizer["per"] + $" {selectedTicker2}";
            calprice =
    @<div>@pricestr</div>
    ;

            minrecv = swapcal.MinimumReceived;
            var minget = $"{swapcal.MinimumReceived} {selectedTicker2}";
            calget =
    @<div>@minget</div>
    ;

            var imp = $"{swapcal.PriceImpact * 100} %";
            calimpact =
    @<div>@imp</div>
    ;

            var feen = $"{swapcal.PayToAuthorizer} LYR";
            var feep = $"{swapcal.PayToProvider} {fromticker}";
            calnodfee =
    @<div>@feen</div>
    ;
            calprofee =
    @<div>@feep</div>
    ;
        }


    }

    private async Task UpdatePool(bool Is1)
    {
        while(updating)
        {
            await Task.Delay(100);
        }
        updating = true;
        Console.WriteLine("Begin Update Pool");
        await InvokeAsync(() => StateHasChanged());

        if (!busy && selectedTicker1 != null && selectedTicker2 != null && selectedTicker1 != selectedTicker2)
        {
            busy = true;

            try
            {
                var existspool = await lyraApi.GetPoolAsync(selectedTicker1.dbname, selectedTicker2.dbname);
                if (existspool.Successful() && existspool.BlockData != null)
                {
                    poollatest = existspool.GetBlock() as TransactionBlock;
                    token0 = existspool.Token0;
                    token1 = existspool.Token1;
                }
                else
                {
                    haspoolinfo = false;
                    poollatest = null;
                    token0 = null;
                    token1 = null;
                }

                CreatePoolInfo(poollatest);

                UpdateBalance();
                updateTradeInfo();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"In UpdatePool: {ex}");
            }
            finally
            {
                busy = false;
                await InvokeAsync(() => StateHasChanged());
            }
        }
        else
        {
            haspoolinfo = false;
            poollatest = null;
            token0 = null;
            token1 = null;
        }

        try
        {
            if (Is1)
                updateBtn1();
            else
                updateBtn2();

            UpdateValue();
        }
        catch(Exception ex)
        {
            Console.WriteLine($"In UpdatePool 2: {ex}");
        }
        
        if (!haspoolinfo || amount1 == 0)
            expandTitle =
    @<div>@localizer["Please chose what to swap."]</div>
    ;
        else
            expandTitle = calprice;

        updating = false;
        await InvokeAsync(() => StateHasChanged());
    }

    private void UpdateBalance()
    {
        if (walletState.Value.wallet != null)
        {
            var blk = walletState.Value.wallet.GetLastSyncBlock();

            if (selectedTicker1 != null)
                if (blk != null && blk.Balances.ContainsKey(selectedTicker1.dbname))
                    balance1 = blk.Balances[selectedTicker1.dbname].ToBalanceDecimal();
                else
                    balance1 = 0;

            if (selectedTicker2 != null)
                if (blk != null && blk.Balances.ContainsKey(selectedTicker2.dbname))
                    balance2 = blk.Balances[selectedTicker2.dbname].ToBalanceDecimal();
                else
                    balance2 = 0;

            //Dispatcher.Dispatch(new WebWalletRefreshBalanceAction { wallet = walletState.Value.wallet });
        }

        //InvokeAsync(() => StateHasChanged());
    }



    private async Task OpenSwapUI()
    {
        busy = true;

        // for api sign only
        var pk = "n4uh7o2kAerPZQSNBRirzA3pSUBEuEhs6r7oRwpV6Dgbs3FvY";
        var pub = "LBRzScs8NwMcr7U8i9a8sSWETseWf3TLge4CVJy6as24hSB4hwtZ5jKTbHJdoVZBJiNC2LpjN9MQB719Py9YxXo2xpLxnS";

        var lsbret = await lyraApi.GetLastServiceBlockAsync();

        var sign = Signatures.GetSignature(pk, (lsbret.GetBlock() as ServiceBlock).Hash, pub);
        var tokens = await lyraApi.GetTokenNamesAsync(pub, sign, "(null)");

        tickers = tokens.Entities
            .Where(a => !a.StartsWith("unittest/"))
            .Select(a => new Ticker
                {
                    dbname = a,
                    Name = a.Replace("tether/", "$")
                })
            .OrderBy(a => a.Name)
            .ToList();
        tickers.Insert(0, new Ticker { dbname = "LYR", Name = "LYR" });


        busy = false;
    }

    bool init;
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender)
        {
            Dispatcher.Dispatch(new WebWalletChangeTitleAction { title = localizer["Lyra Swap"] });

            SubscribeToAction<MarketUpdated>(
                async (e) =>
                {
                    try
                    {
                        // price updated
                        lyrprice = hotData.Value.MarketPrices["LYR"];
                        lyrintprice = hotData.Value.MarketPrices["LYR_INT"];

                        // update pool
                        //_ = Task.Run(async () =>
                        await UpdatePool(true);
                    }
                    catch{}
                }
            );

            // fetch init prices
            Dispatcher.Dispatch(new HotUpdateAction());
        }

        if (firstRender && !init)
        {
            init = true;
            Snackbar.Add(localizer["Initialize Swap App..."], Severity.Info);

            expandTitle =
    @<div>@localizer["Please chose what to swap."]</div>
        ;

            try
            {
                if (walletState.Value.wallet != null)
                    await walletState.Value.wallet.SyncAsync(null);
                await OpenSwapUI();

                Snackbar.Add(localizer["Swap App is ready."], Severity.Success);
            }
            catch (Exception ex)
            {
                Snackbar.Add(localizer["Init refresh failed: {0}", ex.Message], Severity.Error);
            }

            StateHasChanged();
            init = false;
        }
    }


    private void CreatePoolInfo(TransactionBlock platest)
    {
        if (platest != null)
        {
            var info = $"{GN(token0)} vs {GN(token1)}";
            pairinfo =
    @<div>@info</div>
    ;

            if (platest.Balances.ContainsKey(token0))
            {
                var line1 = $"{platest.Balances[token0].ToBalanceDecimal()} {GN(token0)}";
                var line2 = $"{platest.Balances[token1].ToBalanceDecimal()} {GN(token1)}";
                pairliquid =
    @<div style="text-align:end">
        <div>@line1</div>
        <div>@line2</div>
    </div>
    ;
            }
            else
            {
                pairliquid =
    @<div>No Liquidate in Pool</div>
    ;
            }
        }
        else
        {
            pairinfo =
    @<div>No pool for selected token pair.</div>
    ;

            pairliquid =
    @<div>No Liquidate in Pool</div>
    ;
        }


        var pool = platest as IPool;
        if (pool != null && walletState.Value.wallet != null)
        {
            if (pool.Shares.ContainsKey(walletState.Value.wallet.AccountId))
            {
                var shareinfo = $"{Math.Round(pool.Shares[walletState.Value.wallet.AccountId].ToRitoDecimal() * 100, 4)} %";
                pairshare =
    @<div>@shareinfo</div>
    ;
            }
            else
            {
                pairshare =
    @<div>No Share in Pool</div>
    ;
            }
        }
        else
        {
            pairshare =
    @<div>No Share in Pool</div>
    ;
        }

    ;

        haspoolinfo = platest != null;
    }
}
