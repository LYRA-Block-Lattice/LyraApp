@namespace UserLibrary.Components
@using Blazored.LocalStorage
@using Fluxor
@using Nebula.Store.WebWalletUseCase
@using UserLibrary.Data

<div style="padding:15px;">
    <h3>Multiple wallet manager</h3>

            <MudSelect T="string" Label="Wallet Name" @ref="@sel" 
                SelectedValuesChanged="@Selected"
                AnchorOrigin="Origin.BottomCenter">
    @foreach(var name in walletNames)
            {
                <MudSelectItem Value="@name" />
            }
            </MudSelect>

@if(selName != null)
{
<MudGrid>
    <MudItem xs="12" sm="12" md="12">
        <MudTextField T="string" Label="Wallet Name" Variant="Variant.Text" @bind-Value="@selName" />
    </MudItem>
    <MudItem xs="12" sm="12" md="12">
        <MudTextField T="string" Label="Multiline" Variant="Variant.Text" @bind-Value="@selNote" Lines="5" />
    </MudItem>
    <MudItem xs="12" sm="12" md="12">
        <MudButton Variant="Variant.Filled" Color="Color.Primary"
            Disabled="@(!canupdate)"
            OnClick="Update">Update</MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Error" OnClick="Delete">Delete</MudButton>
    </MudItem>
</MudGrid>
}
</div>



@code {
    [Inject]
    private IDispatcher Dispatcher { get; set; }
    [Inject] 
    private ILocalStorageService localStorage { get; set; }
    [Inject] NebulaConsts _consts { get; set; }
    [Inject] ISnackbar Snackbar { get; set; }
    [Inject] private IDialogService DialogService { get; set; }

    MudSelect<string> sel;
    bool busy, canupdate;
    string[] walletNames = new string[]{};
    string selName, selNote;
    byte[] selData;
    bool selBackup;

    private async Task Update()
    {
        var wcjson = await localStorage.GetItemAsync<string>(_consts.NebulaStorName);
        var wc = new WalletContainer(wcjson);

        if(wc.Names.Contains(selName))
        {
            Snackbar.Add("Wallet name exists!", Severity.Warning);
            return;
        }

        wc.AddOrUpdate(selName, selData, selName, false);
        await localStorage.SetItemAsync(_consts.NebulaStorName, wc.ToString());

        walletNames = wc.Names;
        sel.Value = selName;
        StateHasChanged();

        Snackbar.Add("Wallet updated!", Severity.Success);
    }

    private async Task Delete()
    {
        var result = await DialogService.ShowMessageBox(
            "Warning",
                $"\nOnce you have deleted the wallet, you will never get it back. Make sure you have backup the private key. Are you sure you want to delete the wallet named \"{selName}\"?",
                yesText: "Confirm!", cancelText: "Cancel");

        if (result != null && result.Value)
        {
            var wcjson = await localStorage.GetItemAsync<string>(_consts.NebulaStorName);
            var wc = new WalletContainer(wcjson);
            wc.Remove(selName);
            await localStorage.SetItemAsync(_consts.NebulaStorName, wc.ToString());

            canupdate = false;
            selName = null;
            selData = null;
            selNote = null;
            selBackup = false;
            walletNames = wc.Names;
            sel.Reset();
            StateHasChanged();

            Snackbar.Add("Wallet deleted!", Severity.Success);
        }
        else
        {
            Snackbar.Add("Nothing changed.", Severity.Normal);
        }
    }

    async Task Selected()
    {        
        if(string.IsNullOrWhiteSpace(sel.Value))
        {
            canupdate = false;
            selName = null;
            selData = null;
            selNote = null;
            selBackup = false;
        }
        else
        {
            var wcjson = await localStorage.GetItemAsync<string>(_consts.NebulaStorName);
            var wc = new WalletContainer(wcjson);
            var meta = wc.Get(sel.Value);
            canupdate = true;
            selName = meta.Name;
            selData = meta.Data;
            selNote = meta.Note;
            selBackup = meta.Backup;
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender)
        {
            var wcjson = await localStorage.GetItemAsync<string>(_consts.NebulaStorName);
            var wc = new WalletContainer(wcjson);

            Dispatcher.Dispatch(new WebWalletChangeTitleAction { title = "Open Wallet" });

            walletNames = wc.Names;
            StateHasChanged();
        }
        await base.OnAfterRenderAsync(firstRender);
    }
}
