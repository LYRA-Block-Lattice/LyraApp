@namespace UserLibrary.Components

@using Fluxor
@using Lyra.Core.Accounts
@using Lyra.Core.Blocks
@using Lyra.Data.Blocks
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.Extensions.Configuration
@using Microsoft.JSInterop
@using Nebula.Store.WebWalletUseCase
@inject IConfiguration Configuration

<MudTabs SelectedTab="@selectedTab1">
    <MudTabPanel Text=@localizer["Staking Accounts"]>
        <table class="table">
            <thead>
                <tr>
                    <th>@localizer["Name"]</th>
                    <th>@localizer["Staking Amount"]</th>
                    <th>@localizer["Compound Mode"]</th>
                    <th>@localizer["Total Reward"]</th>
                    <th>@localizer["Start Time"]</th>
                    <th>@localizer["Staking Days"]</th>
                    <th>@localizer["Staking to Account"]</th>
                    <th>@localizer["Action"]</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var stk in walletState.Value.stkAccounts)
                {
                    <tr>
                        <td>@((stk as IStaking).Name)</td>
                        @if (walletState.Value.stkBalances != null)
                        {
                            <td>@walletState.Value.stkBalances[(stk as TransactionBlock).AccountID]</td>
                        }
                        else
                        {
                            <td>0</td>
                        }
                        <td>@((stk as IStaking).CompoundMode)</td>
                        <td>@walletState.Value.stkRewards[(stk as TransactionBlock).AccountID]</td>
                        <td>@((stk as IStaking).Start)</td>
                        <td>@((stk as IStaking).Days)</td>
                        <td>@((stk as IStaking).Voting)</td>
                        <td>
                            <MudButton Variant="MudBlazor.Variant.Filled" Color="Color.Primary"
                                   OnClick="@(async (e) => await AddStkAsync(e, (stk as TransactionBlock).AccountID))">@localizer["Add Staking"]</MudButton>
                            &nbsp;
                            <MudButton Variant="MudBlazor.Variant.Filled" Color="Color.Primary"
                                   OnClick="@(async () => {await UnstakingConfirm((stk as TransactionBlock).AccountID, (stk as IStaking).Start, (stk as IStaking).Days);})">@localizer["Unstaking"]</MudButton>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </MudTabPanel>
    <MudTabPanel Text=@localizer["Profiting Accounts"]>
        <table class="table">
            <thead>
                <tr>
                    <th>@localizer["Name"]</th>
                    <th>@localizer["Type"]</th>
                    <th>@localizer["Share Ratio"]</th>
                    <th>@localizer["Seats"]</th>
                    <th>@localizer["Profiting Account ID"]</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var pft in walletState.Value.pftAccounts)
                {
                    <tr>
                        <td>@pft.Name</td>
                        <td>@pft.PType</td>
                        <td>@pft.ShareRito</td>
                        <td>@pft.Seats</td>
                        <td>
                            @pft.AccountID
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </MudTabPanel>
</MudTabs>

<div style="height:60px;" />

<MudTabs SelectedTab="@selectedTab2">
    <MudTabPanel Text=@localizer["Create Staking Account"]>
        <p>
            @localizer["Name:"]
            <MudTextField Label=@localizer["Name"] @bind-Value="@stkName" />
        </p>
        <p>
            @localizer["Staking For Address:"]
            <MudTextField Label=@localizer["Address"] @bind-Value="@stkVoting" />
        </p>
        <p>
            @localizer["Days of staking:"]
            <MudTextField Label=@localizer["Days, >= 3"] @bind-Value="@stkDays" />
        </p>
        <p>
            @localizer["Compound staking mode:"]
            <input size="10" type="checkbox" @bind="@stkCompound" />
        </p>
        <div>
            <MudButton Variant="MudBlazor.Variant.Filled" Color="Color.Primary" Disabled="@adding"
                       OnClick="@(async () => await StakingCreate())">
                @if (adding)
                {
                    <MudProgressCircular Color="Color.Secondary" Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                    <MudText Class="ms-2">@localizer["Processing"]</MudText>
                }
                else
                {
                    <MudText>@localizer["Create Staking"]</MudText>
                }
            </MudButton>
        </div>
    </MudTabPanel>
    <MudTabPanel Text=@localizer["Create Profiting Account"]>
        <p>
            @localizer["Name:"]
            <MudTextField Label=@localizer["Name"] @bind-Value="@pftName" />
        </p>
        <p>
            @localizer["Type:"]
            <select style="height: 40px; width: 380px" @bind="@pftType">
                <option value="Node">@localizer["Node"]</option>
                <option disabled value="Oracle">@localizer["Oracle"]</option>
                <option disabled value="Merchant">@localizer["Merchant"]</option>
                <option value="Yield">@localizer["Yield"]</option>
            </select>
        </p>
        <p>
            @localizer["Ratio to share to staking (0% - 100%):"]
            <MudTextField Label=@localizer["Ratio"] @bind-Value="@pftShare" />
        </p>
        <p>
            @localizer["Number of staking (0 - 100):"]
            <MudTextField Label=@localizer["Seats number"] @bind-Value="@pftSeats" />
        </p>
        <div>
            <MudButton Variant="MudBlazor.Variant.Filled" Color="Color.Primary" Disabled="@adding"
                       OnClick="@(async () => await ProfitingCreate())">
                @if (adding)
                {
                    <MudProgressCircular Color="Color.Secondary" Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                    <MudText Class="ms-2">@localizer["Processing"]</MudText>
                }
                else
                {
                    <MudText>@localizer["Create Profiting Account"]</MudText>
                }
            </MudButton>
        </div>
    </MudTabPanel>
</MudTabs>

@code {
    [Inject]
    private IState<WebWalletState> walletState { get; set; }

    [Inject]
    private IDispatcher Dispatcher { get; set; }

    [Inject]
    private IJSRuntime JS { get; set; }

    [Inject] private IDialogService DialogService { get; set; }
    [Inject] ISnackbar Snackbar { get; set; }
    [Inject] ILyraAPI lyraApi { get; set; }
    [Inject] IStringLocalizer<Staking>? localizer { get; set; }

    string selectedTab1 = "staking";
    bool adding;

    private Task OnSelectedTabChanged1(string name)
    {
        selectedTab1 = name;
        return Task.CompletedTask;
    }

    string selectedTab2 = "crstk";

    private Task OnSelectedTabChanged2(string name)
    {
        selectedTab2 = name;
        return Task.CompletedTask;
    }

    public string stkName { get; set; }
    public string stkVoting { get; set; }
    public string stkDays { get; set; }
    public bool stkCompound { get; set; }

    public string pftName { get; set; }
    public string pftType { get; set; } = "Node";
    public string pftShare { get; set; }
    public string pftSeats { get; set; }

    private async Task AddStkAsync(MouseEventArgs e, string stkid)
    {
        try
        {
            var amt = await GetAmountInput();
            if (amt > 0)
            {
                Snackbar.Add(localizer["Add staking of {0} LYR...", amt]);
			    var crpftret = await walletState.Value.wallet.AddStakingAsync(
				    stkid, amt
				    );

			    if (crpftret.Successful())
			    {
				    await Task.Delay(3000);
                    Snackbar.Add(localizer["Success. Refreshing..."], Severity.Success);
				    await RefreshStakingAsync(walletState.Value.wallet);
			    }
			    else
			    {
                    Snackbar.Add(localizer["Failed adding staking. Error: {0}", crpftret.ResultCode.Humanize()], Severity.Error);
			    }
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add(localizer["Error: {0}", ex], Severity.Error);
        }
    }

    async Task UnstakingConfirm(string actid, DateTime dtStart, int days)
    {
        bool expired = dtStart.AddDays(days) < DateTime.UtcNow;

        bool? result;
        if (expired)
        {
            result = await DialogService.ShowMessageBox(
            localizer["Notice"],
                localizer["Staking has expired. It's now safe to unstake."],
                yesText: localizer["Confirm!"], cancelText: localizer["Cancel"]);
        }
        else
        {
            var timeleft = localizer["Staking will expire in {0:N2} Hours.", (dtStart.AddDays(days) - DateTime.UtcNow).TotalHours];
            result = await DialogService.ShowMessageBox(
            localizer["Warning"],
                timeleft + localizer["Unstaking within the promised staking period will pay 0.8% panalise fee. Are you sure you want to confirm?"],
                yesText: localizer["Confirm!"], cancelText: localizer["Cancel"]);
        }

        if (result != null && result.Value)
        {
            await RmStk(actid);
        }
        else
        {
            Snackbar.Add(localizer["Nothing changed."], Severity.Normal);
        }
    }

    private async Task RmStk(string stkid)
    {
        try
        {
            Snackbar.Add(localizer["Remove staking..."]);
			var crpftret = await walletState.Value.wallet.UnStakingAsync(stkid);
			if (crpftret.Successful())
			{
                await Task.Delay(3000);
                Snackbar.Add(localizer["Success. Refreshing..."], Severity.Success);
                await RefreshStakingAsync(walletState.Value.wallet);
			}
			else
			{
                Snackbar.Add(localizer["Failed to unstake. Error: {0}", crpftret.ResultCode.Humanize()], Severity.Error);
			}
        }
        catch (Exception ex)
        {
            Snackbar.Add(localizer["Error: {0}", ex], Severity.Error);
        }
    }

    private async Task<decimal> GetAmountInput()
    {
        string prompted = await JS.InvokeAsync<string>("prompt", localizer["How many LYR do you want to stake?"]); // Prompt
        if (prompted == null)
            return 0;
        return decimal.Parse(prompted);
    }

    private async Task StakingCreate()
    {
        adding = true;
        try
        {
            Snackbar.Add(localizer["Adding staking account..."]);
            var action = new WebWalletCreateStakingAction
                {
                    wallet = walletState.Value.wallet,
                    name = stkName,
                    voting = stkVoting,
                    days = int.Parse(stkDays),
                    compound = stkCompound
                };

            var crstkret = await action.wallet.CreateStakingAccountAsync(
                action.name, action.voting, action.days, action.compound
                );

            if (crstkret.Successful())
            {
                // wait for a while
                await Task.Delay(2000);
                Snackbar.Add(localizer["Success. Refreshing..."], Severity.Success);
                await RefreshStakingAsync(walletState.Value.wallet);
            }
            else
            {
                Snackbar.Add(localizer["Error: {0}", crstkret.ResultCode.Humanize()], Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add(localizer["Error: {0}", ex], Severity.Error);
        }
        adding = false;
    }

    private async Task ProfitingCreate()
    {
        adding = true;
        try
        {
            if (pftType != "Node" && pftType != "Yield")
            {
                return;
            }

            Snackbar.Add(localizer["Adding profiting account..."]);

            var type = (ProfitingType)Enum.Parse(typeof(ProfitingType), pftType);

            var action = new WebWalletCreateProfitingAction
                {
                    wallet = walletState.Value.wallet,
                    name = pftName,
                    type = type,
                    share = decimal.Parse(pftShare) / 100m,
                    seats = int.Parse(pftSeats)
                };

            var crpftret = await action.wallet.CreateProfitingAccountAsync(
                action.name, action.type, action.share, action.seats
                );

            if (crpftret.Successful())
            {
                // wait for a while
                await Task.Delay(2000);
                Snackbar.Add(localizer["Success. Refreshing..."], Severity.Success);
                await RefreshStakingAsync(walletState.Value.wallet);
            }
            else
            {
                Snackbar.Add(localizer["Error: {0}", crpftret.ResultCode.Humanize()], Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add(localizer["Error: {0}", ex], Severity.Error);
        }
        adding = false;
    }

    private async Task RefreshStakingAsync(Wallet wallet)
    {
        var result = await lyraApi.GetAllBrokerAccountsForOwnerAsync(wallet.AccountId);
        if (result.ResultCode == APIResultCodes.Success)
        {
            var blks = result.GetBlocks();

            var allStks = blks.Where(a => a is StakingGenesis)
                  .Cast<StakingGenesis>();

            var dict = new Dictionary<string, decimal>();
            var rwds = new Dictionary<string, decimal>();
            DateTime dtstart = DateTime.MinValue;

            var list = new List<TransactionBlock>();
            foreach (var stk in allStks)
            {
                dtstart = stk.Start;
                var ret = await lyraApi.GetLastBlockAsync(stk.AccountID);
                if (ret.Successful())
                {
                    var stkblk = ret.GetBlock() as TransactionBlock;
                    list.Add(stkblk);
                    dtstart = (stkblk as IStaking).Start;
                    decimal amt = 0;
                    if (stkblk.Balances.ContainsKey(LyraGlobal.OFFICIALTICKERCODE))
                        amt = stkblk.Balances[LyraGlobal.OFFICIALTICKERCODE].ToBalanceDecimal();
                    dict.Add(stk.AccountID, amt);
                }
                else
                {
                    list.Add(stk);
                }

                var stats = await lyraApi.GetBenefitStatsAsync(stk.Voting, stk.AccountID, DateTime.MinValue, DateTime.MaxValue);
                rwds.Add(stk.AccountID, stats.Total);
            }

            walletState.Value.pftAccounts = blks.Where(a => a is ProfitingGenesis)
              .Cast<ProfitingGenesis>().ToList();
            walletState.Value.stkAccounts = list;
            walletState.Value.stkBalances = dict;
            walletState.Value.stkRewards = rwds;

            await InvokeAsync(StateHasChanged);
        }
        else
        {
            Snackbar.Add(localizer["Error: {0}", result.ResultCode.Humanize()], Severity.Error);
        }
    }
}
