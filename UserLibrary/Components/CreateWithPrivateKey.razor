@namespace UserLibrary.Components
@using Blazored.LocalStorage
@using DexServer.Ext
@using System.ComponentModel
@using Fluxor
@using Lyra.Core.API
@using Lyra.Core.Accounts
@using Lyra.Core.Blocks
@using Lyra.Data.API
@using Lyra.Data.Crypto
@using Lyra.Shared
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.Extensions.Configuration
@using Nebula.Data
@using Nebula.Store.WebWalletUseCase
@using UserLibrary.Data
@inject IConfiguration Configuration

@if (busy)
{
    <div style="z-index: 5;" class="spinner"></div>
}

<div class="flex-container">
    @if (ui == UI.entry)
    {
        <div class="mid">
            <MudTextField InputType="InputType.Text" Label="Name of wallet" Size="Size.Large" @bind-Value="@walletName" />
        </div>
        <div class="mid">
            <MudTextField InputType="InputType.Password" Label="Password" Size="Size.Large" @bind-Value="@txtValue1" />
        </div>
        <div class="mid">
            <MudTextField InputType="InputType.Password" Label="Confirm Password" Size="Size.Large" @bind-Value="@txtValue2" />
        </div>
        <div class="mid">
            <MudTextField Size="Size.Large" Label="Private Key" @bind-Value="@prvKey" />
        </div>
        @if(false)//hasStore)
        {
            <div class="mid">
                <MudSwitch T="bool" @bind-Checked="@confirmdelete" Color="Color.Primary">Confirm delete existing wallet</MudSwitch>
            </div>            
        }
        <div class="mid">
            <MudButton Variant="Variant.Filled" Disabled="@busy" Color="Color.Primary" OnClick="@RestoreWallet">
                @if (busy)
                {
                    <MudProgressCircular Color="Color.Secondary" Class="ms-n1" Size="Size.Small" Indeterminate="true"/>
                    <MudText Class="ms-2">Processing</MudText>
                }
                else
                {
                    <MudText>Restore Wallet</MudText>
                }
            </MudButton>
        </div>
        <div class="mid">
            <MudDivider Style="width: 100px; height: 1px" />            
        </div>
        <div class="mid">
            Or
        </div>
        <div class="mid">
        <a href="/login">
            <MudButton Variant="Variant.Filled">@act with password</MudButton></a>
        </div>
    }

    @if (ui == UI.success)
    {
        <div class="mid">
            <p>Your wallet has been created</p>
            @extraok
        </div>
    }

</div>

@code {
    [Inject]
    private IState<WebWalletState> walletState { get; set; }

    [Inject]
    private IDispatcher Dispatcher { get; set; }

    [Inject]
    public ILocalStorageService localStorage { get; set; }

    [Parameter]
    public EventCallback OnFinished { get; set; }

    [Inject] ISnackbar Snackbar { get; set; }
    [Inject] NebulaConsts _consts { get; set; }

    bool busy;

    enum UI { entry, success, failed }
    UI ui = UI.entry;

    string walletName;

    string act = "Create new";
    string prvKey;

    string title = "BasicModal";
    bool _visible = false;

    bool _confirmdelete = false;
    bool confirmdelete
    {
        get
        {
            return _confirmdelete;
        }
        set
        {
            _confirmdelete = value;
            DoAlert(_confirmdelete);
        }
    }

    RenderFragment extraok =
    @<a href="login">
        <MudButton Variant="Variant.Filled" Color="Color.Primary">Login</MudButton>
    </a>;

    RenderFragment extrafail =
    @<MudButton Variant="Variant.Filled" Color="Color.Primary">Retry</MudButton>
    ;

    private string txtValue1 { get; set; }
    private string txtValue2 { get; set; }
    private bool visible = false;
    bool hasStore;

    protected async override Task OnInitializedAsync()
    {
        var storeName = _consts.NebulaStorName;

        if (await localStorage.ContainKeyAsync(storeName))
        {
            hasStore = true;
            act = "Open existing wallet";
        }        
        else
        {
            hasStore = false;
            act = "Create new";
        }

        Dispatcher.Dispatch(new WebWalletChangeTitleAction { title = "Create wallet with private key" });
        await base.OnInitializedAsync();
    }

    private async Task RestoreWallet()
    {
        if(string.IsNullOrWhiteSpace(walletName))
        {
            Snackbar.Add("Please specify the name of wallet.");
            return;
        }

        var wcjson = await localStorage.GetItemAsync<string>(_consts.NebulaStorName);
        var wc = new WalletContainer(wcjson);
        if(wc.Names.Contains(walletName))
        {
            Snackbar.Add($"Wallet name exists. Please pick another one.", Severity.Warning);
            return;
        }

        if (txtValue1 == txtValue2)
        {
            if(!Signatures.ValidatePrivateKey(prvKey))
            {
                Snackbar.Add("Invalid private key.", Severity.Warning);
                return;
            }

            busy = true;
            var aib = new AccountInBuffer();
            Wallet.Create(aib, walletName, txtValue1, Configuration["network"], prvKey);
            var data = aib.GetBuffer(txtValue1);

			var meta = new WalletContainer.WalletData
			{
				Name = walletName,
				Data = data,
				Backup = false,
				Note = $"Restored: {DateTime.Now}"
			};
			wc.Add(meta);

            await localStorage.SetItemAsync(_consts.NebulaStorName, wc.ToString());

            OnFinished.InvokeAsync();
        }

        else
        {
            Snackbar.Add("Passwords not match.", Severity.Warning);
        }
    }

    private void DoAlert(bool ck)
    {
        if(ck)
        {
            Snackbar.Add("Your current wallet will be overwritten!!! Please make sure you want to do this.", Severity.Warning);
        }
    }
}
