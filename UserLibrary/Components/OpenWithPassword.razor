@namespace UserLibrary.Components
@using Blazored.LocalStorage
@using DexServer.Ext
@using System.ComponentModel
@using Fluxor
@using Lyra.Core.API
@using Lyra.Core.Accounts
@using Lyra.Core.Blocks
@using Lyra.Data.API
@using Lyra.Shared
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.Extensions.Configuration
@using Nebula.Data
@using Nebula.Store.WebWalletUseCase
@using UserLibrary.Data
@inject IConfiguration Configuration
@inject NavigationManager UriHelper
@implements IDisposable

@if (busy)
{
    <div style="z-index: 5;" class="spinner"></div>
}

    <div class="flex-container">
        <div class="mid">
            <MudSelect T="string" Label="Wallet Name" @ref="@sel" AnchorOrigin="Origin.BottomCenter">
    @foreach(var name in walletNames)
            {
                <MudSelectItem Value="@name" />
            }
            </MudSelect>
        </div>
        <div class="mid">
            <MudTextField InputType="InputType.Password" Label="Password" Size="Size.Large" @bind-Value="@txtValue1" />
        </div>
        <div class="mid">
            <MudButton Variant="Variant.Filled" Disabled="@busy" Color="Color.Primary" OnClick="@OpenWallet">
                @if (busy)
                {
                    <MudProgressCircular Color="Color.Secondary" Class="ms-n1" Size="Size.Small" Indeterminate="true"/>
                    <MudText Class="ms-2">Processing</MudText>
                }
                else
                {
                    <MudText>Open Wallet</MudText>
                }
            </MudButton>
        </div>
        <div class="mid">
            <MudDivider Style="width: 0px; height: 0px" />
        </div>
        <div class="mid">
            <a href="/login/key"><MudButton Variant="Variant.Filled">Open with Private Key</MudButton></a>
        </div>
        <div class="mid">
            <a href="/login/new"><MudButton Variant="Variant.Filled">Create New</MudButton></a>
        </div>
    </div>



@code {
    [Inject]
    private IState<WebWalletState> walletState { get; set; }

    [Inject]
    private IDispatcher Dispatcher { get; set; }

    [Inject] ISnackbar Snackbar { get; set; }
    [Inject] 
    private ILocalStorageService localStorage { get; set; }
    [Inject] NebulaConsts _consts { get; set; }

    private string txtValue1 { get; set; }
    private string txtValue2 { get; set; }
    private bool visible = false;

    bool busy;
    string[] walletNames = new string[]{};
    MudSelect<string> sel;

    private void OpenWallet()
    {
        if(sel.SelectedValues.Any())
        {
            busy = true;

            Dispatcher.Dispatch(new WebWalletOpenAction
                {
                    store = _consts.NebulaStorName,
                    name = sel.SelectedValues.First(),
                    password = txtValue1
                });
        }
        else
        {
            Snackbar.Add("Please select wallet to open");
        }
    }

    private void WalletChanged(object sender, WebWalletState wallet)
    {
        if (busy)
        {
            busy = false;
            if (wallet.wallet != null)
            {
                UriHelper.NavigateTo("wallet");
            }
            else
            {
                InvokeAsync(() =>
                {
                    Snackbar.Add(wallet.error, Severity.Error);
                    StateHasChanged();
                }
                );
            }
        }   
    }

    public void Dispose()
    {
        walletState.StateChanged -= this.WalletChanged;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender)
        {
            var wcjson = await localStorage.GetItemAsync<string>(_consts.NebulaStorName);
            var wc = new WalletContainer(wcjson);

            walletState.StateChanged += this.WalletChanged;
            Dispatcher.Dispatch(new WebWalletChangeTitleAction { title = "Open Wallet" });

            walletNames = wc.Names;
        }
        await base.OnAfterRenderAsync(firstRender);
    }
}
