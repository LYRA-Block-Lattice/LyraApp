@namespace UserLibrary.Components
@using Fluxor
@using Nebula.Store.WebWalletUseCase

    <div class="flex-container">
        <div class="node-list mint-token" style="background-color: #594AE2;color:white;">
            <div>
                <h1>Mint New Token</h1>
            </div>
            <div>
                Mint your own Token with just a few clicks.
            </div>
            <div>
                <MudDivider />
            </div>
            <div style="font-size: 0.7rem;">
                Note: Every token mint costs 10,000 LYR.
            </div>
        </div>
    </div>
    <div class="flex-container">
        <div class="node-list mint-token">
            <div class="card-staking">
                <h3>Token Name</h3>
                <MudTextField @bind-Value="@name" Label="minimum 2 characters" />
            </div>
            <div class="card-staking">
                <h3>Domain</h3>
                <MudTextField @bind-Value="@domain" Label="minimum 6 characters" />
            </div>
            <div class="card-staking">
                <h3>Description</h3>
                <MudTextField @bind-Value="@desc" Label="optional" />
            </div>
            <div class="card-staking">
                <h3>Supply</h3>
                <MudNumericField T="Int64" Lable="maximum 90,000,000,000"
                                @bind-Value="@supply" />
            </div>
            <div class="card-staking">
                <h3>Decimals (0 - 8)</h3>
                <MudNumericField T="Int64"
                                @bind-Value="@precision" />
            </div>
            <div class="card-staking">
                <h3>Owner</h3>
                <MudTextField @bind-Value="@owner" Label="optional" />
            </div>
            <div class="card-staking">
                <h3>Address</h3>
                <MudTextField @bind-Value="@address" Label="optional" />
            </div>
            <div>
                @if (walletState.Value.wallet == null)
                {
                    <a href="wallet"><MudButton Variant="Variant.Filled" FullWidth="true" Color="Color.Primary">Open wallet to create token</MudButton></a>
                }
                else
                {
                    <MudButton Variant="Variant.Filled" Disabled="@loading" FullWidth="true" Color="Color.Primary" @ref="@btn"
                        OnClick="@mint">
                        @if (loading)
                        {
                            <MudProgressCircular Color="Color.Secondary" Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                            <MudText Class="ms-2">Processing</MudText>
                        }
                        else
                        {
                            <MudText>Mint</MudText>
                        }
                    </MudButton>
                }

            </div>

                @if (success)
                {
                    <p>
                        <a href="wallet">View Your Coins</a>
                    </p>
                }

                <p>@errmsg</p>
            </div>
        </div>



@code {
    [Inject]
    private IState<WebWalletState> walletState { get; set; }

    [Inject]
    private IDispatcher Dispatcher { get; set; }

    string name, domain, desc, owner, address;
    Int64 supply, precision;
    MudButton btn;
    bool loading;
    string errmsg;
    bool success;

    protected async override Task OnInitializedAsync()
    {
        Dispatcher.Dispatch(new WebWalletChangeTitleAction { title = "Lyra Mint Token" });
        await base.OnInitializedAsync();
    }

    private async Task mint()
    {
        try
        {
            loading = true;
            var ret = await walletState.Value.wallet.CreateTokenAsync(
                name, domain, desc, (sbyte)precision, supply, true,
                owner, address, null, ContractTypes.Cryptocurrency, null
            );
            if (ret.Successful())
            {
                btn.Disabled = true;
                btn.ChildContent =
    @<div>Success!</div>
    ;
                success = true;
                errmsg = null;
            }
            else
            {
                success = false;
                errmsg = ret.ResultCode.ToString();
            }

        }
        catch (Exception ex)
        {
            errmsg = ex.ToString();
        }

        loading = false;
    }
}