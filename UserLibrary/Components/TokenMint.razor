@namespace UserLibrary.Components
@using Fluxor
@using Nebula.Store.WebWalletUseCase

<div>
    <div style="height: 300px; background: #ECEFF1; ">
        <div style="padding: 25px;">
            <div style="width: 100%; height: 100px; display: flex">
                <h1 style="align-self: flex-end; font-size:40px;">Hello, My new token!</h1>
            </div>
            <div style="width: 100%;">
                Mint your own Token with just a few clicks.
            </div>
            <div style="width: 100%; padding-top: 10px; padding-bottom: 10px;">
                <MudDivider />
            </div>
            <div style="width: 100%; font-size: x-small;">
                Note: Every mint costs 10,000 LYR.
            </div>
        </div>
    </div>
    <div style="height:50px;" />
    <div>
        <p>
            <h3>Token Name</h3>
            <MudTextField @bind-Value="@name" Label="minimum 2 characters" />
        </p>
        <div style="height:45px;" />
        <p>
            <h3>Domain</h3>
            <MudTextField @bind-Value="@domain" Label="minimum 6 characters" />
        </p>
        <div style="height:45px;" />
        <p>
            <h3>Description</h3>
            <MudTextField @bind-Value="@desc" Label="optional" />
        </p>
        <p>
            <h3>Supply</h3>
            <MudNumericField T="Int64" Lable="maximum 90,000,000,000"
                             @bind-Value="@supply" />
        </p>
        <div style="height:45px;" />
        <p>
            <h3>Precision (0 - 8)</h3>
            <MudNumericField T="Int64"
                             @bind-Value="@precision" />
        </p>
        <div style="height:45px;" />
        <p>
            <h3>Owner</h3>
            <MudTextField @bind-Value="@owner" Label="optional" />
        </p>
        <div style="height:45px;" />
        <p>
            <h3>Address</h3>
            <MudTextField @bind-Value="@address" Label="optional" />
        </p>
        <div style="height:45px;" />
        <p>
            @if (walletState.Value.wallet == null)
            {
                <a href="wallet"><MudButton Variant="MudBlazor.Variant.Filled" FullWidth="true" Color="Color.Primary">Open wallet to create token</MudButton></a>
            }
            else
            {
                <MudButton Variant="MudBlazor.Variant.Filled" Disabled="@loading" FullWidth="true" Color="Color.Primary" @ref="@btn"
                       OnClick="@mint">
                    @if (loading)
                    {
                        <MudProgressCircular Color="Color.Secondary" Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                            <MudText Class="ms-2">Processing</MudText>               
                    }
                    else
                    {
                        <MudText>Mint</MudText>
                    }
                </MudButton>
            }

        </p>

        @if (success)
        {
            <p>
                <a href="wallet">View Your Coins</a>
            </p>
        }

        <p>@errmsg</p>
    </div>
</div>



@code {
    [Inject]
    private IState<WebWalletState> walletState { get; set; } = null!;

    [Inject]
    private IDispatcher Dispatcher { get; set; } = null!;

    string? name, domain, desc, owner, address;
    Int64 supply, precision;
    MudButton btn = null!;
    bool loading;
    string? errmsg;
    bool success;

    protected async override Task OnInitializedAsync()
    {
        Dispatcher.Dispatch(new WebWalletChangeTitleAction { title = "Lyra Mint Token" });
        await base.OnInitializedAsync();
    }

    private async Task mint()
    {
        try
        {
            loading = true;
            var ret = await walletState.Value.wallet.CreateTokenAsync(
                name, domain, desc, (sbyte)precision, supply, true,
                owner, address, null, ContractTypes.Cryptocurrency, null
            );
            if (ret.Successful())
            {
                loading = true;
                success = true;
            }
            else
            {
                success = false;
                errmsg = ret.ResultCode.ToString();
            }

        }
        catch (Exception ex)
        {
            errmsg = ex.ToString();
        }

        loading = false;
    }
}