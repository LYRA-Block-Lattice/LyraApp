@namespace UserLibrary.Components
@using Blazored.LocalStorage
@using DexServer.Ext
@using System.ComponentModel
@using Fluxor
@using Lyra.Core.API
@using Lyra.Core.Accounts
@using Lyra.Core.Blocks
@using Lyra.Data.API
@using Lyra.Shared
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.Extensions.Configuration
@using Nebula.Data
@using Nebula.Store.WebWalletUseCase
@using UserLibrary.Data

@if (busy)
{
    <div style="z-index: 5;" class="spinner"></div>
}

<div class="flex-container">
    @if (ui == UI.entry)
    {
        <div class="mid">
            <MudTextField InputType="InputType.Text" Label="Name of wallet" Size="Size.Large" @bind-Value="@walletName" />
        </div>
        <div class="mid">
            <MudTextField InputType="InputType.Password" Label="Password" Size="Size.Large" @bind-Value="@txtValue1" />
        </div>
        <div class="mid">
            <MudTextField InputType="InputType.Password" Label="Confirm Password" Size="Size.Large" @bind-Value="@txtValue2" />
        </div>
        <div class="mid">
            <MudButton Variant="MudBlazor.Variant.Filled" Disabled="@busy" Color="Color.Primary" OnClick="@CreateWallet">
                @if (busy)
                {
                    <MudProgressCircular Color="Color.Secondary" Class="ms-n1" Size="Size.Small" Indeterminate="true"/>
                    <MudText Class="ms-2">Processing</MudText>
                }
                else
                {
                    <MudText>Create Wallet</MudText>
                }
            </MudButton>
        </div>
        <div class="mid">
            <MudDivider Style="width: 100px; height: 1px" />            
        </div>
        <div class="mid">
            Or
        </div>
        <div class="mid">
            <a href="/login/key"><MudButton Variant="MudBlazor.Variant.Filled">Restore wallet with Private Key</MudButton></a>
        </div>
    }

    @if(ui == UI.success)
    {
        <div class="mid">
            Your wallet has been created.
        </div>
    }


    </div>


@code {
    [Inject]
    private IState<WebWalletState> walletState { get; set; }

    [Inject]
    private IDispatcher Dispatcher { get; set; }

    [Parameter] 
    public EventCallback OnFinished { get; set; }

    [Inject] ISnackbar Snackbar { get; set; }

    [Inject]
    IConfiguration Configuration { get; set; }
    [Inject] 
    private ILocalStorageService localStorage { get; set; }
    [Inject] NebulaConsts _consts { get; set; }

    bool busy;

    enum UI {entry, success, failed}
    UI ui = UI.entry;
    string walletName;

    RenderFragment extraok =
        @<a href="login"><MudButton Variant="MudBlazor.Variant.Filled" Color="Color.Primary">Login</MudButton></a>;

        RenderFragment extrafail =
    @<MudButton Variant="MudBlazor.Variant.Filled" Color="Color.Primary">Retry</MudButton>
    ;

    private string txtValue1 { get; set; }
    private string txtValue2 { get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        Dispatcher.Dispatch(new WebWalletChangeTitleAction { title = "Create new wallet" });
    }

    // the logic: 
    // wallet container will be storename_networkid
    // content: json, do by WalletContainer
    private async Task CreateWallet()
    {
        if(string.IsNullOrWhiteSpace(walletName))
        {
            Snackbar.Add("Please specify the name of wallet.");
            return;
        }

        var wcjson = await localStorage.GetItemAsync<string>(_consts.NebulaStorName);
        var wc = new WalletContainer(wcjson);
        if(wc.Names.Contains(walletName))
        {
            Snackbar.Add($"Wallet name exists. Please pick another one.", Severity.Warning);
            return;
        }

        busy = true;
        if(txtValue1 == txtValue2)
        {
            var aib = new AccountInBuffer();
            Wallet.Create(aib, walletName, txtValue1, Configuration["network"]);
            var data = aib.GetBuffer(txtValue1);

			var meta = new WalletContainer.WalletData
			{
				Name = walletName,
				Data = data,
				Backup = false,
				Note = $"Created: {DateTime.Now}"
			};
			wc.Add(meta);

            await localStorage.SetItemAsync(_consts.NebulaStorName, wc.ToString());

            OnFinished.InvokeAsync();
        }
        else
        {
            Snackbar.Add("Passwords not match.", Severity.Warning);
        }
    }

}
