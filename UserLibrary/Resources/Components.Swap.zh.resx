<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Balance:" xml:space="preserve">
    <value>余额：</value>
  </data>
  <data name="Error Swap Token: {0}" xml:space="preserve">
    <value>通证置换不成功： {0}</value>
  </data>
  <data name="Estimated ratio" xml:space="preserve">
    <value>估计比例</value>
  </data>
  <data name="Estimated total value. Only for reference." xml:space="preserve">
    <value>估计总额。仅供参考。</value>
  </data>
  <data name="Init refresh failed: {0}" xml:space="preserve">
    <value>初始化失败： {0}</value>
  </data>
  <data name="Initialize Swap App..." xml:space="preserve">
    <value>初始化置换 App……</value>
  </data>
  <data name="LYR external price" xml:space="preserve">
    <value>LYR 外部价格</value>
  </data>
  <data name="LYR internal price" xml:space="preserve">
    <value>LYR 链上价格</value>
  </data>
  <data name="Lyra Swap" xml:space="preserve">
    <value>Lyra 通证置换</value>
  </data>
  <data name="Network Fee" xml:space="preserve">
    <value>网络费用</value>
  </data>
  <data name="Open Wallet" xml:space="preserve">
    <value>打开钱包</value>
  </data>
  <data name="per" xml:space="preserve">
    <value>每</value>
  </data>
  <data name="Please change swap amount" xml:space="preserve">
    <value>请更改置换数量</value>
  </data>
  <data name="Please chose what to swap." xml:space="preserve">
    <value>请选择想要置换的通证对。</value>
  </data>
  <data name="Please select a token pair." xml:space="preserve">
    <value>请选择一个通证对。</value>
  </data>
  <data name="Pool Fee" xml:space="preserve">
    <value>流动性池费用</value>
  </data>
  <data name="Pool refresh failed: {0}" xml:space="preserve">
    <value>流动性池刷新错误： {0}</value>
  </data>
  <data name="Price calculated from liquidate pool. Only for reference." xml:space="preserve">
    <value>价格计算自流动性池，仅供参考。</value>
  </data>
  <data name="Price Impact" xml:space="preserve">
    <value>价格影响</value>
  </data>
  <data name="Price queried from CoinGecko. Only for reference." xml:space="preserve">
    <value>价格来自 CoinGecko。仅供参考</value>
  </data>
  <data name="Processing" xml:space="preserve">
    <value>处理中</value>
  </data>
  <data name="Refresh pool and wallet..." xml:space="preserve">
    <value>更新流动性池和钱包……</value>
  </data>
  <data name="Swap" xml:space="preserve">
    <value>置换</value>
  </data>
  <data name="Swap App is ready." xml:space="preserve">
    <value>置换 App 已就绪。</value>
  </data>
  <data name="Token Pair" xml:space="preserve">
    <value>通证对</value>
  </data>
  <data name="Token Swap Success! Waiting for pool updating..." xml:space="preserve">
    <value>通证置换成功！等待流动性池更新……</value>
  </data>
  <data name="Total Liquidate" xml:space="preserve">
    <value>总共流动性</value>
  </data>
  <data name="Updated." xml:space="preserve">
    <value>已更新。</value>
  </data>
  <data name="You will get" xml:space="preserve">
    <value>您会得到</value>
  </data>
  <data name="You will sell" xml:space="preserve">
    <value>您将卖出</value>
  </data>
  <data name="Your Share" xml:space="preserve">
    <value>您的份额</value>
  </data>
</root>