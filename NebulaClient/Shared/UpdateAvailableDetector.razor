@using UserLibrary.Data
@inject IJSRuntime _jsRuntime

@if (_newVersionAvailable)
{
    <button type="button" class="btn btn-warning shadow floating-update-button" onclick="window.location.reload()">
        A new version of the application is available. Click here to reload.
    </button>
}

@code {
    [Inject] DealerConnMgr connMgr { get; set; }
    [Inject] IJSRuntime JsRuntime { get; set; }

    private bool _newVersionAvailable = false;

    protected override async Task OnInitializedAsync()
    {
        await RegisterForUpdateAvailableNotification();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender)
        {
            // get version
            var dealerClient = connMgr.GetDealer(null);
            if (dealerClient != null)
            {
                var verb = await dealerClient.GetBriefAsync();
                var myver = this.GetType().Assembly.GetName().Version.ToString();
                if(verb.Version != myver)
                {
                    var msg = $"Found new version {verb.Version}, my version {myver}";
                    Console.WriteLine(msg);

                    await JsRuntime.InvokeVoidAsync("alert", msg);
                }
                else
                {
                    Console.WriteLine($"My version {myver} is up to date.");
                }
            }
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task RegisterForUpdateAvailableNotification()
    {
        await _jsRuntime.InvokeAsync<object>(
            identifier: "registerForUpdateAvailableNotification",
            DotNetObjectReference.Create(this),
            nameof(OnUpdateAvailable));
    }

    [JSInvokable(nameof(OnUpdateAvailable))]
    public Task OnUpdateAvailable()
    {
        _newVersionAvailable = true;
        StateHasChanged();

        return Task.CompletedTask;
    }

}